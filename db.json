{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/computer/cipan1.png","path":"img/computer/cipan1.png","modified":1,"renderable":0},{"_id":"source/img/computer/cipan2.gif","path":"img/computer/cipan2.gif","modified":1,"renderable":0},{"_id":"source/img/computer/cipan3.gif","path":"img/computer/cipan3.gif","modified":1,"renderable":0},{"_id":"source/img/computer/cipan4.png","path":"img/computer/cipan4.png","modified":1,"renderable":0},{"_id":"source/img/kafka/kafka_basic_construct.png","path":"img/kafka/kafka_basic_construct.png","modified":1,"renderable":0},{"_id":"source/img/kafka/kafka_message.png","path":"img/kafka/kafka_message.png","modified":1,"renderable":0},{"_id":"source/img/kafka/kafka_constancepng.png","path":"img/kafka/kafka_constancepng.png","modified":1,"renderable":0},{"_id":"source/img/node/IAMTB.png","path":"img/node/IAMTB.png","modified":1,"renderable":0},{"_id":"source/img/patterndesign/zhuangshi.png","path":"img/patterndesign/zhuangshi.png","modified":1,"renderable":0},{"_id":"source/img/php/Linux_CPU_Usage_Analysis.png","path":"img/php/Linux_CPU_Usage_Analysis.png","modified":1,"renderable":0},{"_id":"source/img/avator/fucktheking.jpg","path":"img/avator/fucktheking.jpg","modified":1,"renderable":0},{"_id":"source/img/php/api-doc-1.jpg","path":"img/php/api-doc-1.jpg","modified":1,"renderable":0},{"_id":"source/img/php/api-doc-2.jpg","path":"img/php/api-doc-2.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/img/patterndesign/qiaojie.png","path":"img/patterndesign/qiaojie.png","modified":1,"renderable":0},{"_id":"source/img/patterndesign/adapter.png","path":"img/patterndesign/adapter.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/img/php/storm-2.jpg","path":"img/php/storm-2.jpg","modified":1,"renderable":0},{"_id":"source/img/ruankao/17-18.png","path":"img/ruankao/17-18.png","modified":1,"renderable":0},{"_id":"source/img/php/storm-3.jpg","path":"img/php/storm-3.jpg","modified":1,"renderable":0},{"_id":"source/img/php/api-doc-3.jpg","path":"img/php/api-doc-3.jpg","modified":1,"renderable":0},{"_id":"source/img/php/storm-1.jpg","path":"img/php/storm-1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/img/kafka/zero_copy.png","path":"img/kafka/zero_copy.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"source/img/kafka/kafka_basic_2.png","path":"img/kafka/kafka_basic_2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/img/kafka/no_zero_copy.png","path":"img/kafka/no_zero_copy.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/img/patterndesign/strategy.png","path":"img/patterndesign/strategy.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1561384573793},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1561384573796},{"_id":"source/favicon.ico","hash":"1b6f0965050e24f8a54c7ae8a980e8a79f5ac357","modified":1561384573177},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1561384573802},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1561384573812},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1561384573795},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1561384573814},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1561384573815},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1561384573817},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1561384573816},{"_id":"themes/next/bower.json","hash":"beac259ba5ef7d199a45a142221dae7d34dbdc49","modified":1561384573819},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1561384573852},{"_id":"themes/next/package.json","hash":"22a8e1a6259ee7452fe0d9a7a8952ad3ccabf719","modified":1561384573972},{"_id":"source/CNAME","hash":"5d57bade95ca0ff8857742d1c6d190fe73e1f0df","modified":1561384573132},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1561384573819},{"_id":"source/_posts/2015-ruankao-am.md","hash":"fe08b25d9a332c97df90cba0b6cae53fdab5141c","modified":1561384573137},{"_id":"source/_posts/PHP-APP-RSA-AES.md","hash":"3a7fa0f3118075aae4348b6957cc3a223a3112fe","modified":1561384573138},{"_id":"source/_posts/big_small_binary.md","hash":"90d6c2bab66c1edc93cb9f534f331e8e87867bdc","modified":1561384573139},{"_id":"source/_posts/code-igniter-apidoc.md","hash":"02b20243ba0ef725bdb746bef7ee46f4e8b6ae64","modified":1561384573144},{"_id":"source/_posts/disk-basic.md","hash":"15b33409b8fffad2c0ee8266b089b3ee6376dc79","modified":1561384573151},{"_id":"source/_posts/computer-science-summary.md","hash":"418fabd127f231058e6e4bd12f6f1cb496c2c939","modified":1561384573150},{"_id":"source/_posts/head_first_c_.md","hash":"ebc13334eaaaf4d2b4f87243d538f319cd94f8ae","modified":1561384573152},{"_id":"source/_posts/head_first_c_106.md","hash":"f48f4d6e00139e6498b8243242ea15abd37c3f7e","modified":1561384573154},{"_id":"source/_posts/head_firstc_strstr_94.md","hash":"c0791ff540605286c976db4bb3cac60119c627b4","modified":1561384573157},{"_id":"source/_posts/head_firstc_str_reverse_98.md","hash":"4aff5189bd0911a79c06bb35f80272d253d405d3","modified":1561384573156},{"_id":"source/_posts/head_frist_c_78.md","hash":"09bc01995695e658fe621a892d5fa85ddfb3c80a","modified":1561384573158},{"_id":"source/_posts/http-cache.md","hash":"3ed1136b746893ce62911b7157f75c958a3f0ee0","modified":1561384573159},{"_id":"source/_posts/interface_security.md","hash":"4a2b45a59c6ba35fc54387b98f7f607eff3b1aa2","modified":1561384573160},{"_id":"source/_posts/java-2016-decorator.md","hash":"384121aa03e176ad94df59d5fc6f9b19210430a1","modified":1561384573160},{"_id":"source/_posts/java-adapter.md","hash":"e6ab4ae6de21e013c4edc5e52394cc71487e0ee6","modified":1561384573161},{"_id":"source/_posts/java-bridge.md","hash":"04b8f1eceb0b7d425132274d60071da96eceb214","modified":1561384573162},{"_id":"themes/next/_config.yml","hash":"ad5c19b247d8b27f7af698e8d2848194a89b9dee","modified":1561384573818},{"_id":"source/_posts/java-strategy.md","hash":"7374cb46a1e2143fa1071b611ae573d8c52222a4","modified":1561384573164},{"_id":"source/_posts/jp2a-meituan.md","hash":"1903091dc87eb7dea3f6047dcaa15253d5f61855","modified":1561384573164},{"_id":"source/_posts/linux-top-about-cpu.md","hash":"50b09e3c458eecd157e502fc091aaf7c5e1ba005","modified":1561384573166},{"_id":"source/_posts/kafka-basic-from-imooc.md","hash":"0399c8f8605e873eb10a2f2c3e51ea146bc95e6c","modified":1561384573166},{"_id":"source/_posts/mycnart_email_config.md","hash":"ff0af9263d59dc433c029e96a089f7e28f3e85b9","modified":1561384573168},{"_id":"source/_posts/php-catch-fatel-error.md","hash":"4216a31bb152b53b73525e33ea1383c746244874","modified":1561384573168},{"_id":"source/_posts/php-insert-sort.md","hash":"6f4c96452c953c4891bf5978a651e7827d098388","modified":1561384573169},{"_id":"source/_posts/phpstorm-add-comment-in-function.md","hash":"a1261a05115eff426d5868d767abdcad816eb9d4","modified":1561384573172},{"_id":"source/_posts/php7-update-on-ubuntu.md","hash":"0b9a5b6d7ed1357cc23131e8b852d5ec6f770411","modified":1561384573170},{"_id":"source/_posts/post.md","hash":"43646fa0a794f41a38045ce30a15006790d1574c","modified":1561384573173},{"_id":"source/_posts/redis_incr_hash.md","hash":"17ccb13470b46f3e364cc0cae668d294a2613973","modified":1561384573174},{"_id":"source/_posts/transfer-hue.md","hash":"c2509df226f11827ec732e7dd9c1a04fc20eaac6","modified":1561384573175},{"_id":"source/_posts/workday.md","hash":"58868a7308c7598ab0f754641850ec5aee44e3de","modified":1561384573177},{"_id":"source/about/index.md","hash":"19b411f8f14a555a4cb9cf82557e5c34b08a1ade","modified":1561384573177},{"_id":"source/categories/index.md","hash":"8b3c00e0731e5b4a40d5142268aaf77de0fc8025","modified":1561384573177},{"_id":"source/tags/index.md","hash":"c9dc4500e7615a5a97ede92672e5740933f80fd7","modified":1561384573208},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1561384573803},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1561384573806},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1561384573805},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1561384573807},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1561384573808},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1561384573821},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1561384573822},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1561384573822},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1561384573823},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1561384573825},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1561384573809},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1561384573825},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1561384573827},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1561384573829},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1561384573853},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1561384573826},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1561384573855},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1561384573854},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1561384573856},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1561384573857},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1561384573858},{"_id":"themes/next/languages/ja.yml","hash":"509af6c38458a402d37b9beea3500e3b439aa153","modified":1561384573859},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1561384573861},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1561384573862},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1561384573860},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1561384573863},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1561384573865},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1561384573864},{"_id":"themes/next/languages/zh-hk.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1561384573867},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1561384573866},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1561384573875},{"_id":"themes/next/languages/zh-tw.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1561384573868},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1561384573969},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1561384573968},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1561384573967},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1561384573971},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1561384573970},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1561384573863},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1561384573973},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1561384573974},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1561384573975},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1561384574147},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1561384573969},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1561384574151},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1561384574153},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1561384573972},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574087},{"_id":"source/img/computer/cipan1.png","hash":"ab5742cbc60b9f616545456a29824f1495d04df0","modified":1561384573177},{"_id":"source/_posts/.idea/modules.xml","hash":"6abd6dcb985048745c9214d67295bdf1597307ee","modified":1561384573135},{"_id":"source/img/computer/cipan2.gif","hash":"e9be664f153c5c83144d682f24e937bf4716c6d1","modified":1561384573177},{"_id":"source/img/computer/cipan3.gif","hash":"56f867c74f3949e6a466f2c339f4c5cdddfc348a","modified":1561384573177},{"_id":"source/img/computer/cipan4.png","hash":"63b3c2ea35a37a08c5900eef7e932912b8148ff4","modified":1561384573177},{"_id":"source/_posts/.idea/workspace.xml","hash":"a531017a2331c783460e459b693e6a5c1493922e","modified":1561384573135},{"_id":"source/img/kafka/kafka_basic_construct.png","hash":"269e9cc8759a89cb12aba411da2a6cf2937cccb1","modified":1561384573177},{"_id":"source/img/kafka/kafka_message.png","hash":"61aceafdd5a290eb896e79704f5c8a43f0091ed3","modified":1561384573192},{"_id":"source/img/kafka/kafka_constancepng.png","hash":"ac050b1c5e5a299ee85d34ef1b09c561952ab74d","modified":1561384573177},{"_id":"source/img/node/IAMTB.png","hash":"165df2204f10c3a43bbc24ae145a28d860be080d","modified":1561384573192},{"_id":"source/_posts/.idea/_posts.iml","hash":"883c5341e8fbf804eb5336c828bf69849ce05d2f","modified":1561384573134},{"_id":"source/img/patterndesign/zhuangshi.png","hash":"f9ba69ccc8d3ba621bfbaaa5190dcbb3a42158e5","modified":1561384573192},{"_id":"source/img/php/Linux_CPU_Usage_Analysis.png","hash":"4808ee62ddca27280eddc860c1b37e4c3a63a9d0","modified":1561384573192},{"_id":"source/img/avator/fucktheking.jpg","hash":"286e125e5bf57d7d3440b9a1671e96ba310e2cd3","modified":1561384573177},{"_id":"source/img/php/api-doc-1.jpg","hash":"6d71ac82bd785a8720931bc4f6c8ffe34b84a9dc","modified":1561384573208},{"_id":"source/img/php/api-doc-2.jpg","hash":"4495d8cc1177623dc239fb5dc12620f38b81024d","modified":1561384573208},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1561384573830},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1561384573833},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1561384573840},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1561384573834},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1561384573832},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1561384573841},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1561384573842},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1561384573844},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1561384573845},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1561384573843},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1561384573846},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1561384573847},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561384573870},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561384573871},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1561384573847},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1561384573869},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1561384573878},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1561384573878},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1561384573893},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1561384573878},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1561384573878},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1561384573893},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1561384573893},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1561384573893},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1561384573893},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1561384573909},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1561384573909},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1561384573893},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1561384573925},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1561384573925},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1561384573925},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1561384573925},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1561384573945},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1561384573951},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1561384573953},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1561384573957},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1561384573958},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1561384573959},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1561384573977},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1561384573978},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1561384573952},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1561384573980},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1561384573979},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1561384573982},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1561384573982},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1561384573984},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1561384573984},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1561384573959},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1561384573956},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561384574089},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1561384574087},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561384574089},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1561384573981},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561384574091},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561384574092},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561384574094},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561384574095},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561384574093},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1561384574090},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561384574098},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561384574099},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561384574098},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561384574101},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561384574097},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561384574096},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1561384574100},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1561384574103},{"_id":"source/img/patterndesign/qiaojie.png","hash":"0659cc586a5bfa5ae6d1df87ed622c67efaf17b5","modified":1561384573192},{"_id":"source/img/patterndesign/adapter.png","hash":"e17cf68afe8854a6ac668463161edcb9fd78be3f","modified":1561384573192},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561384574102},{"_id":"source/img/php/storm-2.jpg","hash":"f9e2d9554515520b961e94cf04a0c625ae164f63","modified":1561384573208},{"_id":"source/img/ruankao/17-18.png","hash":"7fcb4da270cb392e8e995052b272cb2d8ecde696","modified":1561384573208},{"_id":"source/img/php/storm-3.jpg","hash":"a1df6435f9adf363aff9fc0ffcd7c3f5e28979b7","modified":1561384573208},{"_id":"source/img/php/api-doc-3.jpg","hash":"fbc7c7ed9e3ece35678d38227a66c2bbf07b296d","modified":1561384573208},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384573925},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384573925},{"_id":"source/img/php/storm-1.jpg","hash":"a92d2d6b8ac033dd2e297b43f0a64d1b421211c0","modified":1561384573208},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561384574103},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574057},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574056},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574059},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574083},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561384574085},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1561384573893},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1561384573877},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1561384573893},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1561384573893},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1561384573909},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1561384573909},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1561384573893},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1561384573893},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1561384573909},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1561384573909},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1561384573909},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1561384573909},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1561384573878},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1561384573925},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1561384573909},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1561384573925},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1561384573925},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1561384573909},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1561384573925},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1561384573909},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1561384573940},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1561384573925},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1561384573943},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1561384573944},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1561384573941},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1561384573942},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1561384573948},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1561384573949},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1561384573948},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1561384573954},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1561384573950},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1561384573951},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1561384573955},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1561384573947},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1561384573955},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1561384573965},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1561384574055},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1561384573963},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1561384573966},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1561384574058},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1561384574059},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1561384573964},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1561384574083},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1561384574082},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561384574106},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1561384574056},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561384574105},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1561384574084},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561384574107},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1561384574108},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1561384574110},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561384574111},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561384574114},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1561384574106},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561384574114},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1561384574117},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1561384574117},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561384574119},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1561384574120},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1561384574115},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561384574143},{"_id":"source/img/kafka/zero_copy.png","hash":"43f6cb6fe98baaf0202ae186bebe79b06a44b8b1","modified":1561384573192},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1561384574085},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1561384574118},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561384574140},{"_id":"source/img/kafka/kafka_basic_2.png","hash":"b31c07cc7f268c110e19f5d588d4db5092129be5","modified":1561384573177},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561384574145},{"_id":"source/img/kafka/no_zero_copy.png","hash":"5e03e74008ee0e76d36d455dd17acf49a0b0abc6","modified":1561384573192},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1561384573987},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1561384573961},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1561384573989},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1561384573962},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1561384573987},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1561384573990},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1561384574006},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1561384573988},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1561384574033},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1561384574049},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1561384574052},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1561384574050},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1561384574053},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1561384574053},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1561384574062},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1561384574051},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1561384574061},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1561384574063},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1561384574064},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1561384574066},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1561384574064},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1561384574070},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1561384574054},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1561384574065},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1561384574072},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1561384574067},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1561384574072},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1561384574073},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1561384574071},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1561384574075},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1561384574076},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1561384574079},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1561384574079},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1561384574077},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1561384574113},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1561384574081},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1561384574080},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561384574122},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561384574123},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1561384574131},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1561384574132},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1561384574133},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561384574121},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561384574139},{"_id":"source/img/patterndesign/strategy.png","hash":"69ef7631dbed5cf7bd12740ebd36b529fbb46e8e","modified":1561384573192},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1561384573992},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1561384573994},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1561384573992},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1561384573991},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1561384573995},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1561384573997},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1561384573998},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1561384573996},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1561384574000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1561384574001},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1561384574002},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1561384574004},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1561384574004},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1561384574005},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1561384574008},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1561384574009},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1561384574003},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1561384574007},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1561384574012},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1561384574011},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1561384574013},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1561384574014},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1561384574015},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1561384574016},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1561384574016},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1561384574017},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1561384574018},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1561384574019},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1561384574019},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1561384574021},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1561384574023},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1561384574024},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1561384574020},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1561384574025},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1561384574023},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1561384574031},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1561384574029},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1561384574030},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1561384574032},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1561384574034},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1561384574035},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1561384574036},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1561384574037},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1561384574010},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1561384574036},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1561384574039},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1561384574038},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1561384574040},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1561384574040},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1561384574044},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1561384574042},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1561384574043},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1561384574045},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1561384574046},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1561384574041},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1561384574048},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1561384574022},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1561384574068},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561384574125},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561384574129},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561384574127},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1561384573999},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561384574069},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561384574074},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1561384574047}],"Category":[{"name":"PHP","_id":"cjxag35mf0004nsgvno6v31tu"},{"name":"C","_id":"cjxag35mm0009nsgv3bkfgv0e"},{"name":"computer","_id":"cjxag35mw000jnsgvv3zf1rwr"},{"name":"设计模式","_id":"cjxag35na0015nsgv50r1btow"},{"name":"LINUX","_id":"cjxag35nf001cnsgv982kpjes"},{"name":"REDIS","_id":"cjxag35nw0022nsgvd2gr9r89"},{"name":"node","_id":"cjxag35nz0027nsgvmrhde5l8"},{"name":"kafka","_id":"cjxag35u30050nsgvhcxfy4xe"}],"Data":[],"Page":[{"title":"分类","date":"2016-11-04T10:41:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-11-04 18:41:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-06-24T13:56:13.177Z","path":"categories/index.html","layout":"page","_id":"cjxag35ma0001nsgvsw5tmzbi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about tb","date":"2016-11-04T10:35:03.000Z","_content":"\n## Dear :\n\n![fucktheking][1]\n\n\n[1]: /img/avator/fucktheking.jpg\n\n<h5 align=\"right\">Best wishes</h5>\n\n","source":"about/index.md","raw":"---\ntitle: about tb\ndate: 2016-11-04 18:35:03\n---\n\n## Dear :\n\n![fucktheking][1]\n\n\n[1]: /img/avator/fucktheking.jpg\n\n<h5 align=\"right\">Best wishes</h5>\n\n","updated":"2019-06-24T13:56:13.177Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxag35md0003nsgvxqosdcpf","content":"<h2 id=\"Dear\"><a href=\"#Dear\" class=\"headerlink\" title=\"Dear :\"></a>Dear :</h2><p><img src=\"/img/avator/fucktheking.jpg\" alt=\"fucktheking\"></p>\n<h5 align=\"right\">Best wishes</h5>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Dear\"><a href=\"#Dear\" class=\"headerlink\" title=\"Dear :\"></a>Dear :</h2><p><img src=\"/img/avator/fucktheking.jpg\" alt=\"fucktheking\"></p>\n<h5 align=\"right\">Best wishes</h5>\n\n"},{"title":"tags","date":"2016-11-04T10:40:09.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-04 18:40:09\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-06-24T13:56:13.208Z","path":"tags/index.html","layout":"page","_id":"cjxag35u2004znsgv0bzur9gv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PHP_APP_RSA_AES实现服务器客户端双向加密","date":"2016-11-18T05:39:22.000Z","_content":"\n## 目的：实现和app端的双向加密解密功能##\n\n## 共有七个文件 ##\n其中包括三个类文件\n1. `lib_aes.php` aes对称加密解密类\n2. `server_rsa_crypt.php` 服务端RSA公钥私钥非对称加密解密类\n3. `client_rsa_crypt.php` 客户端RSA公钥私钥非对称加密解密类\n\n <!-- more -->\n\n四个过程文件,其中文件中有注释和exapmle数据\n\n- 第一步：客户端和服务端交换密钥（明文）-`service_client_exchange.php`\n- 第二步:客户端发起带参数请求（加密后）- `client_generate_aeskey.php`\n\n- 第三步：服务端解密客户端请求\n   并加密服务端数据（先解密，后加密）-`service_decrypt_client_001.php`\n\n- 第四步：客户端解密服务端数据（先解密，..加密）-`client_decrypt_server.php`\n\n[代码地址][1]\n----\n\nAnd So on...\n\n\n  [1]: https://github.com/tuber/PHP_APP_RSA_AES\n\n\n","source":"_posts/PHP-APP-RSA-AES.md","raw":"---\ntitle: PHP_APP_RSA_AES实现服务器客户端双向加密\ndate: 2016-11-18 13:39:22\ncategories: PHP\ntags:\n - RSA\n - AES\n - 双向加密解密\n---\n\n## 目的：实现和app端的双向加密解密功能##\n\n## 共有七个文件 ##\n其中包括三个类文件\n1. `lib_aes.php` aes对称加密解密类\n2. `server_rsa_crypt.php` 服务端RSA公钥私钥非对称加密解密类\n3. `client_rsa_crypt.php` 客户端RSA公钥私钥非对称加密解密类\n\n <!-- more -->\n\n四个过程文件,其中文件中有注释和exapmle数据\n\n- 第一步：客户端和服务端交换密钥（明文）-`service_client_exchange.php`\n- 第二步:客户端发起带参数请求（加密后）- `client_generate_aeskey.php`\n\n- 第三步：服务端解密客户端请求\n   并加密服务端数据（先解密，后加密）-`service_decrypt_client_001.php`\n\n- 第四步：客户端解密服务端数据（先解密，..加密）-`client_decrypt_server.php`\n\n[代码地址][1]\n----\n\nAnd So on...\n\n\n  [1]: https://github.com/tuber/PHP_APP_RSA_AES\n\n\n","slug":"PHP-APP-RSA-AES","published":1,"updated":"2019-06-24T13:56:13.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35m40000nsgvq7brdxdi","content":"<h2 id=\"目的：实现和app端的双向加密解密功能\"><a href=\"#目的：实现和app端的双向加密解密功能\" class=\"headerlink\" title=\"目的：实现和app端的双向加密解密功能\"></a>目的：实现和app端的双向加密解密功能</h2><h2 id=\"共有七个文件\"><a href=\"#共有七个文件\" class=\"headerlink\" title=\"共有七个文件\"></a>共有七个文件</h2><p>其中包括三个类文件</p>\n<ol>\n<li><code>lib_aes.php</code> aes对称加密解密类</li>\n<li><code>server_rsa_crypt.php</code> 服务端RSA公钥私钥非对称加密解密类</li>\n<li><p><code>client_rsa_crypt.php</code> 客户端RSA公钥私钥非对称加密解密类</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<p>四个过程文件,其中文件中有注释和exapmle数据</p>\n<ul>\n<li>第一步：客户端和服务端交换密钥（明文）-<code>service_client_exchange.php</code></li>\n<li><p>第二步:客户端发起带参数请求（加密后）- <code>client_generate_aeskey.php</code></p>\n</li>\n<li><p>第三步：服务端解密客户端请求<br> 并加密服务端数据（先解密，后加密）-<code>service_decrypt_client_001.php</code></p>\n</li>\n<li><p>第四步：客户端解密服务端数据（先解密，..加密）-<code>client_decrypt_server.php</code></p>\n</li>\n</ul>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a><a href=\"https://github.com/tuber/PHP_APP_RSA_AES\" target=\"_blank\" rel=\"external\">代码地址</a></h2><p>And So on…</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目的：实现和app端的双向加密解密功能\"><a href=\"#目的：实现和app端的双向加密解密功能\" class=\"headerlink\" title=\"目的：实现和app端的双向加密解密功能\"></a>目的：实现和app端的双向加密解密功能</h2><h2 id=\"共有七个文件\"><a href=\"#共有七个文件\" class=\"headerlink\" title=\"共有七个文件\"></a>共有七个文件</h2><p>其中包括三个类文件</p>\n<ol>\n<li><code>lib_aes.php</code> aes对称加密解密类</li>\n<li><code>server_rsa_crypt.php</code> 服务端RSA公钥私钥非对称加密解密类</li>\n<li><p><code>client_rsa_crypt.php</code> 客户端RSA公钥私钥非对称加密解密类</p>","more":"</li>\n</ol>\n<p>四个过程文件,其中文件中有注释和exapmle数据</p>\n<ul>\n<li>第一步：客户端和服务端交换密钥（明文）-<code>service_client_exchange.php</code></li>\n<li><p>第二步:客户端发起带参数请求（加密后）- <code>client_generate_aeskey.php</code></p>\n</li>\n<li><p>第三步：服务端解密客户端请求<br> 并加密服务端数据（先解密，后加密）-<code>service_decrypt_client_001.php</code></p>\n</li>\n<li><p>第四步：客户端解密服务端数据（先解密，..加密）-<code>client_decrypt_server.php</code></p>\n</li>\n</ul>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a><a href=\"https://github.com/tuber/PHP_APP_RSA_AES\">代码地址</a></h2><p>And So on…</p>"},{"title":"大端字节序与小端字节序","date":"2016-11-04T13:12:03.000Z","_content":"\n大端字节序：数据的低位字节保存在内存的高地址端，等于内存的低位保存的是数据的高位地址\n小端字节序：数据的高位字节保存在内存的高地址端，\n网络字节序：tcpip是基于大端字节序\n <!-- more -->\n\n缘由：内存每个地址单元对应一个字节，就是8bit。现在为32或者64位cpu，寄存器的宽度在大于了一个字节之后，字节排放就需要有个顺序，就有了大端和小端。所以大端和小端指的是寄存器的排列顺序。所以只是在跨平台或者网络编程程序中会经常用到，一般情况不会用到。\n\n在c语言中，指针大小在32位机器上为4字节*8bit，64位机器上为8字节*8bit\n\n----------------------- 最高内存地址 0xffffffff\n栈底\n栈\n栈顶\n-----------------------\n\nNULL (空洞)\n-----------------------\n堆\n-----------------------\n未初始 化的数据\n----------------------- 统称数据段\n初始化的数据\n-----------------------\n正 文段(代码段)\n----------------------- 最低内存地址 0x00000000\n\n\n内存低地址存数据的高位，内存的高地址存数据的低位。\n内存是由低到高增长，按照单个进程内的存储器地址由低到高分别为 代码段 数据段（全局变量+静态变量） 堆（动态分配内存） 栈（局部变量）\n\n如何验证本机是低位还是高位？不同的处理器有不同的大小端模式\n\n\n本地a字节序转成网络字节序-发送给b  b接收网络字节序 -b转成本地字节序 ，网络字节序为大端模式\n\n\n比如内存地址由低到高：0x01 0x02\n数据为12345678，数据的1234为高位，5678为低位。\n\n0x01存的是1234，内存低地址存数据高位，为大端。\n\n{% codeblock lang:c %}\n#include <stdio.h>\n\nint main(){\n\n\n  int num=0x12345678;\n\n  char *pnum = (char *)&num;\n\n  printf(\" sizeof pnum is %i\\n\",sizeof(pnum));\n\n  printf(\"first %p,value is %x\\n\",pnum,pnum[0]);\n\n  printf(\"second %p,value is %x\\n\",pnum+1,pnum[1]);\n  printf(\"third %p,value is %x\\n\",pnum+2,pnum[2]);\n  printf(\"fourth %p,value is %x\\n\",pnum+3,pnum[3]);\n\n\n}\n{% endcodeblock %}\n\n\n执行结果，可以看出，78存在了低地址位，所以是小端序。\n\n·\n```\nsizeof pnum is 4\nfirst 1703740,value is 78\nsecond 1703741,value is 56\nthird 1703742,value is 34\nfourth 1703743,value is 12\nPress any key to continue\n```\n\n结合php的PACK/unpack，可以得出一致结果:小端序\n\n\n```\n<?php\n\n\ndefine('BIG_ENDIAN', pack('L', 1) === pack('N', 1));\n\nif (BIG_ENDIAN)\n{\n  echo \"大端序\";\n}\nelse\n{\n  echo \"小端序\";\n}\n```\n","source":"_posts/big_small_binary.md","raw":"---\ntitle: 大端字节序与小端字节序\ndate: 2016-11-04 21:12:03\ncategories: C\ntags:\n- 大端字节序\n---\n\n大端字节序：数据的低位字节保存在内存的高地址端，等于内存的低位保存的是数据的高位地址\n小端字节序：数据的高位字节保存在内存的高地址端，\n网络字节序：tcpip是基于大端字节序\n <!-- more -->\n\n缘由：内存每个地址单元对应一个字节，就是8bit。现在为32或者64位cpu，寄存器的宽度在大于了一个字节之后，字节排放就需要有个顺序，就有了大端和小端。所以大端和小端指的是寄存器的排列顺序。所以只是在跨平台或者网络编程程序中会经常用到，一般情况不会用到。\n\n在c语言中，指针大小在32位机器上为4字节*8bit，64位机器上为8字节*8bit\n\n----------------------- 最高内存地址 0xffffffff\n栈底\n栈\n栈顶\n-----------------------\n\nNULL (空洞)\n-----------------------\n堆\n-----------------------\n未初始 化的数据\n----------------------- 统称数据段\n初始化的数据\n-----------------------\n正 文段(代码段)\n----------------------- 最低内存地址 0x00000000\n\n\n内存低地址存数据的高位，内存的高地址存数据的低位。\n内存是由低到高增长，按照单个进程内的存储器地址由低到高分别为 代码段 数据段（全局变量+静态变量） 堆（动态分配内存） 栈（局部变量）\n\n如何验证本机是低位还是高位？不同的处理器有不同的大小端模式\n\n\n本地a字节序转成网络字节序-发送给b  b接收网络字节序 -b转成本地字节序 ，网络字节序为大端模式\n\n\n比如内存地址由低到高：0x01 0x02\n数据为12345678，数据的1234为高位，5678为低位。\n\n0x01存的是1234，内存低地址存数据高位，为大端。\n\n{% codeblock lang:c %}\n#include <stdio.h>\n\nint main(){\n\n\n  int num=0x12345678;\n\n  char *pnum = (char *)&num;\n\n  printf(\" sizeof pnum is %i\\n\",sizeof(pnum));\n\n  printf(\"first %p,value is %x\\n\",pnum,pnum[0]);\n\n  printf(\"second %p,value is %x\\n\",pnum+1,pnum[1]);\n  printf(\"third %p,value is %x\\n\",pnum+2,pnum[2]);\n  printf(\"fourth %p,value is %x\\n\",pnum+3,pnum[3]);\n\n\n}\n{% endcodeblock %}\n\n\n执行结果，可以看出，78存在了低地址位，所以是小端序。\n\n·\n```\nsizeof pnum is 4\nfirst 1703740,value is 78\nsecond 1703741,value is 56\nthird 1703742,value is 34\nfourth 1703743,value is 12\nPress any key to continue\n```\n\n结合php的PACK/unpack，可以得出一致结果:小端序\n\n\n```\n<?php\n\n\ndefine('BIG_ENDIAN', pack('L', 1) === pack('N', 1));\n\nif (BIG_ENDIAN)\n{\n  echo \"大端序\";\n}\nelse\n{\n  echo \"小端序\";\n}\n```\n","slug":"big_small_binary","published":1,"updated":"2019-06-24T13:56:13.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mb0002nsgvgyv82eag","content":"<p>大端字节序：数据的低位字节保存在内存的高地址端，等于内存的低位保存的是数据的高位地址<br>小端字节序：数据的高位字节保存在内存的高地址端，<br>网络字节序：tcpip是基于大端字节序<br> <a id=\"more\"></a></p>\n<p>缘由：内存每个地址单元对应一个字节，就是8bit。现在为32或者64位cpu，寄存器的宽度在大于了一个字节之后，字节排放就需要有个顺序，就有了大端和小端。所以大端和小端指的是寄存器的排列顺序。所以只是在跨平台或者网络编程程序中会经常用到，一般情况不会用到。</p>\n<p>在c语言中，指针大小在32位机器上为4字节<em>8bit，64位机器上为8字节</em>8bit</p>\n<p>———————– 最高内存地址 0xffffffff<br>栈底<br>栈</p>\n<h2 id=\"栈顶\"><a href=\"#栈顶\" class=\"headerlink\" title=\"栈顶\"></a>栈顶</h2><h2 id=\"NULL-空洞\"><a href=\"#NULL-空洞\" class=\"headerlink\" title=\"NULL (空洞)\"></a>NULL (空洞)</h2><h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>未初始 化的数据<br>———————– 统称数据段</p>\n<h2 id=\"初始化的数据\"><a href=\"#初始化的数据\" class=\"headerlink\" title=\"初始化的数据\"></a>初始化的数据</h2><p>正 文段(代码段)<br>———————– 最低内存地址 0x00000000</p>\n<p>内存低地址存数据的高位，内存的高地址存数据的低位。<br>内存是由低到高增长，按照单个进程内的存储器地址由低到高分别为 代码段 数据段（全局变量+静态变量） 堆（动态分配内存） 栈（局部变量）</p>\n<p>如何验证本机是低位还是高位？不同的处理器有不同的大小端模式</p>\n<p>本地a字节序转成网络字节序-发送给b  b接收网络字节序 -b转成本地字节序 ，网络字节序为大端模式</p>\n<p>比如内存地址由低到高：0x01 0x02<br>数据为12345678，数据的1234为高位，5678为低位。</p>\n<p>0x01存的是1234，内存低地址存数据高位，为大端。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> num=<span class=\"number\">0x12345678</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> *pnum = (<span class=\"keyword\">char</span> *)&amp;num;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\" sizeof pnum is %i\\n\"</span>,<span class=\"keyword\">sizeof</span>(pnum));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"first %p,value is %x\\n\"</span>,pnum,pnum[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"second %p,value is %x\\n\"</span>,pnum+<span class=\"number\">1</span>,pnum[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"third %p,value is %x\\n\"</span>,pnum+<span class=\"number\">2</span>,pnum[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"fourth %p,value is %x\\n\"</span>,pnum+<span class=\"number\">3</span>,pnum[<span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果，可以看出，78存在了低地址位，所以是小端序。</p>\n<p>·<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sizeof pnum is 4</div><div class=\"line\">first 1703740,value is 78</div><div class=\"line\">second 1703741,value is 56</div><div class=\"line\">third 1703742,value is 34</div><div class=\"line\">fourth 1703743,value is 12</div><div class=\"line\">Press any key to continue</div></pre></td></tr></table></figure></p>\n<p>结合php的PACK/unpack，可以得出一致结果:小端序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">define(&apos;BIG_ENDIAN&apos;, pack(&apos;L&apos;, 1) === pack(&apos;N&apos;, 1));</div><div class=\"line\"></div><div class=\"line\">if (BIG_ENDIAN)</div><div class=\"line\">&#123;</div><div class=\"line\">  echo &quot;大端序&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">  echo &quot;小端序&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>大端字节序：数据的低位字节保存在内存的高地址端，等于内存的低位保存的是数据的高位地址<br>小端字节序：数据的高位字节保存在内存的高地址端，<br>网络字节序：tcpip是基于大端字节序<br>","more":"</p>\n<p>缘由：内存每个地址单元对应一个字节，就是8bit。现在为32或者64位cpu，寄存器的宽度在大于了一个字节之后，字节排放就需要有个顺序，就有了大端和小端。所以大端和小端指的是寄存器的排列顺序。所以只是在跨平台或者网络编程程序中会经常用到，一般情况不会用到。</p>\n<p>在c语言中，指针大小在32位机器上为4字节<em>8bit，64位机器上为8字节</em>8bit</p>\n<p>———————– 最高内存地址 0xffffffff<br>栈底<br>栈</p>\n<h2 id=\"栈顶\"><a href=\"#栈顶\" class=\"headerlink\" title=\"栈顶\"></a>栈顶</h2><h2 id=\"NULL-空洞\"><a href=\"#NULL-空洞\" class=\"headerlink\" title=\"NULL (空洞)\"></a>NULL (空洞)</h2><h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>未初始 化的数据<br>———————– 统称数据段</p>\n<h2 id=\"初始化的数据\"><a href=\"#初始化的数据\" class=\"headerlink\" title=\"初始化的数据\"></a>初始化的数据</h2><p>正 文段(代码段)<br>———————– 最低内存地址 0x00000000</p>\n<p>内存低地址存数据的高位，内存的高地址存数据的低位。<br>内存是由低到高增长，按照单个进程内的存储器地址由低到高分别为 代码段 数据段（全局变量+静态变量） 堆（动态分配内存） 栈（局部变量）</p>\n<p>如何验证本机是低位还是高位？不同的处理器有不同的大小端模式</p>\n<p>本地a字节序转成网络字节序-发送给b  b接收网络字节序 -b转成本地字节序 ，网络字节序为大端模式</p>\n<p>比如内存地址由低到高：0x01 0x02<br>数据为12345678，数据的1234为高位，5678为低位。</p>\n<p>0x01存的是1234，内存低地址存数据高位，为大端。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> num=<span class=\"number\">0x12345678</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> *pnum = (<span class=\"keyword\">char</span> *)&amp;num;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\" sizeof pnum is %i\\n\"</span>,<span class=\"keyword\">sizeof</span>(pnum));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"first %p,value is %x\\n\"</span>,pnum,pnum[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"second %p,value is %x\\n\"</span>,pnum+<span class=\"number\">1</span>,pnum[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"third %p,value is %x\\n\"</span>,pnum+<span class=\"number\">2</span>,pnum[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"fourth %p,value is %x\\n\"</span>,pnum+<span class=\"number\">3</span>,pnum[<span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果，可以看出，78存在了低地址位，所以是小端序。</p>\n<p>·<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sizeof pnum is 4</div><div class=\"line\">first 1703740,value is 78</div><div class=\"line\">second 1703741,value is 56</div><div class=\"line\">third 1703742,value is 34</div><div class=\"line\">fourth 1703743,value is 12</div><div class=\"line\">Press any key to continue</div></pre></td></tr></table></figure></p>\n<p>结合php的PACK/unpack，可以得出一致结果:小端序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">define(&apos;BIG_ENDIAN&apos;, pack(&apos;L&apos;, 1) === pack(&apos;N&apos;, 1));</div><div class=\"line\"></div><div class=\"line\">if (BIG_ENDIAN)</div><div class=\"line\">&#123;</div><div class=\"line\">  echo &quot;大端序&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">  echo &quot;小端序&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"在CI框架中加入生成api文档","date":"2017-01-20T06:18:59.000Z","_content":"\n先上图\n---\n**文档列表页面-1**\n\n![图片描述][1]\n\n**文档列表页面-2**\n\n<!-- more -->\n\n![图片描述][2]\n\n**文档详情页面**\n\n![图片描述][3]\n\n\n主要是抽取自[phalapi][4]\n------------------\n\n使用方法\n----\n1. 如果使用默认ci框架及结构目录，只需将`Controller/doc.php`,`views/doc/*`的两个模版文件放入项目即可。\n2. 如果其他项目引入，只需在`Controller/doc.php`中指定项目Controller目录，以及对应的文件夹名对应的类名方法即可。\n3. 文档注释方法可以参考代码中`doc.php`中的注释\n\n\n[GITHUB下载地址][5]\n\n\n  [1]: /img/php/api-doc-1.jpg\n  [2]: /img/php/api-doc-2.jpg\n  [3]: /img/php/api-doc-3.jpg\n  [4]: http://www.phalapi.net/\n  [5]: https://github.com/tuber/apidoc\n","source":"_posts/code-igniter-apidoc.md","raw":"---\ntitle: 在CI框架中加入生成api文档\ndate: 2017-01-20 14:18:59\ncategories: PHP\ntags:\n - PHP框架\n - CI框架\n - 接口文档\n---\n\n先上图\n---\n**文档列表页面-1**\n\n![图片描述][1]\n\n**文档列表页面-2**\n\n<!-- more -->\n\n![图片描述][2]\n\n**文档详情页面**\n\n![图片描述][3]\n\n\n主要是抽取自[phalapi][4]\n------------------\n\n使用方法\n----\n1. 如果使用默认ci框架及结构目录，只需将`Controller/doc.php`,`views/doc/*`的两个模版文件放入项目即可。\n2. 如果其他项目引入，只需在`Controller/doc.php`中指定项目Controller目录，以及对应的文件夹名对应的类名方法即可。\n3. 文档注释方法可以参考代码中`doc.php`中的注释\n\n\n[GITHUB下载地址][5]\n\n\n  [1]: /img/php/api-doc-1.jpg\n  [2]: /img/php/api-doc-2.jpg\n  [3]: /img/php/api-doc-3.jpg\n  [4]: http://www.phalapi.net/\n  [5]: https://github.com/tuber/apidoc\n","slug":"code-igniter-apidoc","published":1,"updated":"2019-06-24T13:56:13.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mi0006nsgvya0sx6o8","content":"<h2 id=\"先上图\"><a href=\"#先上图\" class=\"headerlink\" title=\"先上图\"></a>先上图</h2><p><strong>文档列表页面-1</strong></p>\n<p><img src=\"/img/php/api-doc-1.jpg\" alt=\"图片描述\"></p>\n<p><strong>文档列表页面-2</strong></p>\n<a id=\"more\"></a>\n<p><img src=\"/img/php/api-doc-2.jpg\" alt=\"图片描述\"></p>\n<p><strong>文档详情页面</strong></p>\n<p><img src=\"/img/php/api-doc-3.jpg\" alt=\"图片描述\"></p>\n<h2 id=\"主要是抽取自phalapi\"><a href=\"#主要是抽取自phalapi\" class=\"headerlink\" title=\"主要是抽取自phalapi\"></a>主要是抽取自<a href=\"http://www.phalapi.net/\" target=\"_blank\" rel=\"external\">phalapi</a></h2><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>如果使用默认ci框架及结构目录，只需将<code>Controller/doc.php</code>,<code>views/doc/*</code>的两个模版文件放入项目即可。</li>\n<li>如果其他项目引入，只需在<code>Controller/doc.php</code>中指定项目Controller目录，以及对应的文件夹名对应的类名方法即可。</li>\n<li>文档注释方法可以参考代码中<code>doc.php</code>中的注释</li>\n</ol>\n<p><a href=\"https://github.com/tuber/apidoc\" target=\"_blank\" rel=\"external\">GITHUB下载地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"先上图\"><a href=\"#先上图\" class=\"headerlink\" title=\"先上图\"></a>先上图</h2><p><strong>文档列表页面-1</strong></p>\n<p><img src=\"/img/php/api-doc-1.jpg\" alt=\"图片描述\"></p>\n<p><strong>文档列表页面-2</strong></p>","more":"<p><img src=\"/img/php/api-doc-2.jpg\" alt=\"图片描述\"></p>\n<p><strong>文档详情页面</strong></p>\n<p><img src=\"/img/php/api-doc-3.jpg\" alt=\"图片描述\"></p>\n<h2 id=\"主要是抽取自phalapi\"><a href=\"#主要是抽取自phalapi\" class=\"headerlink\" title=\"主要是抽取自phalapi\"></a>主要是抽取自<a href=\"http://www.phalapi.net/\">phalapi</a></h2><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>如果使用默认ci框架及结构目录，只需将<code>Controller/doc.php</code>,<code>views/doc/*</code>的两个模版文件放入项目即可。</li>\n<li>如果其他项目引入，只需在<code>Controller/doc.php</code>中指定项目Controller目录，以及对应的文件夹名对应的类名方法即可。</li>\n<li>文档注释方法可以参考代码中<code>doc.php</code>中的注释</li>\n</ol>\n<p><a href=\"https://github.com/tuber/apidoc\">GITHUB下载地址</a></p>"},{"title":"计算机科学CS分类","date":"2017-11-04T13:12:03.000Z","_content":"\n经常看到CS这个词，今天偶然下载了知乎刘洋的电子书。再此也敲一下。\n\n### 理论计算机科学\n#### 数据结构和算法\n#### 计算理论\n#### 信息论与编码理论\n#### 编程语言与编译器\n#### 形式化方法\n\n<!-- more -->\n\n### 计算机系统\n#### 计算机体系结构与计算机工程\n#### 操作系统\n#### 并发、并行与分布式系统\n#### 计算机网络\n#### 计算机安全密码学\n#### 数据库\n\n\n### 计算机应用技术\n#### 计算机图形学\n#### 科学计算\n#### 多媒体技术\n#### 数据挖掘\n#### 软件工程\n#### 人工智能\n##### 自助推理\n##### 机器学习\n##### 计算机视觉\n##### 自然语言处理\n\n\n\n\n","source":"_posts/computer-science-summary.md","raw":"######\ntitle: 计算机科学CS分类\ndate: 2017##11##04 21:12:03\ncategories: computer\ntags:\n- 计算机科学\n\n---\n\n经常看到CS这个词，今天偶然下载了知乎刘洋的电子书。再此也敲一下。\n\n### 理论计算机科学\n#### 数据结构和算法\n#### 计算理论\n#### 信息论与编码理论\n#### 编程语言与编译器\n#### 形式化方法\n\n<!-- more -->\n\n### 计算机系统\n#### 计算机体系结构与计算机工程\n#### 操作系统\n#### 并发、并行与分布式系统\n#### 计算机网络\n#### 计算机安全密码学\n#### 数据库\n\n\n### 计算机应用技术\n#### 计算机图形学\n#### 科学计算\n#### 多媒体技术\n#### 数据挖掘\n#### 软件工程\n#### 人工智能\n##### 自助推理\n##### 机器学习\n##### 计算机视觉\n##### 自然语言处理\n\n\n\n\n","slug":"computer-science-summary","published":1,"updated":"2019-06-24T13:56:13.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mj0007nsgvf2n8w626","content":"<p>经常看到CS这个词，今天偶然下载了知乎刘洋的电子书。再此也敲一下。</p>\n<h3 id=\"理论计算机科学\"><a href=\"#理论计算机科学\" class=\"headerlink\" title=\"理论计算机科学\"></a>理论计算机科学</h3><h4 id=\"数据结构和算法\"><a href=\"#数据结构和算法\" class=\"headerlink\" title=\"数据结构和算法\"></a>数据结构和算法</h4><h4 id=\"计算理论\"><a href=\"#计算理论\" class=\"headerlink\" title=\"计算理论\"></a>计算理论</h4><h4 id=\"信息论与编码理论\"><a href=\"#信息论与编码理论\" class=\"headerlink\" title=\"信息论与编码理论\"></a>信息论与编码理论</h4><h4 id=\"编程语言与编译器\"><a href=\"#编程语言与编译器\" class=\"headerlink\" title=\"编程语言与编译器\"></a>编程语言与编译器</h4><h4 id=\"形式化方法\"><a href=\"#形式化方法\" class=\"headerlink\" title=\"形式化方法\"></a>形式化方法</h4><a id=\"more\"></a>\n<h3 id=\"计算机系统\"><a href=\"#计算机系统\" class=\"headerlink\" title=\"计算机系统\"></a>计算机系统</h3><h4 id=\"计算机体系结构与计算机工程\"><a href=\"#计算机体系结构与计算机工程\" class=\"headerlink\" title=\"计算机体系结构与计算机工程\"></a>计算机体系结构与计算机工程</h4><h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><h4 id=\"并发、并行与分布式系统\"><a href=\"#并发、并行与分布式系统\" class=\"headerlink\" title=\"并发、并行与分布式系统\"></a>并发、并行与分布式系统</h4><h4 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h4><h4 id=\"计算机安全密码学\"><a href=\"#计算机安全密码学\" class=\"headerlink\" title=\"计算机安全密码学\"></a>计算机安全密码学</h4><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h3 id=\"计算机应用技术\"><a href=\"#计算机应用技术\" class=\"headerlink\" title=\"计算机应用技术\"></a>计算机应用技术</h3><h4 id=\"计算机图形学\"><a href=\"#计算机图形学\" class=\"headerlink\" title=\"计算机图形学\"></a>计算机图形学</h4><h4 id=\"科学计算\"><a href=\"#科学计算\" class=\"headerlink\" title=\"科学计算\"></a>科学计算</h4><h4 id=\"多媒体技术\"><a href=\"#多媒体技术\" class=\"headerlink\" title=\"多媒体技术\"></a>多媒体技术</h4><h4 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h4><h4 id=\"软件工程\"><a href=\"#软件工程\" class=\"headerlink\" title=\"软件工程\"></a>软件工程</h4><h4 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h4><h5 id=\"自助推理\"><a href=\"#自助推理\" class=\"headerlink\" title=\"自助推理\"></a>自助推理</h5><h5 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h5><h5 id=\"计算机视觉\"><a href=\"#计算机视觉\" class=\"headerlink\" title=\"计算机视觉\"></a>计算机视觉</h5><h5 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h5>","site":{"data":{}},"excerpt":"<p>经常看到CS这个词，今天偶然下载了知乎刘洋的电子书。再此也敲一下。</p>\n<h3 id=\"理论计算机科学\"><a href=\"#理论计算机科学\" class=\"headerlink\" title=\"理论计算机科学\"></a>理论计算机科学</h3><h4 id=\"数据结构和算法\"><a href=\"#数据结构和算法\" class=\"headerlink\" title=\"数据结构和算法\"></a>数据结构和算法</h4><h4 id=\"计算理论\"><a href=\"#计算理论\" class=\"headerlink\" title=\"计算理论\"></a>计算理论</h4><h4 id=\"信息论与编码理论\"><a href=\"#信息论与编码理论\" class=\"headerlink\" title=\"信息论与编码理论\"></a>信息论与编码理论</h4><h4 id=\"编程语言与编译器\"><a href=\"#编程语言与编译器\" class=\"headerlink\" title=\"编程语言与编译器\"></a>编程语言与编译器</h4><h4 id=\"形式化方法\"><a href=\"#形式化方法\" class=\"headerlink\" title=\"形式化方法\"></a>形式化方法</h4>","more":"<h3 id=\"计算机系统\"><a href=\"#计算机系统\" class=\"headerlink\" title=\"计算机系统\"></a>计算机系统</h3><h4 id=\"计算机体系结构与计算机工程\"><a href=\"#计算机体系结构与计算机工程\" class=\"headerlink\" title=\"计算机体系结构与计算机工程\"></a>计算机体系结构与计算机工程</h4><h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><h4 id=\"并发、并行与分布式系统\"><a href=\"#并发、并行与分布式系统\" class=\"headerlink\" title=\"并发、并行与分布式系统\"></a>并发、并行与分布式系统</h4><h4 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h4><h4 id=\"计算机安全密码学\"><a href=\"#计算机安全密码学\" class=\"headerlink\" title=\"计算机安全密码学\"></a>计算机安全密码学</h4><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h3 id=\"计算机应用技术\"><a href=\"#计算机应用技术\" class=\"headerlink\" title=\"计算机应用技术\"></a>计算机应用技术</h3><h4 id=\"计算机图形学\"><a href=\"#计算机图形学\" class=\"headerlink\" title=\"计算机图形学\"></a>计算机图形学</h4><h4 id=\"科学计算\"><a href=\"#科学计算\" class=\"headerlink\" title=\"科学计算\"></a>科学计算</h4><h4 id=\"多媒体技术\"><a href=\"#多媒体技术\" class=\"headerlink\" title=\"多媒体技术\"></a>多媒体技术</h4><h4 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h4><h4 id=\"软件工程\"><a href=\"#软件工程\" class=\"headerlink\" title=\"软件工程\"></a>软件工程</h4><h4 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h4><h5 id=\"自助推理\"><a href=\"#自助推理\" class=\"headerlink\" title=\"自助推理\"></a>自助推理</h5><h5 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h5><h5 id=\"计算机视觉\"><a href=\"#计算机视觉\" class=\"headerlink\" title=\"计算机视觉\"></a>计算机视觉</h5><h5 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h5>"},{"title":"字符数组+1与指针+1","date":"2017-11-04T13:12:03.000Z","_content":"\n\n\n## 字符数组+1代码\n\n{% codeblock lang:c %}\n#include <stdio.h>\n\nint main(){\n\n  char mystr[]=\"Abcef\";\n  printf(\"size of mystr=%i\\n\",sizeof(mystr));\n\n  printf(\"mystr[0]，他的值为%c:\\n\",mystr[0]);\n  printf(\"&mystr[0]，他的内存地址值为%i:\\n\",&mystr);\n\n  printf(\"mystr[1]，他的值为%c:\\n\",mystr[1]);\n  printf(\"&mystr[1]，他的内存地址值为%i:\\n\",&mystr+1);\n\n  printf(\"mystr[2]，他的值为%c:\\n\",mystr[2]);\n  printf(\"&mystr[2]，他的内存地址值为%i:\\n\",&mystr+2);\n\n  printf(\"mystr[3]，他的值为%c:\\n\",mystr[3]);\n  printf(\"&mystr[3]，他的内存地址值为%i:\\n\",&mystr+3);\n\n  return 0;\n}\n{% endcodeblock %}\n <!-- more -->\n\n## 字符数组+1代码 结果\n\n```\nsize of mystr=6\nmystr[0]，他的值为A:\n&mystr[0]，他的内存地址值为1703736:\nmystr[1]，他的值为b:\n&mystr[1]，他的内存地址值为1703742:\nmystr[2]，他的值为c:\n&mystr[2]，他的内存地址值为1703748:\nmystr[3]，他的值为e:\n&mystr[3]，他的内存地址值为1703754:\nPress any key to continue\n```\n\n## 指针+1代码\n\n{% codeblock lang:c %}\n\n#include <stdio.h>\n\nint main(){\n  char *mystr=\"ABC\";\n  printf(\"size of mystr=%i\\n\",sizeof(mystr));\n  printf(\"mystr[0]，他的值为%c:\\n\",mystr[0]);\n  printf(\"&mystr[0]，他的内存地址值为%i:\\n\",&mystr);\n  printf(\"mystr[1]，他的值为%c:\\n\",mystr[1]);\n  printf(\"&mystr[1]，他的内存地址值为%i:\\n\",&mystr+1);\n  printf(\"mystr[2]，他的值为%c:\\n\",mystr[2]);\n  printf(\"&mystr[2]，他的内存地址值为%i:\\n\",&mystr+2);\n  printf(\"mystr[3]，他的值为%c:\\n\",mystr[3]);\n  printf(\"&mystr[3]，他的内存地址值为%i:\\n\",&mystr+3);\n  return 0;\n}\n{% endcodeblock %}\n## 指针+1代码 结果\n```\nsize of mystr=4\nmystr[0]，他的值为A:\n&mystr[0]，他的内存地址值为1703740:\nmystr[1]，他的值为B:\n&mystr[1]，他的内存地址值为1703744:\nmystr[2]，他的值为C:\n&mystr[2]，他的内存地址值为1703748:\nmystr[3]，他的值为\n```\n## 结论：\n指针的+1，只对当前指针所占字节数的+1\n字符数组的+1，是对当前数组指针的sizeof+1\n","source":"_posts/head_first_c_.md","raw":"---\ntitle: 字符数组+1与指针+1\ndate: 2017-11-04 21:12:03\ncategories: C\ntags:\n- 数组与指针\n---\n\n\n\n## 字符数组+1代码\n\n{% codeblock lang:c %}\n#include <stdio.h>\n\nint main(){\n\n  char mystr[]=\"Abcef\";\n  printf(\"size of mystr=%i\\n\",sizeof(mystr));\n\n  printf(\"mystr[0]，他的值为%c:\\n\",mystr[0]);\n  printf(\"&mystr[0]，他的内存地址值为%i:\\n\",&mystr);\n\n  printf(\"mystr[1]，他的值为%c:\\n\",mystr[1]);\n  printf(\"&mystr[1]，他的内存地址值为%i:\\n\",&mystr+1);\n\n  printf(\"mystr[2]，他的值为%c:\\n\",mystr[2]);\n  printf(\"&mystr[2]，他的内存地址值为%i:\\n\",&mystr+2);\n\n  printf(\"mystr[3]，他的值为%c:\\n\",mystr[3]);\n  printf(\"&mystr[3]，他的内存地址值为%i:\\n\",&mystr+3);\n\n  return 0;\n}\n{% endcodeblock %}\n <!-- more -->\n\n## 字符数组+1代码 结果\n\n```\nsize of mystr=6\nmystr[0]，他的值为A:\n&mystr[0]，他的内存地址值为1703736:\nmystr[1]，他的值为b:\n&mystr[1]，他的内存地址值为1703742:\nmystr[2]，他的值为c:\n&mystr[2]，他的内存地址值为1703748:\nmystr[3]，他的值为e:\n&mystr[3]，他的内存地址值为1703754:\nPress any key to continue\n```\n\n## 指针+1代码\n\n{% codeblock lang:c %}\n\n#include <stdio.h>\n\nint main(){\n  char *mystr=\"ABC\";\n  printf(\"size of mystr=%i\\n\",sizeof(mystr));\n  printf(\"mystr[0]，他的值为%c:\\n\",mystr[0]);\n  printf(\"&mystr[0]，他的内存地址值为%i:\\n\",&mystr);\n  printf(\"mystr[1]，他的值为%c:\\n\",mystr[1]);\n  printf(\"&mystr[1]，他的内存地址值为%i:\\n\",&mystr+1);\n  printf(\"mystr[2]，他的值为%c:\\n\",mystr[2]);\n  printf(\"&mystr[2]，他的内存地址值为%i:\\n\",&mystr+2);\n  printf(\"mystr[3]，他的值为%c:\\n\",mystr[3]);\n  printf(\"&mystr[3]，他的内存地址值为%i:\\n\",&mystr+3);\n  return 0;\n}\n{% endcodeblock %}\n## 指针+1代码 结果\n```\nsize of mystr=4\nmystr[0]，他的值为A:\n&mystr[0]，他的内存地址值为1703740:\nmystr[1]，他的值为B:\n&mystr[1]，他的内存地址值为1703744:\nmystr[2]，他的值为C:\n&mystr[2]，他的内存地址值为1703748:\nmystr[3]，他的值为\n```\n## 结论：\n指针的+1，只对当前指针所占字节数的+1\n字符数组的+1，是对当前数组指针的sizeof+1\n","slug":"head_first_c_","published":1,"updated":"2019-06-24T13:56:13.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35ml0008nsgvymye6xvs","content":"<h2 id=\"字符数组-1代码\"><a href=\"#字符数组-1代码\" class=\"headerlink\" title=\"字符数组+1代码\"></a>字符数组+1代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> mystr[]=<span class=\"string\">\"Abcef\"</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"size of mystr=%i\\n\"</span>,<span class=\"keyword\">sizeof</span>(mystr));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[0]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">0</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[0]，他的内存地址值为%i:\\n\"</span>,&amp;mystr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[1]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[1]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[2]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[2]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[3]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">3</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[3]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n <a id=\"more\"></a>\n<h2 id=\"字符数组-1代码-结果\"><a href=\"#字符数组-1代码-结果\" class=\"headerlink\" title=\"字符数组+1代码 结果\"></a>字符数组+1代码 结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">size of mystr=6</div><div class=\"line\">mystr[0]，他的值为A:</div><div class=\"line\">&amp;mystr[0]，他的内存地址值为1703736:</div><div class=\"line\">mystr[1]，他的值为b:</div><div class=\"line\">&amp;mystr[1]，他的内存地址值为1703742:</div><div class=\"line\">mystr[2]，他的值为c:</div><div class=\"line\">&amp;mystr[2]，他的内存地址值为1703748:</div><div class=\"line\">mystr[3]，他的值为e:</div><div class=\"line\">&amp;mystr[3]，他的内存地址值为1703754:</div><div class=\"line\">Press any key to continue</div></pre></td></tr></table></figure>\n<h2 id=\"指针-1代码\"><a href=\"#指针-1代码\" class=\"headerlink\" title=\"指针+1代码\"></a>指针+1代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> *mystr=<span class=\"string\">\"ABC\"</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"size of mystr=%i\\n\"</span>,<span class=\"keyword\">sizeof</span>(mystr));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[0]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">0</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[0]，他的内存地址值为%i:\\n\"</span>,&amp;mystr);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[1]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[1]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[2]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[2]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[3]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">3</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[3]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">3</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"指针-1代码-结果\"><a href=\"#指针-1代码-结果\" class=\"headerlink\" title=\"指针+1代码 结果\"></a>指针+1代码 结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">size of mystr=4</div><div class=\"line\">mystr[0]，他的值为A:</div><div class=\"line\">&amp;mystr[0]，他的内存地址值为1703740:</div><div class=\"line\">mystr[1]，他的值为B:</div><div class=\"line\">&amp;mystr[1]，他的内存地址值为1703744:</div><div class=\"line\">mystr[2]，他的值为C:</div><div class=\"line\">&amp;mystr[2]，他的内存地址值为1703748:</div><div class=\"line\">mystr[3]，他的值为</div></pre></td></tr></table></figure>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>指针的+1，只对当前指针所占字节数的+1<br>字符数组的+1，是对当前数组指针的sizeof+1</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"字符数组-1代码\"><a href=\"#字符数组-1代码\" class=\"headerlink\" title=\"字符数组+1代码\"></a>字符数组+1代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> mystr[]=<span class=\"string\">\"Abcef\"</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"size of mystr=%i\\n\"</span>,<span class=\"keyword\">sizeof</span>(mystr));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[0]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">0</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[0]，他的内存地址值为%i:\\n\"</span>,&amp;mystr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[1]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[1]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[2]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[2]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[3]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">3</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[3]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"字符数组-1代码-结果\"><a href=\"#字符数组-1代码-结果\" class=\"headerlink\" title=\"字符数组+1代码 结果\"></a>字符数组+1代码 结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">size of mystr=6</div><div class=\"line\">mystr[0]，他的值为A:</div><div class=\"line\">&amp;mystr[0]，他的内存地址值为1703736:</div><div class=\"line\">mystr[1]，他的值为b:</div><div class=\"line\">&amp;mystr[1]，他的内存地址值为1703742:</div><div class=\"line\">mystr[2]，他的值为c:</div><div class=\"line\">&amp;mystr[2]，他的内存地址值为1703748:</div><div class=\"line\">mystr[3]，他的值为e:</div><div class=\"line\">&amp;mystr[3]，他的内存地址值为1703754:</div><div class=\"line\">Press any key to continue</div></pre></td></tr></table></figure>\n<h2 id=\"指针-1代码\"><a href=\"#指针-1代码\" class=\"headerlink\" title=\"指针+1代码\"></a>指针+1代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> *mystr=<span class=\"string\">\"ABC\"</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"size of mystr=%i\\n\"</span>,<span class=\"keyword\">sizeof</span>(mystr));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[0]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">0</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[0]，他的内存地址值为%i:\\n\"</span>,&amp;mystr);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[1]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[1]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[2]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[2]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"mystr[3]，他的值为%c:\\n\"</span>,mystr[<span class=\"number\">3</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;mystr[3]，他的内存地址值为%i:\\n\"</span>,&amp;mystr+<span class=\"number\">3</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"指针-1代码-结果\"><a href=\"#指针-1代码-结果\" class=\"headerlink\" title=\"指针+1代码 结果\"></a>指针+1代码 结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">size of mystr=4</div><div class=\"line\">mystr[0]，他的值为A:</div><div class=\"line\">&amp;mystr[0]，他的内存地址值为1703740:</div><div class=\"line\">mystr[1]，他的值为B:</div><div class=\"line\">&amp;mystr[1]，他的内存地址值为1703744:</div><div class=\"line\">mystr[2]，他的值为C:</div><div class=\"line\">&amp;mystr[2]，他的内存地址值为1703748:</div><div class=\"line\">mystr[3]，他的值为</div></pre></td></tr></table></figure>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>指针的+1，只对当前指针所占字节数的+1<br>字符数组的+1，是对当前数组指针的sizeof+1</p>"},{"title":"硬盘中磁道、扇区基本概念","date":"2016-11-05T10:02:33.000Z","_content":"\n\n\n\n\n用`AIDA64 Extreme`工具看下我的low硬盘\n--------------------------\n\n![图片描述][1]\n\n柱面磁头扇区磁道？\n---------\n\n *WTF*?\n\n <!-- more -->\n\n\n一图胜千言\n-----\n![磁盘2][2]\n\n\n![磁盘3][3]\n\n 在看个二合一版的图\n\n![磁盘4][4]\n\n温习下英语\n-----\n\n  -  磁头（head）\n  -  磁道就是一个圈（track）\n  -  柱面就是多个磁道号相同的圈组成的（cylinder）\n  -  扇区（sector）\n  -  圆盘（platter）\n\n\n再回到我的low硬盘\n----------\n\n 存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数\n\n `248085*63*16*512/1000/1000 = 128 035.67616M`\n\n 注意512是Byte\n\n简单说一下\n-----\n\n 磁盘由N个盘片构成，每个盘片一般有两面，一面一个磁头，两面都可以存储数据\n\n 磁道号相同的组成一个柱面，柱面是我们硬盘分区时候最小单位。\n\n sector 扇区 磁道按512Byte分成若干扇区，计算机对硬盘读写，是按扇区为最小单位。\n 而一般文件系统中的BLOCK为KB，通常为4KB.（现在有的硬盘每个扇区有4K了）\n\n 可以这么说：即使读一个字节，也必须把这512字节全部读入内存\n\n在linux上看一把硬盘\n------------\n\n     root@lyh:~# fdisk -l\n     Disk /dev/xvda: 42.9 GB, 42949672960 bytes\n     255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors\n\n  硬盘容量就是\n\n`heads*sectors*cylinders*512=255*63*5221*512/1000/1000/1000 = 42.94418688G`\n\n  [1]: /img/computer/cipan1.png\n  [2]: /img/computer/cipan2.gif\n  [3]: /img/computer/cipan3.gif\n  [4]: /img/computer/cipan4.png\n","source":"_posts/disk-basic.md","raw":"---\ntitle: 硬盘中磁道、扇区基本概念\ndate: 2016-11-05 18:02:33\ncategories: computer\ntags:\n- 硬盘\n- 扇区\n- 磁道\n\n---\n\n\n\n\n\n用`AIDA64 Extreme`工具看下我的low硬盘\n--------------------------\n\n![图片描述][1]\n\n柱面磁头扇区磁道？\n---------\n\n *WTF*?\n\n <!-- more -->\n\n\n一图胜千言\n-----\n![磁盘2][2]\n\n\n![磁盘3][3]\n\n 在看个二合一版的图\n\n![磁盘4][4]\n\n温习下英语\n-----\n\n  -  磁头（head）\n  -  磁道就是一个圈（track）\n  -  柱面就是多个磁道号相同的圈组成的（cylinder）\n  -  扇区（sector）\n  -  圆盘（platter）\n\n\n再回到我的low硬盘\n----------\n\n 存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数\n\n `248085*63*16*512/1000/1000 = 128 035.67616M`\n\n 注意512是Byte\n\n简单说一下\n-----\n\n 磁盘由N个盘片构成，每个盘片一般有两面，一面一个磁头，两面都可以存储数据\n\n 磁道号相同的组成一个柱面，柱面是我们硬盘分区时候最小单位。\n\n sector 扇区 磁道按512Byte分成若干扇区，计算机对硬盘读写，是按扇区为最小单位。\n 而一般文件系统中的BLOCK为KB，通常为4KB.（现在有的硬盘每个扇区有4K了）\n\n 可以这么说：即使读一个字节，也必须把这512字节全部读入内存\n\n在linux上看一把硬盘\n------------\n\n     root@lyh:~# fdisk -l\n     Disk /dev/xvda: 42.9 GB, 42949672960 bytes\n     255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors\n\n  硬盘容量就是\n\n`heads*sectors*cylinders*512=255*63*5221*512/1000/1000/1000 = 42.94418688G`\n\n  [1]: /img/computer/cipan1.png\n  [2]: /img/computer/cipan2.gif\n  [3]: /img/computer/cipan3.gif\n  [4]: /img/computer/cipan4.png\n","slug":"disk-basic","published":1,"updated":"2019-06-24T13:56:13.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mo000bnsgvcgsqzruj","content":"<h2 id=\"用AIDA64-Extreme工具看下我的low硬盘\"><a href=\"#用AIDA64-Extreme工具看下我的low硬盘\" class=\"headerlink\" title=\"用AIDA64 Extreme工具看下我的low硬盘\"></a>用<code>AIDA64 Extreme</code>工具看下我的low硬盘</h2><p><img src=\"/img/computer/cipan1.png\" alt=\"图片描述\"></p>\n<h2 id=\"柱面磁头扇区磁道？\"><a href=\"#柱面磁头扇区磁道？\" class=\"headerlink\" title=\"柱面磁头扇区磁道？\"></a>柱面磁头扇区磁道？</h2><p> <em>WTF</em>?</p>\n <a id=\"more\"></a>\n<h2 id=\"一图胜千言\"><a href=\"#一图胜千言\" class=\"headerlink\" title=\"一图胜千言\"></a>一图胜千言</h2><p><img src=\"/img/computer/cipan2.gif\" alt=\"磁盘2\"></p>\n<p><img src=\"/img/computer/cipan3.gif\" alt=\"磁盘3\"></p>\n<p> 在看个二合一版的图</p>\n<p><img src=\"/img/computer/cipan4.png\" alt=\"磁盘4\"></p>\n<h2 id=\"温习下英语\"><a href=\"#温习下英语\" class=\"headerlink\" title=\"温习下英语\"></a>温习下英语</h2><ul>\n<li>磁头（head）</li>\n<li>磁道就是一个圈（track）</li>\n<li>柱面就是多个磁道号相同的圈组成的（cylinder）</li>\n<li>扇区（sector）</li>\n<li>圆盘（platter）</li>\n</ul>\n<h2 id=\"再回到我的low硬盘\"><a href=\"#再回到我的low硬盘\" class=\"headerlink\" title=\"再回到我的low硬盘\"></a>再回到我的low硬盘</h2><p> 存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数</p>\n<p> <code>248085*63*16*512/1000/1000 = 128 035.67616M</code></p>\n<p> 注意512是Byte</p>\n<h2 id=\"简单说一下\"><a href=\"#简单说一下\" class=\"headerlink\" title=\"简单说一下\"></a>简单说一下</h2><p> 磁盘由N个盘片构成，每个盘片一般有两面，一面一个磁头，两面都可以存储数据</p>\n<p> 磁道号相同的组成一个柱面，柱面是我们硬盘分区时候最小单位。</p>\n<p> sector 扇区 磁道按512Byte分成若干扇区，计算机对硬盘读写，是按扇区为最小单位。<br> 而一般文件系统中的BLOCK为KB，通常为4KB.（现在有的硬盘每个扇区有4K了）</p>\n<p> 可以这么说：即使读一个字节，也必须把这512字节全部读入内存</p>\n<h2 id=\"在linux上看一把硬盘\"><a href=\"#在linux上看一把硬盘\" class=\"headerlink\" title=\"在linux上看一把硬盘\"></a>在linux上看一把硬盘</h2><pre><code>root@lyh:~# fdisk -l\nDisk /dev/xvda: 42.9 GB, 42949672960 bytes\n255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors\n</code></pre><p>  硬盘容量就是</p>\n<p><code>heads*sectors*cylinders*512=255*63*5221*512/1000/1000/1000 = 42.94418688G</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"用AIDA64-Extreme工具看下我的low硬盘\"><a href=\"#用AIDA64-Extreme工具看下我的low硬盘\" class=\"headerlink\" title=\"用AIDA64 Extreme工具看下我的low硬盘\"></a>用<code>AIDA64 Extreme</code>工具看下我的low硬盘</h2><p><img src=\"/img/computer/cipan1.png\" alt=\"图片描述\"></p>\n<h2 id=\"柱面磁头扇区磁道？\"><a href=\"#柱面磁头扇区磁道？\" class=\"headerlink\" title=\"柱面磁头扇区磁道？\"></a>柱面磁头扇区磁道？</h2><p> <em>WTF</em>?</p>","more":"<h2 id=\"一图胜千言\"><a href=\"#一图胜千言\" class=\"headerlink\" title=\"一图胜千言\"></a>一图胜千言</h2><p><img src=\"/img/computer/cipan2.gif\" alt=\"磁盘2\"></p>\n<p><img src=\"/img/computer/cipan3.gif\" alt=\"磁盘3\"></p>\n<p> 在看个二合一版的图</p>\n<p><img src=\"/img/computer/cipan4.png\" alt=\"磁盘4\"></p>\n<h2 id=\"温习下英语\"><a href=\"#温习下英语\" class=\"headerlink\" title=\"温习下英语\"></a>温习下英语</h2><ul>\n<li>磁头（head）</li>\n<li>磁道就是一个圈（track）</li>\n<li>柱面就是多个磁道号相同的圈组成的（cylinder）</li>\n<li>扇区（sector）</li>\n<li>圆盘（platter）</li>\n</ul>\n<h2 id=\"再回到我的low硬盘\"><a href=\"#再回到我的low硬盘\" class=\"headerlink\" title=\"再回到我的low硬盘\"></a>再回到我的low硬盘</h2><p> 存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数</p>\n<p> <code>248085*63*16*512/1000/1000 = 128 035.67616M</code></p>\n<p> 注意512是Byte</p>\n<h2 id=\"简单说一下\"><a href=\"#简单说一下\" class=\"headerlink\" title=\"简单说一下\"></a>简单说一下</h2><p> 磁盘由N个盘片构成，每个盘片一般有两面，一面一个磁头，两面都可以存储数据</p>\n<p> 磁道号相同的组成一个柱面，柱面是我们硬盘分区时候最小单位。</p>\n<p> sector 扇区 磁道按512Byte分成若干扇区，计算机对硬盘读写，是按扇区为最小单位。<br> 而一般文件系统中的BLOCK为KB，通常为4KB.（现在有的硬盘每个扇区有4K了）</p>\n<p> 可以这么说：即使读一个字节，也必须把这512字节全部读入内存</p>\n<h2 id=\"在linux上看一把硬盘\"><a href=\"#在linux上看一把硬盘\" class=\"headerlink\" title=\"在linux上看一把硬盘\"></a>在linux上看一把硬盘</h2><pre><code>root@lyh:~# fdisk -l\nDisk /dev/xvda: 42.9 GB, 42949672960 bytes\n255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors\n</code></pre><p>  硬盘容量就是</p>\n<p><code>heads*sectors*cylinders*512=255*63*5221*512/1000/1000/1000 = 42.94418688G</code></p>"},{"title":"C根据标准输入解析为json","date":"2017-11-26T07:25:03.000Z","_content":"\n\n## 知识点：\n标准输入读入以及`scanf`返回值及其参数的使用\n<!-- more -->\n\n\n## 原书版本\n{% codeblock lang:c %}\n// volvo1.cpp: 定义控制台应用程序的入口点。\n#include \"stdafx.h\"\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n//head frist c page 106\nint main() {\n\tfloat latitude;\n\tfloat longitude;\n\tchar info[80];\n\tint started = 0;\n\n\tputs(\"data=[\");\n\twhile (scanf(\"%f,%f,%79[^\\n]\", &latitude, &longitude, info) == 3) {\n\t\tif (started) {\n\t\t\tprintf(\",\\n\");\n\t\t}\n\t\t\t\n\t\telse {\n\t\t\tstarted = 1;\n\t\t}\n\t\t\t\n\t\tprintf(\"{latitude: %f, longitude: %f, info: '%s'}\", latitude, longitude, info);\n\t}\n\tputs(\"\\n]\");\n\treturn 0;\n}\n{% endcodeblock %}\n\n## 结果：\n\n```\ndata=[\n12321.123,21321.123,asdffd\n{latitude: 12321.123047, longitude: 21321.123047, info: 'asdffd'}12312.12,213123.213,sdafsdf\n,\n{latitude: 12312.120117, longitude: 213123.218750, info: 'sdafsdf'}^D\n\n]\n请按任意键继续. . .\n\n```\n\n## 我的版本：\n{% codeblock lang:c %}\n// volvo1.cpp: 定义控制台应用程序的入口点。\n\n\n#include \"stdafx.h\"\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n//head frist c page 106\nint main() {\n\n\tchar name[40];\n\tchar album[40];\n\tint year;\n\tchar comments[90];\n\tint startd = 0;\n\tputs(\"data=[\");\n\twhile (scanf(\"%[^,], %[^,], %i, %89[^\\n]\", name, album, &year, comments) == 4) {\n\t\tif (startd) {\n\t\t\tprintf(\"，\\n\");\n\t\t}\n\t\telse {\n\t\t\tstartd = 1;\n\t\t}\n\t   printf(\"{歌曲名称:'%s', 所属专辑：'%s',出品日期:%i，歌词: '%s'}\", name, album, year, comments);\n\t}\n\tputs(\"\\n]\");\n\treturn 0;\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\ndata=[\n简单爱,范特西,2012,我想就这样...\n{歌曲名称:'简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'}简单爱,范特西,2012,我想就这样...\n，\n{歌曲名称:'\n简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'}简单爱,范特西,2012,我想就这样...\n，\n{歌曲名称:'\n\n简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'},,\n\n]\n请按任意键继续. . .\n\n```\n\n## 结论：\n\nscanf参数真多。。先体会体会~\n\n\n{% codeblock lang:c %}\n#include <stdio.h>  \nbool skip(){  \n    scanf(\"%*[^0-9]\");  \n    return true;  \n}  \n  \nint main()  \n{  \n    int n;  \n    while(skip() && scanf(\"%d\", &n)!=EOF)  \n        printf(\"%d\\n\", n);  \n    return 0;  \n}  \n{% endcodeblock %}\n\n\n\n\n\n\n","source":"_posts/head_first_c_106.md","raw":"---\ntitle: C根据标准输入解析为json\ndate: 2017-11-26 15:25:03\ncategories: C\ntags:\n- HEAD_FIRST_C\n---\n\n\n## 知识点：\n标准输入读入以及`scanf`返回值及其参数的使用\n<!-- more -->\n\n\n## 原书版本\n{% codeblock lang:c %}\n// volvo1.cpp: 定义控制台应用程序的入口点。\n#include \"stdafx.h\"\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n//head frist c page 106\nint main() {\n\tfloat latitude;\n\tfloat longitude;\n\tchar info[80];\n\tint started = 0;\n\n\tputs(\"data=[\");\n\twhile (scanf(\"%f,%f,%79[^\\n]\", &latitude, &longitude, info) == 3) {\n\t\tif (started) {\n\t\t\tprintf(\",\\n\");\n\t\t}\n\t\t\t\n\t\telse {\n\t\t\tstarted = 1;\n\t\t}\n\t\t\t\n\t\tprintf(\"{latitude: %f, longitude: %f, info: '%s'}\", latitude, longitude, info);\n\t}\n\tputs(\"\\n]\");\n\treturn 0;\n}\n{% endcodeblock %}\n\n## 结果：\n\n```\ndata=[\n12321.123,21321.123,asdffd\n{latitude: 12321.123047, longitude: 21321.123047, info: 'asdffd'}12312.12,213123.213,sdafsdf\n,\n{latitude: 12312.120117, longitude: 213123.218750, info: 'sdafsdf'}^D\n\n]\n请按任意键继续. . .\n\n```\n\n## 我的版本：\n{% codeblock lang:c %}\n// volvo1.cpp: 定义控制台应用程序的入口点。\n\n\n#include \"stdafx.h\"\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n//head frist c page 106\nint main() {\n\n\tchar name[40];\n\tchar album[40];\n\tint year;\n\tchar comments[90];\n\tint startd = 0;\n\tputs(\"data=[\");\n\twhile (scanf(\"%[^,], %[^,], %i, %89[^\\n]\", name, album, &year, comments) == 4) {\n\t\tif (startd) {\n\t\t\tprintf(\"，\\n\");\n\t\t}\n\t\telse {\n\t\t\tstartd = 1;\n\t\t}\n\t   printf(\"{歌曲名称:'%s', 所属专辑：'%s',出品日期:%i，歌词: '%s'}\", name, album, year, comments);\n\t}\n\tputs(\"\\n]\");\n\treturn 0;\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\ndata=[\n简单爱,范特西,2012,我想就这样...\n{歌曲名称:'简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'}简单爱,范特西,2012,我想就这样...\n，\n{歌曲名称:'\n简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'}简单爱,范特西,2012,我想就这样...\n，\n{歌曲名称:'\n\n简单爱', 所属专辑：'范特西',出品日期:2012，歌词: '我想就这样...'},,\n\n]\n请按任意键继续. . .\n\n```\n\n## 结论：\n\nscanf参数真多。。先体会体会~\n\n\n{% codeblock lang:c %}\n#include <stdio.h>  \nbool skip(){  \n    scanf(\"%*[^0-9]\");  \n    return true;  \n}  \n  \nint main()  \n{  \n    int n;  \n    while(skip() && scanf(\"%d\", &n)!=EOF)  \n        printf(\"%d\\n\", n);  \n    return 0;  \n}  \n{% endcodeblock %}\n\n\n\n\n\n\n","slug":"head_first_c_106","published":1,"updated":"2019-06-24T13:56:13.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mq000dnsgvq9obzu5j","content":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>标准输入读入以及<code>scanf</code>返回值及其参数的使用<br><a id=\"more\"></a></p>\n<h2 id=\"原书版本\"><a href=\"#原书版本\" class=\"headerlink\" title=\"原书版本\"></a>原书版本</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// volvo1.cpp: 定义控制台应用程序的入口点。</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//head frist c page 106</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> latitude;</div><div class=\"line\">\t<span class=\"keyword\">float</span> longitude;</div><div class=\"line\">\t<span class=\"keyword\">char</span> info[<span class=\"number\">80</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> started = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"data=[\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f,%f,%79[^\\n]\"</span>, &amp;latitude, &amp;longitude, info) == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (started) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\",\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstarted = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;latitude: %f, longitude: %f, info: '%s'&#125;\"</span>, latitude, longitude, info);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\\n]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">data=[</div><div class=\"line\">12321.123,21321.123,asdffd</div><div class=\"line\">&#123;latitude: 12321.123047, longitude: 21321.123047, info: &apos;asdffd&apos;&#125;12312.12,213123.213,sdafsdf</div><div class=\"line\">,</div><div class=\"line\">&#123;latitude: 12312.120117, longitude: 213123.218750, info: &apos;sdafsdf&apos;&#125;^D</div><div class=\"line\"></div><div class=\"line\">]</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n<h2 id=\"我的版本：\"><a href=\"#我的版本：\" class=\"headerlink\" title=\"我的版本：\"></a>我的版本：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// volvo1.cpp: 定义控制台应用程序的入口点。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//head frist c page 106</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> album[<span class=\"number\">40</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> year;</div><div class=\"line\">\t<span class=\"keyword\">char</span> comments[<span class=\"number\">90</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> startd = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"data=[\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%[^,], %[^,], %i, %89[^\\n]\"</span>, name, album, &amp;year, comments) == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (startd) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"，\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstartd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t   <span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;歌曲名称:'%s', 所属专辑：'%s',出品日期:%i，歌词: '%s'&#125;\"</span>, name, album, year, comments);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\\n]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：-1\"><a href=\"#结果：-1\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">data=[</div><div class=\"line\">简单爱,范特西,2012,我想就这样...</div><div class=\"line\">&#123;歌曲名称:&apos;简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;简单爱,范特西,2012,我想就这样...</div><div class=\"line\">，</div><div class=\"line\">&#123;歌曲名称:&apos;</div><div class=\"line\">简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;简单爱,范特西,2012,我想就这样...</div><div class=\"line\">，</div><div class=\"line\">&#123;歌曲名称:&apos;</div><div class=\"line\"></div><div class=\"line\">简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;,,</div><div class=\"line\"></div><div class=\"line\">]</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>scanf参数真多。。先体会体会~</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">skip</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%*[^0-9]\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> n;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(skip() &amp;&amp; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)!=EOF)  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n);  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>标准输入读入以及<code>scanf</code>返回值及其参数的使用<br>","more":"</p>\n<h2 id=\"原书版本\"><a href=\"#原书版本\" class=\"headerlink\" title=\"原书版本\"></a>原书版本</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// volvo1.cpp: 定义控制台应用程序的入口点。</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//head frist c page 106</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> latitude;</div><div class=\"line\">\t<span class=\"keyword\">float</span> longitude;</div><div class=\"line\">\t<span class=\"keyword\">char</span> info[<span class=\"number\">80</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> started = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"data=[\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f,%f,%79[^\\n]\"</span>, &amp;latitude, &amp;longitude, info) == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (started) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\",\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstarted = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;latitude: %f, longitude: %f, info: '%s'&#125;\"</span>, latitude, longitude, info);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\\n]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">data=[</div><div class=\"line\">12321.123,21321.123,asdffd</div><div class=\"line\">&#123;latitude: 12321.123047, longitude: 21321.123047, info: &apos;asdffd&apos;&#125;12312.12,213123.213,sdafsdf</div><div class=\"line\">,</div><div class=\"line\">&#123;latitude: 12312.120117, longitude: 213123.218750, info: &apos;sdafsdf&apos;&#125;^D</div><div class=\"line\"></div><div class=\"line\">]</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n<h2 id=\"我的版本：\"><a href=\"#我的版本：\" class=\"headerlink\" title=\"我的版本：\"></a>我的版本：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// volvo1.cpp: 定义控制台应用程序的入口点。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//head frist c page 106</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> album[<span class=\"number\">40</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> year;</div><div class=\"line\">\t<span class=\"keyword\">char</span> comments[<span class=\"number\">90</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> startd = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"data=[\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%[^,], %[^,], %i, %89[^\\n]\"</span>, name, album, &amp;year, comments) == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (startd) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"，\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tstartd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t   <span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;歌曲名称:'%s', 所属专辑：'%s',出品日期:%i，歌词: '%s'&#125;\"</span>, name, album, year, comments);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\\n]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：-1\"><a href=\"#结果：-1\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">data=[</div><div class=\"line\">简单爱,范特西,2012,我想就这样...</div><div class=\"line\">&#123;歌曲名称:&apos;简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;简单爱,范特西,2012,我想就这样...</div><div class=\"line\">，</div><div class=\"line\">&#123;歌曲名称:&apos;</div><div class=\"line\">简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;简单爱,范特西,2012,我想就这样...</div><div class=\"line\">，</div><div class=\"line\">&#123;歌曲名称:&apos;</div><div class=\"line\"></div><div class=\"line\">简单爱&apos;, 所属专辑：&apos;范特西&apos;,出品日期:2012，歌词: &apos;我想就这样...&apos;&#125;,,</div><div class=\"line\"></div><div class=\"line\">]</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>scanf参数真多。。先体会体会~</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">skip</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%*[^0-9]\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> n;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(skip() &amp;&amp; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)!=EOF)  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n);  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>"},{"title":"C语言str_reverse实例","date":"2017-11-25T00:25:03.000Z","_content":"## 知识点：\n字符数组的字符串指针反转\n<!-- more -->\n\n{% codeblock lang:c %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n//head frist c page 98\n\nvoid print_reverse(char *s) {\n\n\tsize_t len = strlen(s);\n\t//指针相加，t为s对应指针的最后一个\n\tchar *t = s + len - 1;\n\n\t//最后一个肯定大于第一个s指针指向的位置，\n\twhile (t >= s) {\n\t\tprintf(\"%c\",*t);\n\t\tt = t - 1;\n\t}\n\t//puts(\"\") 类似于printf(\"%s\\n\",s);pust在字符末尾会自动输出一个回车符\n\tputs(\"我隔开了\");\n\tputs (\"\");\n}\nint main()\n{\n\tchar letter[] = \"abcd\";\n\tprint_reverse(letter);\n\treturn 0;\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\ndcba我隔开了\n\n请按任意键继续. . .\n\n```\n","source":"_posts/head_firstc_str_reverse_98.md","raw":"\n---\ntitle: C语言str_reverse实例\ndate: 2017-11-25 08:25:03\ncategories: C\ntags:\n- HEAD_FIRST_C\n---\n## 知识点：\n字符数组的字符串指针反转\n<!-- more -->\n\n{% codeblock lang:c %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n//head frist c page 98\n\nvoid print_reverse(char *s) {\n\n\tsize_t len = strlen(s);\n\t//指针相加，t为s对应指针的最后一个\n\tchar *t = s + len - 1;\n\n\t//最后一个肯定大于第一个s指针指向的位置，\n\twhile (t >= s) {\n\t\tprintf(\"%c\",*t);\n\t\tt = t - 1;\n\t}\n\t//puts(\"\") 类似于printf(\"%s\\n\",s);pust在字符末尾会自动输出一个回车符\n\tputs(\"我隔开了\");\n\tputs (\"\");\n}\nint main()\n{\n\tchar letter[] = \"abcd\";\n\tprint_reverse(letter);\n\treturn 0;\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\ndcba我隔开了\n\n请按任意键继续. . .\n\n```\n","slug":"head_firstc_str_reverse_98","published":1,"updated":"2019-06-24T13:56:13.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mu000gnsgv8enlolr9","content":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>字符数组的字符串指针反转<br><a id=\"more\"></a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//head frist c page 98</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_reverse</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">size_t</span> len = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">\t<span class=\"comment\">//指针相加，t为s对应指针的最后一个</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> *t = s + len - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//最后一个肯定大于第一个s指针指向的位置，</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (t &gt;= s) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,*t);</div><div class=\"line\">\t\tt = t - <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//puts(\"\") 类似于printf(\"%s\\n\",s);pust在字符末尾会自动输出一个回车符</span></div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"我隔开了\"</span>);</div><div class=\"line\">\t<span class=\"built_in\">puts</span> (<span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> letter[] = <span class=\"string\">\"abcd\"</span>;</div><div class=\"line\">\tprint_reverse(letter);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dcba我隔开了</div><div class=\"line\"></div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>字符数组的字符串指针反转<br>","more":"</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//head frist c page 98</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_reverse</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">size_t</span> len = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">\t<span class=\"comment\">//指针相加，t为s对应指针的最后一个</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> *t = s + len - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//最后一个肯定大于第一个s指针指向的位置，</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (t &gt;= s) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,*t);</div><div class=\"line\">\t\tt = t - <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//puts(\"\") 类似于printf(\"%s\\n\",s);pust在字符末尾会自动输出一个回车符</span></div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"我隔开了\"</span>);</div><div class=\"line\">\t<span class=\"built_in\">puts</span> (<span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> letter[] = <span class=\"string\">\"abcd\"</span>;</div><div class=\"line\">\tprint_reverse(letter);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dcba我隔开了</div><div class=\"line\"></div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>"},{"title":"C语言STRSTR实例","date":"2017-11-25T00:12:03.000Z","_content":"## 知识点：\n`strstr()`函数会在第一个字符串中查找第二个字符串，如果找到，他会返回第二个字符串在存储器中的位置。\n\n<!-- more -->\n\n{% codeblock lang:c %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n//head frist c page 94\n\nchar tracks [][80] = {\n\t\t\"给我一首歌的时间\",\n\t\t\"七里香\",\n\t\t\"威廉古堡\",\n\t\t\"简单爱\",\n\t\t\"东风破\",\n\t\t\"叶惠美\",\n};\n\nvoid find_track(char search_for[]) {\n\tint i;\n\tfor (i = 0; i < 6; i++) {\n\t\tif (strstr(tracks[i], search_for)) {\n\t\t\tprintf(\"find track %i:%s\\n\", i,tracks[i]);\n\t\t}else{\n\t\t\t// printf(\"your search is %s,not in %s\\n\",search_for,tracks[i]);\n\t\t}\t\n\t}\n}\n\nint main()\n{\n\tchar search_for[80];\n\tprintf(\"search for :\");\n\tfgets(search_for, 80, stdin);\n\n\t//由于fgets接收有换行符号+\\0，所以把换行符换成结束符\n\tsearch_for[strlen(search_for)-1]='\\0';\n\tfind_track(search_for);\n\treturn 0;\t\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\nsearch for :爱\nfind track 3:简单爱\n请按任意键继续. . .\n\n```\n","source":"_posts/head_firstc_strstr_94.md","raw":"\n---\ntitle: C语言STRSTR实例\ndate: 2017-11-25 08:12:03\ncategories: C\ntags:\n- HEAD_FIRST_C\n---\n## 知识点：\n`strstr()`函数会在第一个字符串中查找第二个字符串，如果找到，他会返回第二个字符串在存储器中的位置。\n\n<!-- more -->\n\n{% codeblock lang:c %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n//head frist c page 94\n\nchar tracks [][80] = {\n\t\t\"给我一首歌的时间\",\n\t\t\"七里香\",\n\t\t\"威廉古堡\",\n\t\t\"简单爱\",\n\t\t\"东风破\",\n\t\t\"叶惠美\",\n};\n\nvoid find_track(char search_for[]) {\n\tint i;\n\tfor (i = 0; i < 6; i++) {\n\t\tif (strstr(tracks[i], search_for)) {\n\t\t\tprintf(\"find track %i:%s\\n\", i,tracks[i]);\n\t\t}else{\n\t\t\t// printf(\"your search is %s,not in %s\\n\",search_for,tracks[i]);\n\t\t}\t\n\t}\n}\n\nint main()\n{\n\tchar search_for[80];\n\tprintf(\"search for :\");\n\tfgets(search_for, 80, stdin);\n\n\t//由于fgets接收有换行符号+\\0，所以把换行符换成结束符\n\tsearch_for[strlen(search_for)-1]='\\0';\n\tfind_track(search_for);\n\treturn 0;\t\n}\n\n{% endcodeblock %}\n\n## 结果：\n\n```\nsearch for :爱\nfind track 3:简单爱\n请按任意键继续. . .\n\n```\n","slug":"head_firstc_strstr_94","published":1,"updated":"2019-06-24T13:56:13.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mv000hnsgvjlnbmwja","content":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p><code>strstr()</code>函数会在第一个字符串中查找第二个字符串，如果找到，他会返回第二个字符串在存储器中的位置。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//head frist c page 94</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> tracks [][<span class=\"number\">80</span>] = &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"给我一首歌的时间\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"七里香\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"威廉古堡\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"简单爱\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"东风破\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"叶惠美\"</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find_track</span><span class=\"params\">(<span class=\"keyword\">char</span> search_for[])</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(tracks[i], search_for)) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"find track %i:%s\\n\"</span>, i,tracks[i]);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// printf(\"your search is %s,not in %s\\n\",search_for,tracks[i]);</span></div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> search_for[<span class=\"number\">80</span>];</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"search for :\"</span>);</div><div class=\"line\">\tfgets(search_for, <span class=\"number\">80</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//由于fgets接收有换行符号+\\0，所以把换行符换成结束符</span></div><div class=\"line\">\tsearch_for[<span class=\"built_in\">strlen</span>(search_for)<span class=\"number\">-1</span>]=<span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tfind_track(search_for);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search for :爱</div><div class=\"line\">find track 3:简单爱</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p><code>strstr()</code>函数会在第一个字符串中查找第二个字符串，如果找到，他会返回第二个字符串在存储器中的位置。</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//head frist c page 94</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> tracks [][<span class=\"number\">80</span>] = &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"给我一首歌的时间\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"七里香\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"威廉古堡\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"简单爱\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"东风破\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"叶惠美\"</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find_track</span><span class=\"params\">(<span class=\"keyword\">char</span> search_for[])</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(tracks[i], search_for)) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"find track %i:%s\\n\"</span>, i,tracks[i]);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// printf(\"your search is %s,not in %s\\n\",search_for,tracks[i]);</span></div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> search_for[<span class=\"number\">80</span>];</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"search for :\"</span>);</div><div class=\"line\">\tfgets(search_for, <span class=\"number\">80</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//由于fgets接收有换行符号+\\0，所以把换行符换成结束符</span></div><div class=\"line\">\tsearch_for[<span class=\"built_in\">strlen</span>(search_for)<span class=\"number\">-1</span>]=<span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tfind_track(search_for);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search for :爱</div><div class=\"line\">find track 3:简单爱</div><div class=\"line\">请按任意键继续. . .</div></pre></td></tr></table></figure>"},{"title":"接口调用安全性","date":"2016-12-05T08:42:23.000Z","_content":"\n一些接口调用中，为了安全原因，会加入一些token或者是签名。\n以下是个简单例子：根据post给被调用方的key和value数组，\n其中先根据数组做ksort，然后对value的值做（递归）拼接得到$string。\n<!-- more -->\n返回后用key.$string，调用方和被调用方按照此规则，对传递过来的额外post字段中的sign做验证，另外也可以结合一些非对称加密和对称加密，交换固定的字段和值来生成token，（此token也是固定的，可以随着时间等变化来变化），这样达到一定的安全性。\n\n```php\nfunction getSign($data, $key = '')\n{\n    if(is_array($data)){\n        ksort($data);//按照键值排序\n    }\n\n    $string = getPostString($data);\n    return $string;\n    // return md5($string.$key);\n}\n/**\n * 数组系列化成字符串\n */\nfunction getPostString(&$post)\n{\n    $string = '';\n    if(is_array($post))\n    {\n        foreach($post as $item)\n        {\n            if(is_array($item))\n                $string .= getPostString($item);\n            else\n                $string .= $item;\n        }\n    }\n    else\n    {\n        $string = $post;\n    }\n\n    return $string;\n}\n$params=[\n'mobile'=>'18618824588',\n'code'=>'114360',\n'hid'=>'2700',\n'name'=>'tb',\n'city_serial_id'=>'bj2700',\n];\n\nvar_dump(ksort($params));\nvar_dump($params);\necho getSign($params);\n```\n","source":"_posts/interface_security.md","raw":"---\ntitle: 接口调用安全性\ndate: 2016-12-05 16:42:23\ncategories: PHP\ntags:\n - 接口调用\n - 安全性\n - sign&token\n---\n\n一些接口调用中，为了安全原因，会加入一些token或者是签名。\n以下是个简单例子：根据post给被调用方的key和value数组，\n其中先根据数组做ksort，然后对value的值做（递归）拼接得到$string。\n<!-- more -->\n返回后用key.$string，调用方和被调用方按照此规则，对传递过来的额外post字段中的sign做验证，另外也可以结合一些非对称加密和对称加密，交换固定的字段和值来生成token，（此token也是固定的，可以随着时间等变化来变化），这样达到一定的安全性。\n\n```php\nfunction getSign($data, $key = '')\n{\n    if(is_array($data)){\n        ksort($data);//按照键值排序\n    }\n\n    $string = getPostString($data);\n    return $string;\n    // return md5($string.$key);\n}\n/**\n * 数组系列化成字符串\n */\nfunction getPostString(&$post)\n{\n    $string = '';\n    if(is_array($post))\n    {\n        foreach($post as $item)\n        {\n            if(is_array($item))\n                $string .= getPostString($item);\n            else\n                $string .= $item;\n        }\n    }\n    else\n    {\n        $string = $post;\n    }\n\n    return $string;\n}\n$params=[\n'mobile'=>'18618824588',\n'code'=>'114360',\n'hid'=>'2700',\n'name'=>'tb',\n'city_serial_id'=>'bj2700',\n];\n\nvar_dump(ksort($params));\nvar_dump($params);\necho getSign($params);\n```\n","slug":"interface_security","published":1,"updated":"2019-06-24T13:56:13.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35my000lnsgvl45cjpvu","content":"<p>一些接口调用中，为了安全原因，会加入一些token或者是签名。<br>以下是个简单例子：根据post给被调用方的key和value数组，<br>其中先根据数组做ksort，然后对value的值做（递归）拼接得到$string。<br><a id=\"more\"></a><br>返回后用key.$string，调用方和被调用方按照此规则，对传递过来的额外post字段中的sign做验证，另外也可以结合一些非对称加密和对称加密，交换固定的字段和值来生成token，（此token也是固定的，可以随着时间等变化来变化），这样达到一定的安全性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span><span class=\"params\">($data, $key = <span class=\"string\">''</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(is_array($data))&#123;</div><div class=\"line\">        ksort($data);<span class=\"comment\">//按照键值排序</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $string = getPostString($data);</div><div class=\"line\">    <span class=\"keyword\">return</span> $string;</div><div class=\"line\">    <span class=\"comment\">// return md5($string.$key);</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 数组系列化成字符串</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPostString</span><span class=\"params\">(&amp;$post)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $string = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(is_array($post))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span>($post <span class=\"keyword\">as</span> $item)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(is_array($item))</div><div class=\"line\">                $string .= getPostString($item);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                $string .= $item;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $string = $post;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> $string;</div><div class=\"line\">&#125;</div><div class=\"line\">$params=[</div><div class=\"line\"><span class=\"string\">'mobile'</span>=&gt;<span class=\"string\">'18618824588'</span>,</div><div class=\"line\"><span class=\"string\">'code'</span>=&gt;<span class=\"string\">'114360'</span>,</div><div class=\"line\"><span class=\"string\">'hid'</span>=&gt;<span class=\"string\">'2700'</span>,</div><div class=\"line\"><span class=\"string\">'name'</span>=&gt;<span class=\"string\">'tb'</span>,</div><div class=\"line\"><span class=\"string\">'city_serial_id'</span>=&gt;<span class=\"string\">'bj2700'</span>,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">var_dump(ksort($params));</div><div class=\"line\">var_dump($params);</div><div class=\"line\"><span class=\"keyword\">echo</span> getSign($params);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一些接口调用中，为了安全原因，会加入一些token或者是签名。<br>以下是个简单例子：根据post给被调用方的key和value数组，<br>其中先根据数组做ksort，然后对value的值做（递归）拼接得到$string。<br>","more":"<br>返回后用key.$string，调用方和被调用方按照此规则，对传递过来的额外post字段中的sign做验证，另外也可以结合一些非对称加密和对称加密，交换固定的字段和值来生成token，（此token也是固定的，可以随着时间等变化来变化），这样达到一定的安全性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span><span class=\"params\">($data, $key = <span class=\"string\">''</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(is_array($data))&#123;</div><div class=\"line\">        ksort($data);<span class=\"comment\">//按照键值排序</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $string = getPostString($data);</div><div class=\"line\">    <span class=\"keyword\">return</span> $string;</div><div class=\"line\">    <span class=\"comment\">// return md5($string.$key);</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 数组系列化成字符串</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPostString</span><span class=\"params\">(&amp;$post)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    $string = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(is_array($post))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span>($post <span class=\"keyword\">as</span> $item)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(is_array($item))</div><div class=\"line\">                $string .= getPostString($item);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                $string .= $item;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $string = $post;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> $string;</div><div class=\"line\">&#125;</div><div class=\"line\">$params=[</div><div class=\"line\"><span class=\"string\">'mobile'</span>=&gt;<span class=\"string\">'18618824588'</span>,</div><div class=\"line\"><span class=\"string\">'code'</span>=&gt;<span class=\"string\">'114360'</span>,</div><div class=\"line\"><span class=\"string\">'hid'</span>=&gt;<span class=\"string\">'2700'</span>,</div><div class=\"line\"><span class=\"string\">'name'</span>=&gt;<span class=\"string\">'tb'</span>,</div><div class=\"line\"><span class=\"string\">'city_serial_id'</span>=&gt;<span class=\"string\">'bj2700'</span>,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">var_dump(ksort($params));</div><div class=\"line\">var_dump($params);</div><div class=\"line\"><span class=\"keyword\">echo</span> getSign($params);</div></pre></td></tr></table></figure>"},{"title":"HTTP-CAHCE中的CACHE-CONTROL、Etag、Modify","date":"2017-03-07T05:41:11.000Z","_content":"\n用世界上最好的语言演示一下etag\n-------------\n\n```\n<?php\n\n// apache 服务器，如果您是nginx请自行配置读取header等信息，同时下面会有nginx测试\n\n$file = 'etag.txt';\n$etag = md5_file($file);\n$headers = apache_request_headers();\n\nif (isset($headers['If-None-Match']) && trim($headers[\"If-None-Match\"]) == $etag) {\n    header(\"HTTP/1.1 304 Not Modified\");\n} else {\n    $content = file_get_contents($file);\n    header(\"Etag: $etag\");\n    echo $content;\n}\n\n```\n第一次请求，服务器返回200.我分别列下请求头【RequsetHeaders】和响应头【ResponseHeaders】\n\n请求头\n```\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8,en;q=0.6\nCache-Control:no-cache\nConnection:keep-alive\nHost:kache.com\nPragma:no-cache\nUpgrade-Insecure-Requests:1\nUser-Agent:Mozilla/5.\n```\n<!-- more -->\n \n响应头\n\n```\nRequest URL:http://kache.com/etag.php\nRequest Method:GET\nStatus Code:200 OK\nRemote Address:127.0.0.1:80\n\nConnection:Keep-Alive\nContent-Type:text/html\nDate:Tue, 07 Mar 2017 13:02:13 GMT\nEtag:966aa4bd5183fd9358fd222647c5c6a3\nKeep-Alive:timeout=5, max=99\nServer:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.4.33\n```\n需要注意第一次请求头没有If-None-Match:，注意第一次响应头有Etag:这个标签,注意第一次是200\n\n\n----------\n\n\n第二次请求\n\n请求头：\n\n```\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8,en;q=0.6\nCache-Control:max-age=0\nConnection:keep-alive\nHost:kache.com\nIf-None-Match:966aa4bd5183fd9358fd222647c5c6a3\nUpgrade-Insecure-Requests:1\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\n```\n\n响应头:\n\n```\nRequest URL:http://kache.com/etag.php\nRequest Method:GET\nStatus Code:304 Not Modified\nRemote Address:127.0.0.1:80\n\nConnection:Keep-Alive\nDate:Tue, 07 Mar 2017 13:02:16 GMT\nKeep-Alive:timeout=5, max=98\nServer:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9\n```\n需要注意第二次请求头有If-None-Match:，注意第二次响应为304\n\n----------\n\n再用php语言演示一下Last-Modified\n------------------------\n\n```\n<?php\n/**\n *If-Modified-Since[request] & Last-Modified [response]\n *减少网络字节传输\n */\n$headers = apache_request_headers();\n$file = 'modified.txt';\n\nif (isset($headers['If-Modified-Since']) && (strtotime($headers['If-Modified-Since']) == filemtime($file))) {\n\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($file)) . ' GMT', true, 304);\n\n} else {\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($file)) . ' GMT', true, 200);\n\n    $content = file_get_contents($file);\n    echo $content;\n}\n\n```\nIf-Modified-Since[请求头的] 和 Last-Modified [响应头的]这一对关系的HADER头我这里就不贴了。稍后的ppt里有比较详细的说明\n\n----------\n\n我们常用的就是Last-Modified和Etag一起来用，上php代码\n------------------------------------\n\n```\n<?php\n\n$file='etag_modify.txt';\n\n$last_modified_time=filemtime($file);\n\n$etag = md5_file($file);\n\n$headers = apache_request_headers();\n\n\nif (@strtotime($headers['If-Modified-Since']) == $last_modified_time ||\n    @trim($headers['If-None-Match']) == $etag) {\n  header('Content-Length: '.filesize($file));\n    header(\"HTTP/1.1 304 Not Modified\");\n\n}else{\n\n  header(\"Etag: $etag\");\n  header('Last-Modified: '.gmdate('D, d M Y H:i:s', $last_modified_time).' GMT', true, 200);\n  header('Content-Length: '.filesize($file));\n  $content=file_get_contents($file);\n  echo $content;\n\n}\n\n```\n这样做的好处是双重验证，同时满足两者条件才会缓存失效，弥补了modify的粒度最多为秒的问题以及modify的打开关闭即更改时间的问题。当然etag也会有坑，不同物理机可能会导致相同文件不同结果（没实验过）\n\n\n----------\n\n直接上NGINX配置示例\n------------\n毕竟php做服务端水平有限，大家可以参考  swoole framework OR workerman中对etag和modify的处理。\n\n不多说，上NGINX配置段，为了演示modify ，可以在/etc/nginx/nginx.conf中把etag关闭\n\n```\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n        etag  off;\n        ...\n```\n\n关于其他静态文件缓存的设置\n\n```\nlocation ~* \\.(?:css)$ {\n  #expires 1y;\n  add_header  Cache-Control max-age=5;\n  add_header Cache-Control \"public\";\n  add_header  Last-Modified \"\";\n}\n\n```\n简单对以上括号内代码说明：\n1. expires 1y; 是http协议1.0写法，1.1对应的是cache-contorl:max-age='';前者为GMT绝对时间，后者为相对时间。\n2. add_header  Cache-Control max-age=5; 缓存5秒，如果没有Last-Modified（即设置了 add_header  Last-Modified \"\";） ，期间会一直直接请求服务器，服务器一直返回200，如果有设置Last-Modified，5秒后会请求一次服务器，5秒前会返回304.\n\n简单归纳Last-Modified和max-age（expires）关系\n\n1. 如果设置了max-age=0，而没有启用modify，那么不会缓存\n\n2. 如果单单启用modify，而没有max-age==0.也会缓存\n\n3. 如果启用了modify，并且 max-age=0，那么不会缓存\n\n4. 如果设置了max-age=1000，但没有启用modify ，不会缓存\n\n再此说明上面配置导致的结果：5秒内如果文件有变化，那么客户端不会有任何感知。5秒后将会重新发起请求，得到200响应。然后再缓存5秒【注意没有开启etag】\n\n----------\n下面这个例子和上面一样，是针对图片等，缓存1一个月，即使服务端删除了，1个月内也会正常显示（除非ctrl+f5，或者服务端重启了）public代表任何代理服务器都可以缓存，对应的为private，只允许客户端浏览器缓存。\n\n```\nlocation ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {\n  expires 1M;\n  add_header Cache-Control \"public\";\n  add_header  Last-Modified \"\";\n}\n\n```\n----------\n\n那需要有更改就更新，怎么办？\n--------------\n\n```\nlocation ~* \\.(?:css)$ {\n  expires 1y;\n # add_header  Cache-Control max-age=5;\n # add_header Cache-Control \"public\";\n # add_header  Last-Modified \"\";\n}\n```\n以上配置虽然过期时间是一年，但是服务端会返回Last-Modified，来确认，意思为你就vim了一下xx.css,即使没有做任何更改，浏览器也会重新发起请求。你要是没改，那八成就一年后见了。\n\n那我就不想缓存怎么办？\n-----------\n用cache-control：控制\n用no-cahce【浏览器端等可以缓存，但是没有什么卵用】\n用no-store【浏览器端等不用缓存，不用费劲。每次都跟我服务端请求】\n用must-revalidate，浏览器端别整没用的，到期了就马上跟我请求。麻溜的必须。防止的就是代理服务器等自作聪明，认为没有过期。\n\n```\nlocation ~* \\.(?:js)$ {\n  add_header  Cache-Control no-cache;\n  add_header  Cache-Control must-revalidate;\n}\n```\n\n[测试代码和PPT在这里][1]\n-----------\n\n\n  [1]: https://github.com/tuber/HTTP_CACHE\n","source":"_posts/http-cache.md","raw":"---\ntitle: HTTP-CAHCE中的CACHE-CONTROL、Etag、Modify\ndate: 2017-03-07 13:41:11\ncategories: PHP\ntags:\n - HTTP\n - CACHE\n - PHP\n - NGINX\n---\n\n用世界上最好的语言演示一下etag\n-------------\n\n```\n<?php\n\n// apache 服务器，如果您是nginx请自行配置读取header等信息，同时下面会有nginx测试\n\n$file = 'etag.txt';\n$etag = md5_file($file);\n$headers = apache_request_headers();\n\nif (isset($headers['If-None-Match']) && trim($headers[\"If-None-Match\"]) == $etag) {\n    header(\"HTTP/1.1 304 Not Modified\");\n} else {\n    $content = file_get_contents($file);\n    header(\"Etag: $etag\");\n    echo $content;\n}\n\n```\n第一次请求，服务器返回200.我分别列下请求头【RequsetHeaders】和响应头【ResponseHeaders】\n\n请求头\n```\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8,en;q=0.6\nCache-Control:no-cache\nConnection:keep-alive\nHost:kache.com\nPragma:no-cache\nUpgrade-Insecure-Requests:1\nUser-Agent:Mozilla/5.\n```\n<!-- more -->\n \n响应头\n\n```\nRequest URL:http://kache.com/etag.php\nRequest Method:GET\nStatus Code:200 OK\nRemote Address:127.0.0.1:80\n\nConnection:Keep-Alive\nContent-Type:text/html\nDate:Tue, 07 Mar 2017 13:02:13 GMT\nEtag:966aa4bd5183fd9358fd222647c5c6a3\nKeep-Alive:timeout=5, max=99\nServer:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.4.33\n```\n需要注意第一次请求头没有If-None-Match:，注意第一次响应头有Etag:这个标签,注意第一次是200\n\n\n----------\n\n\n第二次请求\n\n请求头：\n\n```\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8,en;q=0.6\nCache-Control:max-age=0\nConnection:keep-alive\nHost:kache.com\nIf-None-Match:966aa4bd5183fd9358fd222647c5c6a3\nUpgrade-Insecure-Requests:1\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\n```\n\n响应头:\n\n```\nRequest URL:http://kache.com/etag.php\nRequest Method:GET\nStatus Code:304 Not Modified\nRemote Address:127.0.0.1:80\n\nConnection:Keep-Alive\nDate:Tue, 07 Mar 2017 13:02:16 GMT\nKeep-Alive:timeout=5, max=98\nServer:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9\n```\n需要注意第二次请求头有If-None-Match:，注意第二次响应为304\n\n----------\n\n再用php语言演示一下Last-Modified\n------------------------\n\n```\n<?php\n/**\n *If-Modified-Since[request] & Last-Modified [response]\n *减少网络字节传输\n */\n$headers = apache_request_headers();\n$file = 'modified.txt';\n\nif (isset($headers['If-Modified-Since']) && (strtotime($headers['If-Modified-Since']) == filemtime($file))) {\n\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($file)) . ' GMT', true, 304);\n\n} else {\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($file)) . ' GMT', true, 200);\n\n    $content = file_get_contents($file);\n    echo $content;\n}\n\n```\nIf-Modified-Since[请求头的] 和 Last-Modified [响应头的]这一对关系的HADER头我这里就不贴了。稍后的ppt里有比较详细的说明\n\n----------\n\n我们常用的就是Last-Modified和Etag一起来用，上php代码\n------------------------------------\n\n```\n<?php\n\n$file='etag_modify.txt';\n\n$last_modified_time=filemtime($file);\n\n$etag = md5_file($file);\n\n$headers = apache_request_headers();\n\n\nif (@strtotime($headers['If-Modified-Since']) == $last_modified_time ||\n    @trim($headers['If-None-Match']) == $etag) {\n  header('Content-Length: '.filesize($file));\n    header(\"HTTP/1.1 304 Not Modified\");\n\n}else{\n\n  header(\"Etag: $etag\");\n  header('Last-Modified: '.gmdate('D, d M Y H:i:s', $last_modified_time).' GMT', true, 200);\n  header('Content-Length: '.filesize($file));\n  $content=file_get_contents($file);\n  echo $content;\n\n}\n\n```\n这样做的好处是双重验证，同时满足两者条件才会缓存失效，弥补了modify的粒度最多为秒的问题以及modify的打开关闭即更改时间的问题。当然etag也会有坑，不同物理机可能会导致相同文件不同结果（没实验过）\n\n\n----------\n\n直接上NGINX配置示例\n------------\n毕竟php做服务端水平有限，大家可以参考  swoole framework OR workerman中对etag和modify的处理。\n\n不多说，上NGINX配置段，为了演示modify ，可以在/etc/nginx/nginx.conf中把etag关闭\n\n```\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n        etag  off;\n        ...\n```\n\n关于其他静态文件缓存的设置\n\n```\nlocation ~* \\.(?:css)$ {\n  #expires 1y;\n  add_header  Cache-Control max-age=5;\n  add_header Cache-Control \"public\";\n  add_header  Last-Modified \"\";\n}\n\n```\n简单对以上括号内代码说明：\n1. expires 1y; 是http协议1.0写法，1.1对应的是cache-contorl:max-age='';前者为GMT绝对时间，后者为相对时间。\n2. add_header  Cache-Control max-age=5; 缓存5秒，如果没有Last-Modified（即设置了 add_header  Last-Modified \"\";） ，期间会一直直接请求服务器，服务器一直返回200，如果有设置Last-Modified，5秒后会请求一次服务器，5秒前会返回304.\n\n简单归纳Last-Modified和max-age（expires）关系\n\n1. 如果设置了max-age=0，而没有启用modify，那么不会缓存\n\n2. 如果单单启用modify，而没有max-age==0.也会缓存\n\n3. 如果启用了modify，并且 max-age=0，那么不会缓存\n\n4. 如果设置了max-age=1000，但没有启用modify ，不会缓存\n\n再此说明上面配置导致的结果：5秒内如果文件有变化，那么客户端不会有任何感知。5秒后将会重新发起请求，得到200响应。然后再缓存5秒【注意没有开启etag】\n\n----------\n下面这个例子和上面一样，是针对图片等，缓存1一个月，即使服务端删除了，1个月内也会正常显示（除非ctrl+f5，或者服务端重启了）public代表任何代理服务器都可以缓存，对应的为private，只允许客户端浏览器缓存。\n\n```\nlocation ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {\n  expires 1M;\n  add_header Cache-Control \"public\";\n  add_header  Last-Modified \"\";\n}\n\n```\n----------\n\n那需要有更改就更新，怎么办？\n--------------\n\n```\nlocation ~* \\.(?:css)$ {\n  expires 1y;\n # add_header  Cache-Control max-age=5;\n # add_header Cache-Control \"public\";\n # add_header  Last-Modified \"\";\n}\n```\n以上配置虽然过期时间是一年，但是服务端会返回Last-Modified，来确认，意思为你就vim了一下xx.css,即使没有做任何更改，浏览器也会重新发起请求。你要是没改，那八成就一年后见了。\n\n那我就不想缓存怎么办？\n-----------\n用cache-control：控制\n用no-cahce【浏览器端等可以缓存，但是没有什么卵用】\n用no-store【浏览器端等不用缓存，不用费劲。每次都跟我服务端请求】\n用must-revalidate，浏览器端别整没用的，到期了就马上跟我请求。麻溜的必须。防止的就是代理服务器等自作聪明，认为没有过期。\n\n```\nlocation ~* \\.(?:js)$ {\n  add_header  Cache-Control no-cache;\n  add_header  Cache-Control must-revalidate;\n}\n```\n\n[测试代码和PPT在这里][1]\n-----------\n\n\n  [1]: https://github.com/tuber/HTTP_CACHE\n","slug":"http-cache","published":1,"updated":"2019-06-24T13:56:13.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35mz000onsgvb8ka7ida","content":"<h2 id=\"用世界上最好的语言演示一下etag\"><a href=\"#用世界上最好的语言演示一下etag\" class=\"headerlink\" title=\"用世界上最好的语言演示一下etag\"></a>用世界上最好的语言演示一下etag</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">// apache 服务器，如果您是nginx请自行配置读取header等信息，同时下面会有nginx测试</div><div class=\"line\"></div><div class=\"line\">$file = &apos;etag.txt&apos;;</div><div class=\"line\">$etag = md5_file($file);</div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\"></div><div class=\"line\">if (isset($headers[&apos;If-None-Match&apos;]) &amp;&amp; trim($headers[&quot;If-None-Match&quot;]) == $etag) &#123;</div><div class=\"line\">    header(&quot;HTTP/1.1 304 Not Modified&quot;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    $content = file_get_contents($file);</div><div class=\"line\">    header(&quot;Etag: $etag&quot;);</div><div class=\"line\">    echo $content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一次请求，服务器返回200.我分别列下请求头【RequsetHeaders】和响应头【ResponseHeaders】</p>\n<p>请求头<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">Accept-Encoding:gzip, deflate, sdch</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cache-Control:no-cache</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:kache.com</div><div class=\"line\">Pragma:no-cache</div><div class=\"line\">Upgrade-Insecure-Requests:1</div><div class=\"line\">User-Agent:Mozilla/5.</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>响应头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://kache.com/etag.php</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Status Code:200 OK</div><div class=\"line\">Remote Address:127.0.0.1:80</div><div class=\"line\"></div><div class=\"line\">Connection:Keep-Alive</div><div class=\"line\">Content-Type:text/html</div><div class=\"line\">Date:Tue, 07 Mar 2017 13:02:13 GMT</div><div class=\"line\">Etag:966aa4bd5183fd9358fd222647c5c6a3</div><div class=\"line\">Keep-Alive:timeout=5, max=99</div><div class=\"line\">Server:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9</div><div class=\"line\">Transfer-Encoding:chunked</div><div class=\"line\">X-Powered-By:PHP/5.4.33</div></pre></td></tr></table></figure>\n<p>需要注意第一次请求头没有If-None-Match:，注意第一次响应头有Etag:这个标签,注意第一次是200</p>\n<hr>\n<p>第二次请求</p>\n<p>请求头：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">Accept-Encoding:gzip, deflate, sdch</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cache-Control:max-age=0</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:kache.com</div><div class=\"line\">If-None-Match:966aa4bd5183fd9358fd222647c5c6a3</div><div class=\"line\">Upgrade-Insecure-Requests:1</div><div class=\"line\">User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</div></pre></td></tr></table></figure>\n<p>响应头:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://kache.com/etag.php</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Status Code:304 Not Modified</div><div class=\"line\">Remote Address:127.0.0.1:80</div><div class=\"line\"></div><div class=\"line\">Connection:Keep-Alive</div><div class=\"line\">Date:Tue, 07 Mar 2017 13:02:16 GMT</div><div class=\"line\">Keep-Alive:timeout=5, max=98</div><div class=\"line\">Server:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9</div></pre></td></tr></table></figure>\n<p>需要注意第二次请求头有If-None-Match:，注意第二次响应为304</p>\n<hr>\n<h2 id=\"再用php语言演示一下Last-Modified\"><a href=\"#再用php语言演示一下Last-Modified\" class=\"headerlink\" title=\"再用php语言演示一下Last-Modified\"></a>再用php语言演示一下Last-Modified</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">/**</div><div class=\"line\"> *If-Modified-Since[request] &amp; Last-Modified [response]</div><div class=\"line\"> *减少网络字节传输</div><div class=\"line\"> */</div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\">$file = &apos;modified.txt&apos;;</div><div class=\"line\"></div><div class=\"line\">if (isset($headers[&apos;If-Modified-Since&apos;]) &amp;&amp; (strtotime($headers[&apos;If-Modified-Since&apos;]) == filemtime($file))) &#123;</div><div class=\"line\"></div><div class=\"line\">    header(&apos;Last-Modified: &apos; . gmdate(&apos;D, d M Y H:i:s&apos;, filemtime($file)) . &apos; GMT&apos;, true, 304);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    header(&apos;Last-Modified: &apos; . gmdate(&apos;D, d M Y H:i:s&apos;, filemtime($file)) . &apos; GMT&apos;, true, 200);</div><div class=\"line\"></div><div class=\"line\">    $content = file_get_contents($file);</div><div class=\"line\">    echo $content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If-Modified-Since[请求头的] 和 Last-Modified [响应头的]这一对关系的HADER头我这里就不贴了。稍后的ppt里有比较详细的说明</p>\n<hr>\n<h2 id=\"我们常用的就是Last-Modified和Etag一起来用，上php代码\"><a href=\"#我们常用的就是Last-Modified和Etag一起来用，上php代码\" class=\"headerlink\" title=\"我们常用的就是Last-Modified和Etag一起来用，上php代码\"></a>我们常用的就是Last-Modified和Etag一起来用，上php代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">$file=&apos;etag_modify.txt&apos;;</div><div class=\"line\"></div><div class=\"line\">$last_modified_time=filemtime($file);</div><div class=\"line\"></div><div class=\"line\">$etag = md5_file($file);</div><div class=\"line\"></div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if (@strtotime($headers[&apos;If-Modified-Since&apos;]) == $last_modified_time ||</div><div class=\"line\">    @trim($headers[&apos;If-None-Match&apos;]) == $etag) &#123;</div><div class=\"line\">  header(&apos;Content-Length: &apos;.filesize($file));</div><div class=\"line\">    header(&quot;HTTP/1.1 304 Not Modified&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">  header(&quot;Etag: $etag&quot;);</div><div class=\"line\">  header(&apos;Last-Modified: &apos;.gmdate(&apos;D, d M Y H:i:s&apos;, $last_modified_time).&apos; GMT&apos;, true, 200);</div><div class=\"line\">  header(&apos;Content-Length: &apos;.filesize($file));</div><div class=\"line\">  $content=file_get_contents($file);</div><div class=\"line\">  echo $content;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样做的好处是双重验证，同时满足两者条件才会缓存失效，弥补了modify的粒度最多为秒的问题以及modify的打开关闭即更改时间的问题。当然etag也会有坑，不同物理机可能会导致相同文件不同结果（没实验过）</p>\n<hr>\n<h2 id=\"直接上NGINX配置示例\"><a href=\"#直接上NGINX配置示例\" class=\"headerlink\" title=\"直接上NGINX配置示例\"></a>直接上NGINX配置示例</h2><p>毕竟php做服务端水平有限，大家可以参考  swoole framework OR workerman中对etag和modify的处理。</p>\n<p>不多说，上NGINX配置段，为了演示modify ，可以在/etc/nginx/nginx.conf中把etag关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">http &#123;</div><div class=\"line\"></div><div class=\"line\">        ##</div><div class=\"line\">        # Basic Settings</div><div class=\"line\">        ##</div><div class=\"line\">        etag  off;</div><div class=\"line\">        ...</div></pre></td></tr></table></figure>\n<p>关于其他静态文件缓存的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:css)$ &#123;</div><div class=\"line\">  #expires 1y;</div><div class=\"line\">  add_header  Cache-Control max-age=5;</div><div class=\"line\">  add_header Cache-Control &quot;public&quot;;</div><div class=\"line\">  add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单对以上括号内代码说明：</p>\n<ol>\n<li>expires 1y; 是http协议1.0写法，1.1对应的是cache-contorl:max-age=’’;前者为GMT绝对时间，后者为相对时间。</li>\n<li>add_header  Cache-Control max-age=5; 缓存5秒，如果没有Last-Modified（即设置了 add_header  Last-Modified “”;） ，期间会一直直接请求服务器，服务器一直返回200，如果有设置Last-Modified，5秒后会请求一次服务器，5秒前会返回304.</li>\n</ol>\n<p>简单归纳Last-Modified和max-age（expires）关系</p>\n<ol>\n<li><p>如果设置了max-age=0，而没有启用modify，那么不会缓存</p>\n</li>\n<li><p>如果单单启用modify，而没有max-age==0.也会缓存</p>\n</li>\n<li><p>如果启用了modify，并且 max-age=0，那么不会缓存</p>\n</li>\n<li><p>如果设置了max-age=1000，但没有启用modify ，不会缓存</p>\n</li>\n</ol>\n<p>再此说明上面配置导致的结果：5秒内如果文件有变化，那么客户端不会有任何感知。5秒后将会重新发起请求，得到200响应。然后再缓存5秒【注意没有开启etag】</p>\n<hr>\n<p>下面这个例子和上面一样，是针对图片等，缓存1一个月，即使服务端删除了，1个月内也会正常显示（除非ctrl+f5，或者服务端重启了）public代表任何代理服务器都可以缓存，对应的为private，只允许客户端浏览器缓存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ &#123;</div><div class=\"line\">  expires 1M;</div><div class=\"line\">  add_header Cache-Control &quot;public&quot;;</div><div class=\"line\">  add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"那需要有更改就更新，怎么办？\"><a href=\"#那需要有更改就更新，怎么办？\" class=\"headerlink\" title=\"那需要有更改就更新，怎么办？\"></a>那需要有更改就更新，怎么办？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:css)$ &#123;</div><div class=\"line\">  expires 1y;</div><div class=\"line\"> # add_header  Cache-Control max-age=5;</div><div class=\"line\"> # add_header Cache-Control &quot;public&quot;;</div><div class=\"line\"> # add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上配置虽然过期时间是一年，但是服务端会返回Last-Modified，来确认，意思为你就vim了一下xx.css,即使没有做任何更改，浏览器也会重新发起请求。你要是没改，那八成就一年后见了。</p>\n<h2 id=\"那我就不想缓存怎么办？\"><a href=\"#那我就不想缓存怎么办？\" class=\"headerlink\" title=\"那我就不想缓存怎么办？\"></a>那我就不想缓存怎么办？</h2><p>用cache-control：控制<br>用no-cahce【浏览器端等可以缓存，但是没有什么卵用】<br>用no-store【浏览器端等不用缓存，不用费劲。每次都跟我服务端请求】<br>用must-revalidate，浏览器端别整没用的，到期了就马上跟我请求。麻溜的必须。防止的就是代理服务器等自作聪明，认为没有过期。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:js)$ &#123;</div><div class=\"line\">  add_header  Cache-Control no-cache;</div><div class=\"line\">  add_header  Cache-Control must-revalidate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"测试代码和PPT在这里\"><a href=\"#测试代码和PPT在这里\" class=\"headerlink\" title=\"测试代码和PPT在这里\"></a><a href=\"https://github.com/tuber/HTTP_CACHE\" target=\"_blank\" rel=\"external\">测试代码和PPT在这里</a></h2>","site":{"data":{}},"excerpt":"<h2 id=\"用世界上最好的语言演示一下etag\"><a href=\"#用世界上最好的语言演示一下etag\" class=\"headerlink\" title=\"用世界上最好的语言演示一下etag\"></a>用世界上最好的语言演示一下etag</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">// apache 服务器，如果您是nginx请自行配置读取header等信息，同时下面会有nginx测试</div><div class=\"line\"></div><div class=\"line\">$file = &apos;etag.txt&apos;;</div><div class=\"line\">$etag = md5_file($file);</div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\"></div><div class=\"line\">if (isset($headers[&apos;If-None-Match&apos;]) &amp;&amp; trim($headers[&quot;If-None-Match&quot;]) == $etag) &#123;</div><div class=\"line\">    header(&quot;HTTP/1.1 304 Not Modified&quot;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    $content = file_get_contents($file);</div><div class=\"line\">    header(&quot;Etag: $etag&quot;);</div><div class=\"line\">    echo $content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一次请求，服务器返回200.我分别列下请求头【RequsetHeaders】和响应头【ResponseHeaders】</p>\n<p>请求头<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">Accept-Encoding:gzip, deflate, sdch</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cache-Control:no-cache</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:kache.com</div><div class=\"line\">Pragma:no-cache</div><div class=\"line\">Upgrade-Insecure-Requests:1</div><div class=\"line\">User-Agent:Mozilla/5.</div></pre></td></tr></table></figure></p>","more":"<p>响应头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://kache.com/etag.php</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Status Code:200 OK</div><div class=\"line\">Remote Address:127.0.0.1:80</div><div class=\"line\"></div><div class=\"line\">Connection:Keep-Alive</div><div class=\"line\">Content-Type:text/html</div><div class=\"line\">Date:Tue, 07 Mar 2017 13:02:13 GMT</div><div class=\"line\">Etag:966aa4bd5183fd9358fd222647c5c6a3</div><div class=\"line\">Keep-Alive:timeout=5, max=99</div><div class=\"line\">Server:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9</div><div class=\"line\">Transfer-Encoding:chunked</div><div class=\"line\">X-Powered-By:PHP/5.4.33</div></pre></td></tr></table></figure>\n<p>需要注意第一次请求头没有If-None-Match:，注意第一次响应头有Etag:这个标签,注意第一次是200</p>\n<hr>\n<p>第二次请求</p>\n<p>请求头：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">Accept-Encoding:gzip, deflate, sdch</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cache-Control:max-age=0</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:kache.com</div><div class=\"line\">If-None-Match:966aa4bd5183fd9358fd222647c5c6a3</div><div class=\"line\">Upgrade-Insecure-Requests:1</div><div class=\"line\">User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</div></pre></td></tr></table></figure>\n<p>响应头:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://kache.com/etag.php</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Status Code:304 Not Modified</div><div class=\"line\">Remote Address:127.0.0.1:80</div><div class=\"line\"></div><div class=\"line\">Connection:Keep-Alive</div><div class=\"line\">Date:Tue, 07 Mar 2017 13:02:16 GMT</div><div class=\"line\">Keep-Alive:timeout=5, max=98</div><div class=\"line\">Server:Apache/2.4.10 (Win32) OpenSSL/0.9.8zb mod_fcgid/2.3.9</div></pre></td></tr></table></figure>\n<p>需要注意第二次请求头有If-None-Match:，注意第二次响应为304</p>\n<hr>\n<h2 id=\"再用php语言演示一下Last-Modified\"><a href=\"#再用php语言演示一下Last-Modified\" class=\"headerlink\" title=\"再用php语言演示一下Last-Modified\"></a>再用php语言演示一下Last-Modified</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">/**</div><div class=\"line\"> *If-Modified-Since[request] &amp; Last-Modified [response]</div><div class=\"line\"> *减少网络字节传输</div><div class=\"line\"> */</div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\">$file = &apos;modified.txt&apos;;</div><div class=\"line\"></div><div class=\"line\">if (isset($headers[&apos;If-Modified-Since&apos;]) &amp;&amp; (strtotime($headers[&apos;If-Modified-Since&apos;]) == filemtime($file))) &#123;</div><div class=\"line\"></div><div class=\"line\">    header(&apos;Last-Modified: &apos; . gmdate(&apos;D, d M Y H:i:s&apos;, filemtime($file)) . &apos; GMT&apos;, true, 304);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    header(&apos;Last-Modified: &apos; . gmdate(&apos;D, d M Y H:i:s&apos;, filemtime($file)) . &apos; GMT&apos;, true, 200);</div><div class=\"line\"></div><div class=\"line\">    $content = file_get_contents($file);</div><div class=\"line\">    echo $content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If-Modified-Since[请求头的] 和 Last-Modified [响应头的]这一对关系的HADER头我这里就不贴了。稍后的ppt里有比较详细的说明</p>\n<hr>\n<h2 id=\"我们常用的就是Last-Modified和Etag一起来用，上php代码\"><a href=\"#我们常用的就是Last-Modified和Etag一起来用，上php代码\" class=\"headerlink\" title=\"我们常用的就是Last-Modified和Etag一起来用，上php代码\"></a>我们常用的就是Last-Modified和Etag一起来用，上php代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">$file=&apos;etag_modify.txt&apos;;</div><div class=\"line\"></div><div class=\"line\">$last_modified_time=filemtime($file);</div><div class=\"line\"></div><div class=\"line\">$etag = md5_file($file);</div><div class=\"line\"></div><div class=\"line\">$headers = apache_request_headers();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if (@strtotime($headers[&apos;If-Modified-Since&apos;]) == $last_modified_time ||</div><div class=\"line\">    @trim($headers[&apos;If-None-Match&apos;]) == $etag) &#123;</div><div class=\"line\">  header(&apos;Content-Length: &apos;.filesize($file));</div><div class=\"line\">    header(&quot;HTTP/1.1 304 Not Modified&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">  header(&quot;Etag: $etag&quot;);</div><div class=\"line\">  header(&apos;Last-Modified: &apos;.gmdate(&apos;D, d M Y H:i:s&apos;, $last_modified_time).&apos; GMT&apos;, true, 200);</div><div class=\"line\">  header(&apos;Content-Length: &apos;.filesize($file));</div><div class=\"line\">  $content=file_get_contents($file);</div><div class=\"line\">  echo $content;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样做的好处是双重验证，同时满足两者条件才会缓存失效，弥补了modify的粒度最多为秒的问题以及modify的打开关闭即更改时间的问题。当然etag也会有坑，不同物理机可能会导致相同文件不同结果（没实验过）</p>\n<hr>\n<h2 id=\"直接上NGINX配置示例\"><a href=\"#直接上NGINX配置示例\" class=\"headerlink\" title=\"直接上NGINX配置示例\"></a>直接上NGINX配置示例</h2><p>毕竟php做服务端水平有限，大家可以参考  swoole framework OR workerman中对etag和modify的处理。</p>\n<p>不多说，上NGINX配置段，为了演示modify ，可以在/etc/nginx/nginx.conf中把etag关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">http &#123;</div><div class=\"line\"></div><div class=\"line\">        ##</div><div class=\"line\">        # Basic Settings</div><div class=\"line\">        ##</div><div class=\"line\">        etag  off;</div><div class=\"line\">        ...</div></pre></td></tr></table></figure>\n<p>关于其他静态文件缓存的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:css)$ &#123;</div><div class=\"line\">  #expires 1y;</div><div class=\"line\">  add_header  Cache-Control max-age=5;</div><div class=\"line\">  add_header Cache-Control &quot;public&quot;;</div><div class=\"line\">  add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单对以上括号内代码说明：</p>\n<ol>\n<li>expires 1y; 是http协议1.0写法，1.1对应的是cache-contorl:max-age=’’;前者为GMT绝对时间，后者为相对时间。</li>\n<li>add_header  Cache-Control max-age=5; 缓存5秒，如果没有Last-Modified（即设置了 add_header  Last-Modified “”;） ，期间会一直直接请求服务器，服务器一直返回200，如果有设置Last-Modified，5秒后会请求一次服务器，5秒前会返回304.</li>\n</ol>\n<p>简单归纳Last-Modified和max-age（expires）关系</p>\n<ol>\n<li><p>如果设置了max-age=0，而没有启用modify，那么不会缓存</p>\n</li>\n<li><p>如果单单启用modify，而没有max-age==0.也会缓存</p>\n</li>\n<li><p>如果启用了modify，并且 max-age=0，那么不会缓存</p>\n</li>\n<li><p>如果设置了max-age=1000，但没有启用modify ，不会缓存</p>\n</li>\n</ol>\n<p>再此说明上面配置导致的结果：5秒内如果文件有变化，那么客户端不会有任何感知。5秒后将会重新发起请求，得到200响应。然后再缓存5秒【注意没有开启etag】</p>\n<hr>\n<p>下面这个例子和上面一样，是针对图片等，缓存1一个月，即使服务端删除了，1个月内也会正常显示（除非ctrl+f5，或者服务端重启了）public代表任何代理服务器都可以缓存，对应的为private，只允许客户端浏览器缓存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ &#123;</div><div class=\"line\">  expires 1M;</div><div class=\"line\">  add_header Cache-Control &quot;public&quot;;</div><div class=\"line\">  add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"那需要有更改就更新，怎么办？\"><a href=\"#那需要有更改就更新，怎么办？\" class=\"headerlink\" title=\"那需要有更改就更新，怎么办？\"></a>那需要有更改就更新，怎么办？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:css)$ &#123;</div><div class=\"line\">  expires 1y;</div><div class=\"line\"> # add_header  Cache-Control max-age=5;</div><div class=\"line\"> # add_header Cache-Control &quot;public&quot;;</div><div class=\"line\"> # add_header  Last-Modified &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上配置虽然过期时间是一年，但是服务端会返回Last-Modified，来确认，意思为你就vim了一下xx.css,即使没有做任何更改，浏览器也会重新发起请求。你要是没改，那八成就一年后见了。</p>\n<h2 id=\"那我就不想缓存怎么办？\"><a href=\"#那我就不想缓存怎么办？\" class=\"headerlink\" title=\"那我就不想缓存怎么办？\"></a>那我就不想缓存怎么办？</h2><p>用cache-control：控制<br>用no-cahce【浏览器端等可以缓存，但是没有什么卵用】<br>用no-store【浏览器端等不用缓存，不用费劲。每次都跟我服务端请求】<br>用must-revalidate，浏览器端别整没用的，到期了就马上跟我请求。麻溜的必须。防止的就是代理服务器等自作聪明，认为没有过期。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.(?:js)$ &#123;</div><div class=\"line\">  add_header  Cache-Control no-cache;</div><div class=\"line\">  add_header  Cache-Control must-revalidate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"测试代码和PPT在这里\"><a href=\"#测试代码和PPT在这里\" class=\"headerlink\" title=\"测试代码和PPT在这里\"></a><a href=\"https://github.com/tuber/HTTP_CACHE\">测试代码和PPT在这里</a></h2>"},{"title":"JAVA 装饰模式-2016软件设计师下半年考试真题","date":"2016-11-15T03:18:37.000Z","_content":"\n## 题目要求：打印发票头、内容、底部的要求 ##\n\n#### BTW,八成这次软考又挂了... ####\n\n<!-- more -->\n\n```java\n    class Invoice{\n      public void printInvoice(){\n        System.out.println(\"this is content\");\n      }\n    }\n\n    class Decorator extends Invoice{\n      protected Invoice ticket;\n      public Decorator (Invoice t){\n        ticket=t;\n      }\n      public void printInvoice(){\n        if(ticket!=null){\n          ticket.printInvoice();\n        }\n      }\n    }\n\n    class HeaderDecorator extends Decorator{\n\n      public HeaderDecorator(Invoice t){\n        super(t);\n      }\n      public void printInvoice(){\n        System.out.println(\"this is the header\");\n        super.printInvoice();\n      }\n\n    }\n\n    class FooterDecorator extends Decorator{\n\n      public FooterDecorator(Invoice t){\n        super(t);\n      }\n      public void printInvoice(){\n\n        super.printInvoice();\n        System.out.println(\"this is the footer\");\n      }\n\n    }\n\n\n\n    public class zhuangshi {\n\n      public static void main(String[] args){\n        Invoice t =new Invoice();\n        Invoice ticket;\n        ticket=new FooterDecorator(new HeaderDecorator(t));\n        ticket.printInvoice();\n        System.out.println(\"=====================\");\n        ticket=new FooterDecorator(new HeaderDecorator(new Decorator(null)));\n        ticket.printInvoice();\n      }\n\n    }\n\n```\n## 这么写也行 ，不知道哪个算标准答案##\n```java\n     Invoice t =new Invoice();\n      Invoice ticket;\n      ticket=new HeaderDecorator(new FooterDecorator(t));\n      ticket.printInvoice();\n      System.out.println(\"=====================\");\n      ticket=new HeaderDecorator(new FooterDecorator(null));\n      ticket.printInvoice();\n```\n\n## 结果 ##\n![图片描述][1]\n\n\n  [1]: /img/patterndesign/zhuangshi.png\n","source":"_posts/java-2016-decorator.md","raw":"---\ntitle: JAVA 装饰模式-2016软件设计师下半年考试真题\ndate: 2016-11-15 11:18:37\ntags:\n - 装饰模式\n - 软件设计师\n - JAVA\n---\n\n## 题目要求：打印发票头、内容、底部的要求 ##\n\n#### BTW,八成这次软考又挂了... ####\n\n<!-- more -->\n\n```java\n    class Invoice{\n      public void printInvoice(){\n        System.out.println(\"this is content\");\n      }\n    }\n\n    class Decorator extends Invoice{\n      protected Invoice ticket;\n      public Decorator (Invoice t){\n        ticket=t;\n      }\n      public void printInvoice(){\n        if(ticket!=null){\n          ticket.printInvoice();\n        }\n      }\n    }\n\n    class HeaderDecorator extends Decorator{\n\n      public HeaderDecorator(Invoice t){\n        super(t);\n      }\n      public void printInvoice(){\n        System.out.println(\"this is the header\");\n        super.printInvoice();\n      }\n\n    }\n\n    class FooterDecorator extends Decorator{\n\n      public FooterDecorator(Invoice t){\n        super(t);\n      }\n      public void printInvoice(){\n\n        super.printInvoice();\n        System.out.println(\"this is the footer\");\n      }\n\n    }\n\n\n\n    public class zhuangshi {\n\n      public static void main(String[] args){\n        Invoice t =new Invoice();\n        Invoice ticket;\n        ticket=new FooterDecorator(new HeaderDecorator(t));\n        ticket.printInvoice();\n        System.out.println(\"=====================\");\n        ticket=new FooterDecorator(new HeaderDecorator(new Decorator(null)));\n        ticket.printInvoice();\n      }\n\n    }\n\n```\n## 这么写也行 ，不知道哪个算标准答案##\n```java\n     Invoice t =new Invoice();\n      Invoice ticket;\n      ticket=new HeaderDecorator(new FooterDecorator(t));\n      ticket.printInvoice();\n      System.out.println(\"=====================\");\n      ticket=new HeaderDecorator(new FooterDecorator(null));\n      ticket.printInvoice();\n```\n\n## 结果 ##\n![图片描述][1]\n\n\n  [1]: /img/patterndesign/zhuangshi.png\n","slug":"java-2016-decorator","published":1,"updated":"2019-06-24T13:56:13.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35n2000tnsgvezwqjrx4","content":"<h2 id=\"题目要求：打印发票头、内容、底部的要求\"><a href=\"#题目要求：打印发票头、内容、底部的要求\" class=\"headerlink\" title=\"题目要求：打印发票头、内容、底部的要求\"></a>题目要求：打印发票头、内容、底部的要求</h2><h4 id=\"BTW-八成这次软考又挂了…\"><a href=\"#BTW-八成这次软考又挂了…\" class=\"headerlink\" title=\"BTW,八成这次软考又挂了…\"></a>BTW,八成这次软考又挂了…</h4><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoice</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is content\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Invoice</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> Invoice ticket;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span> <span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    ticket=t;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ticket!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      ticket.printInvoice();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderDecorator</span><span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(t);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is the header\"</span>);</div><div class=\"line\">    <span class=\"keyword\">super</span>.printInvoice();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooterDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FooterDecorator</span><span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(t);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">super</span>.printInvoice();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is the footer\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zhuangshi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    Invoice t =<span class=\"keyword\">new</span> Invoice();</div><div class=\"line\">    Invoice ticket;</div><div class=\"line\">    ticket=<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">new</span> HeaderDecorator(t));</div><div class=\"line\">    ticket.printInvoice();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\">    ticket=<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> Decorator(<span class=\"keyword\">null</span>)));</div><div class=\"line\">    ticket.printInvoice();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"这么写也行-，不知道哪个算标准答案\"><a href=\"#这么写也行-，不知道哪个算标准答案\" class=\"headerlink\" title=\"这么写也行 ，不知道哪个算标准答案\"></a>这么写也行 ，不知道哪个算标准答案</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Invoice t =<span class=\"keyword\">new</span> Invoice();</div><div class=\"line\"> Invoice ticket;</div><div class=\"line\"> ticket=<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> FooterDecorator(t));</div><div class=\"line\"> ticket.printInvoice();</div><div class=\"line\"> System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\"> ticket=<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">null</span>));</div><div class=\"line\"> ticket.printInvoice();</div></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/img/patterndesign/zhuangshi.png\" alt=\"图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目要求：打印发票头、内容、底部的要求\"><a href=\"#题目要求：打印发票头、内容、底部的要求\" class=\"headerlink\" title=\"题目要求：打印发票头、内容、底部的要求\"></a>题目要求：打印发票头、内容、底部的要求</h2><h4 id=\"BTW-八成这次软考又挂了…\"><a href=\"#BTW-八成这次软考又挂了…\" class=\"headerlink\" title=\"BTW,八成这次软考又挂了…\"></a>BTW,八成这次软考又挂了…</h4>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoice</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is content\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Invoice</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> Invoice ticket;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span> <span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    ticket=t;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ticket!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      ticket.printInvoice();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderDecorator</span><span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(t);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is the header\"</span>);</div><div class=\"line\">    <span class=\"keyword\">super</span>.printInvoice();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooterDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FooterDecorator</span><span class=\"params\">(Invoice t)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(t);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printInvoice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">super</span>.printInvoice();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"this is the footer\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zhuangshi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    Invoice t =<span class=\"keyword\">new</span> Invoice();</div><div class=\"line\">    Invoice ticket;</div><div class=\"line\">    ticket=<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">new</span> HeaderDecorator(t));</div><div class=\"line\">    ticket.printInvoice();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\">    ticket=<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> Decorator(<span class=\"keyword\">null</span>)));</div><div class=\"line\">    ticket.printInvoice();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"这么写也行-，不知道哪个算标准答案\"><a href=\"#这么写也行-，不知道哪个算标准答案\" class=\"headerlink\" title=\"这么写也行 ，不知道哪个算标准答案\"></a>这么写也行 ，不知道哪个算标准答案</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Invoice t =<span class=\"keyword\">new</span> Invoice();</div><div class=\"line\"> Invoice ticket;</div><div class=\"line\"> ticket=<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> FooterDecorator(t));</div><div class=\"line\"> ticket.printInvoice();</div><div class=\"line\"> System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\"> ticket=<span class=\"keyword\">new</span> HeaderDecorator(<span class=\"keyword\">new</span> FooterDecorator(<span class=\"keyword\">null</span>));</div><div class=\"line\"> ticket.printInvoice();</div></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/img/patterndesign/zhuangshi.png\" alt=\"图片描述\"></p>"},{"title":"字符指针与字符数组","date":"2017-11-20T00:12:03.000Z","_content":"\n{% codeblock lang:c %}\nint main()\n{\n\tchar masked_raider[] = \"Alived\";\n\n\tchar *jimmy = masked_raider;\n\n\tprintf(\"masked_raider is %s,jimmy is %s\\n\", masked_raider, jimmy);\n\n\tmasked_raider[0] = 'd';\n\tmasked_raider[1] = 'e';\n\tmasked_raider[2] = 'a';\n\tmasked_raider[3] = 'd';\n\tmasked_raider[4] = 'e';\n\tmasked_raider[5] = 'd';\n\tprintf(\"masked_raider is %s,jimmy is %s\\n\", masked_raider, jimmy);\n\t\n    return 0;\n}\n{% endcodeblock %}\n<!-- more -->\n\n## 知识点：\n\n\tjimmy和masked_raider 是一个存储器地址的两个别名\n\t字符串字面值保存在只读存储器中\n\t如果要修改字符串，需要在新的数组中创建副本\n\n\tchar masked_raider[] = \"Alived\";\n\n\t程序会在栈上创建一个maskd_raider的数组，并把右值设置为 Alived\n\n\t\n\tchar *jimmy =\"Alived\";\n\n\t程序会把常量值放在常量存储区，常量存储期是只读的。\n\t接着在栈上创建了jimmy变量，是局部变量\n\t然后把栈上的jimmy变量设置为alived的地址\n\tconst char *jimmy = \"Alived\";\n\tjimmy[0] = 'd'\n\t因为常量存储区是只读的，所以用jimmy[0]='d'的时候，会报错，jimmy为不可修改的左值\n","source":"_posts/head_frist_c_78.md","raw":"---\ntitle: 字符指针与字符数组\ndate: 2017-11-20 08:12:03\ncategories: C\ntags:\n- HEAD_FIRST_C\n---\n\n{% codeblock lang:c %}\nint main()\n{\n\tchar masked_raider[] = \"Alived\";\n\n\tchar *jimmy = masked_raider;\n\n\tprintf(\"masked_raider is %s,jimmy is %s\\n\", masked_raider, jimmy);\n\n\tmasked_raider[0] = 'd';\n\tmasked_raider[1] = 'e';\n\tmasked_raider[2] = 'a';\n\tmasked_raider[3] = 'd';\n\tmasked_raider[4] = 'e';\n\tmasked_raider[5] = 'd';\n\tprintf(\"masked_raider is %s,jimmy is %s\\n\", masked_raider, jimmy);\n\t\n    return 0;\n}\n{% endcodeblock %}\n<!-- more -->\n\n## 知识点：\n\n\tjimmy和masked_raider 是一个存储器地址的两个别名\n\t字符串字面值保存在只读存储器中\n\t如果要修改字符串，需要在新的数组中创建副本\n\n\tchar masked_raider[] = \"Alived\";\n\n\t程序会在栈上创建一个maskd_raider的数组，并把右值设置为 Alived\n\n\t\n\tchar *jimmy =\"Alived\";\n\n\t程序会把常量值放在常量存储区，常量存储期是只读的。\n\t接着在栈上创建了jimmy变量，是局部变量\n\t然后把栈上的jimmy变量设置为alived的地址\n\tconst char *jimmy = \"Alived\";\n\tjimmy[0] = 'd'\n\t因为常量存储区是只读的，所以用jimmy[0]='d'的时候，会报错，jimmy为不可修改的左值\n","slug":"head_frist_c_78","published":1,"updated":"2019-06-24T13:56:13.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35n4000wnsgv9ggebd1q","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> masked_raider[] = <span class=\"string\">\"Alived\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *jimmy = masked_raider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"masked_raider is %s,jimmy is %s\\n\"</span>, masked_raider, jimmy);</div><div class=\"line\"></div><div class=\"line\">\tmasked_raider[<span class=\"number\">0</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">1</span>] = <span class=\"string\">'e'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">3</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">4</span>] = <span class=\"string\">'e'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">5</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"masked_raider is %s,jimmy is %s\\n\"</span>, masked_raider, jimmy);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><pre><code>jimmy和masked_raider 是一个存储器地址的两个别名\n字符串字面值保存在只读存储器中\n如果要修改字符串，需要在新的数组中创建副本\n\nchar masked_raider[] = &quot;Alived&quot;;\n\n程序会在栈上创建一个maskd_raider的数组，并把右值设置为 Alived\n\n\nchar *jimmy =&quot;Alived&quot;;\n\n程序会把常量值放在常量存储区，常量存储期是只读的。\n接着在栈上创建了jimmy变量，是局部变量\n然后把栈上的jimmy变量设置为alived的地址\nconst char *jimmy = &quot;Alived&quot;;\njimmy[0] = &apos;d&apos;\n因为常量存储区是只读的，所以用jimmy[0]=&apos;d&apos;的时候，会报错，jimmy为不可修改的左值\n</code></pre>","site":{"data":{}},"excerpt":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> masked_raider[] = <span class=\"string\">\"Alived\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *jimmy = masked_raider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"masked_raider is %s,jimmy is %s\\n\"</span>, masked_raider, jimmy);</div><div class=\"line\"></div><div class=\"line\">\tmasked_raider[<span class=\"number\">0</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">1</span>] = <span class=\"string\">'e'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">3</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">4</span>] = <span class=\"string\">'e'</span>;</div><div class=\"line\">\tmasked_raider[<span class=\"number\">5</span>] = <span class=\"string\">'d'</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"masked_raider is %s,jimmy is %s\\n\"</span>, masked_raider, jimmy);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><pre><code>jimmy和masked_raider 是一个存储器地址的两个别名\n字符串字面值保存在只读存储器中\n如果要修改字符串，需要在新的数组中创建副本\n\nchar masked_raider[] = &quot;Alived&quot;;\n\n程序会在栈上创建一个maskd_raider的数组，并把右值设置为 Alived\n\n\nchar *jimmy =&quot;Alived&quot;;\n\n程序会把常量值放在常量存储区，常量存储期是只读的。\n接着在栈上创建了jimmy变量，是局部变量\n然后把栈上的jimmy变量设置为alived的地址\nconst char *jimmy = &quot;Alived&quot;;\njimmy[0] = &apos;d&apos;\n因为常量存储区是只读的，所以用jimmy[0]=&apos;d&apos;的时候，会报错，jimmy为不可修改的左值\n</code></pre>"},{"title":"java桥接模式-软件设计师考试2013下半年","date":"2016-11-11T01:22:03.000Z","_content":"### 类图及题目要求 ###\n\n![桥接模式][1]\n\n\n[1]: /img/patterndesign/qiaojie.png\n\n<!-- more -->\n\n\n### 代码可以运行 ###\n\n```java\n\n\n\ninterface Drawing{\n  public void drawLine(double x1,double y1,double x2,double y2);\n  public void drawCircle(double x,double y,double r);\n}\n\nclass V1Drawing implements Drawing{\n  public void drawLine(double x1,double y1,double x2,double y2){DP1.draw_a_line(x1,y1,x2,y2);}\n  public void drawCircle(double x,double y,double r){DP1.draw_a_circle(x, y, r);}\n}\nclass V2Drawing implements Drawing{\n  public void drawLine(double x1,double x2,double y1,double y2){DP2.drawLine(x1,y1,x2,y2);}\n  public void drawCircle(double x,double y,double r){DP2.drawcircle(x, y, r);}\n}\n\nclass DP1{\n  static public void draw_a_line(double x1,double y1,double x2,double y2){\n    System.out.println(\"DP1 画的线\");\n  }\n  static public void draw_a_circle(double x,double y,double r){\n    System.out.println(\"DP1 画的圆\");\n  }\n}\nclass DP2{\n  static public void drawLine(double x1,double y1,double x2,double y2){\n    System.out.println(\"DP2 画的线\");\n  }\n  static public void drawcircle(double x,double y,double r){\n    System.out.println(\"DP2 画的圆\");\n  }\n}\n\n\n\nabstract class Shape{\n\n  private Drawing _dp;\n\n  public Shape(Drawing dp){\n    this._dp=dp;\n  }\n\n  abstract public void draw();\n\n  public void drawLine(double x1,double y1,double x2,double y2){\n\n    this._dp.drawLine(x1,x2,y1,y2);\n  }\n  public void drawCircle(double x,double y,double r){this._dp.drawCircle(x,y,r);}\n\n}\nclass Rectangle extends Shape{\n\n  private double _x1,_x2,_y1,_y2;\n\n\n  public Rectangle(Drawing dp,double x1,double x2,double y1,double y2){\n    super(dp);\n    this._x1=x1;\n    this._x2=x2;\n    this._y1=y1;\n    this._y2=y2;\n\n  }\n  public void draw(){\n    System.out.println(\"画长方形\"+this._x1+this._x2+this._y1+this._y2);\n    drawLine(_x1,_x2,_y1,_y2);\n    }\n}\nclass Circle extends Shape{\n  private double _x,_y,_r;\n  public Circle (Drawing dp,double x,double y,double r){\n    super(dp);\n  }\n  public void draw(){drawCircle(_x,_y,_r);}\n}\n\npublic class qiaojie {\n\n  public static void main(String[] args){\n    V1Drawing v1=new V1Drawing();\n    V2Drawing v2=new V2Drawing();\n    Rectangle r1=new Rectangle(v1,1.0,2.0,3.0,4.0);\n    r1.draw();\n    v2.drawCircle(2.1, 4.5, 5.6);\n    v2.drawLine(2.4, 3.3 ,4.2, 5.1);\n\n  }\n}\n```\n","source":"_posts/java-bridge.md","raw":"---\ntitle: java桥接模式-软件设计师考试2013下半年\ndate: 2016-11-11 09:22:03\ncategories: 设计模式\ntags:\n - 桥接模式\n - 软件设计师\n - JAVA\n---\n### 类图及题目要求 ###\n\n![桥接模式][1]\n\n\n[1]: /img/patterndesign/qiaojie.png\n\n<!-- more -->\n\n\n### 代码可以运行 ###\n\n```java\n\n\n\ninterface Drawing{\n  public void drawLine(double x1,double y1,double x2,double y2);\n  public void drawCircle(double x,double y,double r);\n}\n\nclass V1Drawing implements Drawing{\n  public void drawLine(double x1,double y1,double x2,double y2){DP1.draw_a_line(x1,y1,x2,y2);}\n  public void drawCircle(double x,double y,double r){DP1.draw_a_circle(x, y, r);}\n}\nclass V2Drawing implements Drawing{\n  public void drawLine(double x1,double x2,double y1,double y2){DP2.drawLine(x1,y1,x2,y2);}\n  public void drawCircle(double x,double y,double r){DP2.drawcircle(x, y, r);}\n}\n\nclass DP1{\n  static public void draw_a_line(double x1,double y1,double x2,double y2){\n    System.out.println(\"DP1 画的线\");\n  }\n  static public void draw_a_circle(double x,double y,double r){\n    System.out.println(\"DP1 画的圆\");\n  }\n}\nclass DP2{\n  static public void drawLine(double x1,double y1,double x2,double y2){\n    System.out.println(\"DP2 画的线\");\n  }\n  static public void drawcircle(double x,double y,double r){\n    System.out.println(\"DP2 画的圆\");\n  }\n}\n\n\n\nabstract class Shape{\n\n  private Drawing _dp;\n\n  public Shape(Drawing dp){\n    this._dp=dp;\n  }\n\n  abstract public void draw();\n\n  public void drawLine(double x1,double y1,double x2,double y2){\n\n    this._dp.drawLine(x1,x2,y1,y2);\n  }\n  public void drawCircle(double x,double y,double r){this._dp.drawCircle(x,y,r);}\n\n}\nclass Rectangle extends Shape{\n\n  private double _x1,_x2,_y1,_y2;\n\n\n  public Rectangle(Drawing dp,double x1,double x2,double y1,double y2){\n    super(dp);\n    this._x1=x1;\n    this._x2=x2;\n    this._y1=y1;\n    this._y2=y2;\n\n  }\n  public void draw(){\n    System.out.println(\"画长方形\"+this._x1+this._x2+this._y1+this._y2);\n    drawLine(_x1,_x2,_y1,_y2);\n    }\n}\nclass Circle extends Shape{\n  private double _x,_y,_r;\n  public Circle (Drawing dp,double x,double y,double r){\n    super(dp);\n  }\n  public void draw(){drawCircle(_x,_y,_r);}\n}\n\npublic class qiaojie {\n\n  public static void main(String[] args){\n    V1Drawing v1=new V1Drawing();\n    V2Drawing v2=new V2Drawing();\n    Rectangle r1=new Rectangle(v1,1.0,2.0,3.0,4.0);\n    r1.draw();\n    v2.drawCircle(2.1, 4.5, 5.6);\n    v2.drawLine(2.4, 3.3 ,4.2, 5.1);\n\n  }\n}\n```\n","slug":"java-bridge","published":1,"updated":"2019-06-24T13:56:13.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35n70010nsgvy8c150su","content":"<h3 id=\"类图及题目要求\"><a href=\"#类图及题目要求\" class=\"headerlink\" title=\"类图及题目要求\"></a>类图及题目要求</h3><p><img src=\"/img/patterndesign/qiaojie.png\" alt=\"桥接模式\"></p>\n<a id=\"more\"></a>\n<h3 id=\"代码可以运行\"><a href=\"#代码可以运行\" class=\"headerlink\" title=\"代码可以运行\"></a>代码可以运行</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">V1Drawing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;DP1.draw_a_line(x1,y1,x2,y2);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;DP1.draw_a_circle(x, y, r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">V2Drawing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> y2)</span></span>&#123;DP2.drawLine(x1,y1,x2,y2);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;DP2.drawcircle(x, y, r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DP1</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw_a_line</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP1 画的线\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw_a_circle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP1 画的圆\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DP2</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP2 画的线\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawcircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP2 画的圆\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Drawing _dp;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Shape</span><span class=\"params\">(Drawing dp)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._dp=dp;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._dp.drawLine(x1,x2,y1,y2);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;<span class=\"keyword\">this</span>._dp.drawCircle(x,y,r);&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> _x1,_x2,_y1,_y2;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(Drawing dp,<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(dp);</div><div class=\"line\">    <span class=\"keyword\">this</span>._x1=x1;</div><div class=\"line\">    <span class=\"keyword\">this</span>._x2=x2;</div><div class=\"line\">    <span class=\"keyword\">this</span>._y1=y1;</div><div class=\"line\">    <span class=\"keyword\">this</span>._y2=y2;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"画长方形\"</span>+<span class=\"keyword\">this</span>._x1+<span class=\"keyword\">this</span>._x2+<span class=\"keyword\">this</span>._y1+<span class=\"keyword\">this</span>._y2);</div><div class=\"line\">    drawLine(_x1,_x2,_y1,_y2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> _x,_y,_r;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span> <span class=\"params\">(Drawing dp,<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(dp);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;drawCircle(_x,_y,_r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">qiaojie</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    V1Drawing v1=<span class=\"keyword\">new</span> V1Drawing();</div><div class=\"line\">    V2Drawing v2=<span class=\"keyword\">new</span> V2Drawing();</div><div class=\"line\">    Rectangle r1=<span class=\"keyword\">new</span> Rectangle(v1,<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</div><div class=\"line\">    r1.draw();</div><div class=\"line\">    v2.drawCircle(<span class=\"number\">2.1</span>, <span class=\"number\">4.5</span>, <span class=\"number\">5.6</span>);</div><div class=\"line\">    v2.drawLine(<span class=\"number\">2.4</span>, <span class=\"number\">3.3</span> ,<span class=\"number\">4.2</span>, <span class=\"number\">5.1</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"类图及题目要求\"><a href=\"#类图及题目要求\" class=\"headerlink\" title=\"类图及题目要求\"></a>类图及题目要求</h3><p><img src=\"/img/patterndesign/qiaojie.png\" alt=\"桥接模式\"></p>","more":"<h3 id=\"代码可以运行\"><a href=\"#代码可以运行\" class=\"headerlink\" title=\"代码可以运行\"></a>代码可以运行</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">V1Drawing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;DP1.draw_a_line(x1,y1,x2,y2);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;DP1.draw_a_circle(x, y, r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">V2Drawing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Drawing</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> y2)</span></span>&#123;DP2.drawLine(x1,y1,x2,y2);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;DP2.drawcircle(x, y, r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DP1</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw_a_line</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP1 画的线\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw_a_circle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP1 画的圆\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DP2</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP2 画的线\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawcircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"DP2 画的圆\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Drawing _dp;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Shape</span><span class=\"params\">(Drawing dp)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._dp=dp;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._dp.drawLine(x1,x2,y1,y2);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;<span class=\"keyword\">this</span>._dp.drawCircle(x,y,r);&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> _x1,_x2,_y1,_y2;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(Drawing dp,<span class=\"keyword\">double</span> x1,<span class=\"keyword\">double</span> x2,<span class=\"keyword\">double</span> y1,<span class=\"keyword\">double</span> y2)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(dp);</div><div class=\"line\">    <span class=\"keyword\">this</span>._x1=x1;</div><div class=\"line\">    <span class=\"keyword\">this</span>._x2=x2;</div><div class=\"line\">    <span class=\"keyword\">this</span>._y1=y1;</div><div class=\"line\">    <span class=\"keyword\">this</span>._y2=y2;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"画长方形\"</span>+<span class=\"keyword\">this</span>._x1+<span class=\"keyword\">this</span>._x2+<span class=\"keyword\">this</span>._y1+<span class=\"keyword\">this</span>._y2);</div><div class=\"line\">    drawLine(_x1,_x2,_y1,_y2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> _x,_y,_r;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span> <span class=\"params\">(Drawing dp,<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y,<span class=\"keyword\">double</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(dp);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;drawCircle(_x,_y,_r);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">qiaojie</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    V1Drawing v1=<span class=\"keyword\">new</span> V1Drawing();</div><div class=\"line\">    V2Drawing v2=<span class=\"keyword\">new</span> V2Drawing();</div><div class=\"line\">    Rectangle r1=<span class=\"keyword\">new</span> Rectangle(v1,<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</div><div class=\"line\">    r1.draw();</div><div class=\"line\">    v2.drawCircle(<span class=\"number\">2.1</span>, <span class=\"number\">4.5</span>, <span class=\"number\">5.6</span>);</div><div class=\"line\">    v2.drawLine(<span class=\"number\">2.4</span>, <span class=\"number\">3.3</span> ,<span class=\"number\">4.2</span>, <span class=\"number\">5.1</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"jp2a把图片转为ascii","date":"2016-11-21T02:05:49.000Z","_content":"\n## 先看效果 ##\n<iframe height=498 width=510 src='http://player.youku.com/embed/XMTgyODIyMjA3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n<!-- more -->\n\n## 再贴代码 ##\n\n```\n#!/bin/bash\nmake\njp2a --color --background=light -b -f --term-fit  waimai.jpg >waimai.txt\ncat waimai.txt\nsleep 2\nmake clean >/dev/null 2>&1\njp2a --color --background=light -b -f --term-fit zaiyiqilvse.jpg >zaiyiqi.txt\ncat zaiyiqi.txt\n\n```\n\n## 注意 ##\n\n需要先安装jp2a，开头那些编译的效果是在编译一个php的扩展，和本身效果呈现没有关系。就是为了小装b用的\n上面的sh脚本 和你需要编译的扩展在一起就行。\n\n\n\n","source":"_posts/jp2a-meituan.md","raw":"---\ntitle: jp2a把图片转为ascii\ndate: 2016-11-21 10:05:49\ncategories: LINUX\ntags:\n - jp2a\n - ascii\n - meituan\n---\n\n## 先看效果 ##\n<iframe height=498 width=510 src='http://player.youku.com/embed/XMTgyODIyMjA3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n<!-- more -->\n\n## 再贴代码 ##\n\n```\n#!/bin/bash\nmake\njp2a --color --background=light -b -f --term-fit  waimai.jpg >waimai.txt\ncat waimai.txt\nsleep 2\nmake clean >/dev/null 2>&1\njp2a --color --background=light -b -f --term-fit zaiyiqilvse.jpg >zaiyiqi.txt\ncat zaiyiqi.txt\n\n```\n\n## 注意 ##\n\n需要先安装jp2a，开头那些编译的效果是在编译一个php的扩展，和本身效果呈现没有关系。就是为了小装b用的\n上面的sh脚本 和你需要编译的扩展在一起就行。\n\n\n\n","slug":"jp2a-meituan","published":1,"updated":"2019-06-24T13:56:13.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35n80013nsgvalhgazh4","content":"<h2 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h2><iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XMTgyODIyMjA3Mg==\" frameborder=\"0\" 'allowfullscreen'=\"\"></iframe>\n\n<a id=\"more\"></a>\n<h2 id=\"再贴代码\"><a href=\"#再贴代码\" class=\"headerlink\" title=\"再贴代码\"></a>再贴代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">make</div><div class=\"line\">jp2a --color --background=light -b -f --term-fit  waimai.jpg &gt;waimai.txt</div><div class=\"line\">cat waimai.txt</div><div class=\"line\">sleep 2</div><div class=\"line\">make clean &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">jp2a --color --background=light -b -f --term-fit zaiyiqilvse.jpg &gt;zaiyiqi.txt</div><div class=\"line\">cat zaiyiqi.txt</div></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>需要先安装jp2a，开头那些编译的效果是在编译一个php的扩展，和本身效果呈现没有关系。就是为了小装b用的<br>上面的sh脚本 和你需要编译的扩展在一起就行。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h2><iframe height=498 width=510 src='http://player.youku.com/embed/XMTgyODIyMjA3Mg==' frameborder=0 'allowfullscreen'></iframe>","more":"<h2 id=\"再贴代码\"><a href=\"#再贴代码\" class=\"headerlink\" title=\"再贴代码\"></a>再贴代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">make</div><div class=\"line\">jp2a --color --background=light -b -f --term-fit  waimai.jpg &gt;waimai.txt</div><div class=\"line\">cat waimai.txt</div><div class=\"line\">sleep 2</div><div class=\"line\">make clean &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">jp2a --color --background=light -b -f --term-fit zaiyiqilvse.jpg &gt;zaiyiqi.txt</div><div class=\"line\">cat zaiyiqi.txt</div></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>需要先安装jp2a，开头那些编译的效果是在编译一个php的扩展，和本身效果呈现没有关系。就是为了小装b用的<br>上面的sh脚本 和你需要编译的扩展在一起就行。</p>"},{"title":"JAVA适配器模式-2016年上半半年考试真题","date":"2016-11-07T04:28:59.000Z","_content":" ### 地址信息类 要求扩展 Dutch（荷兰）语言###\n-----------------\n ### 现采用适配器模式（adapter）实现该要求： ###\n\n\n <!-- more -->\n\n```java\nclass Address{\n  public void street(){System.out.println(\"正常街道\");}\n  public void zip(){System.out.println(\"正常邮编\");}\n  public void city(){System.out.println(\"正常地方\");}\n}\n\nclass DutchAddress{\n\n  public void straat(){System.out.println(\"荷兰语街道\");}\n  public void postcode(){System.out.println(\"荷兰语邮编\");}\n  public void plaats(){System.out.println(\"荷兰语地方\");}\n}\n\nclass DutchAddressAdapter extends DutchAddress{\n  private Address address;\n  public DutchAddressAdapter(Address addr){\n    this.address=addr;\n  }\n\n  public void straat(){\n    this.address.street();\n  }\n  public void postcode(){\n    this.address.zip();\n  }\n  public void plaats(){\n    this.address.city();\n  }\n\n}\n\n\npublic class Test {\n  public static void main(String[] args){\n    Address addr=new Address();\n    DutchAddress addrAdapter=new DutchAddressAdapter(addr);\n    System.out.println(\"\\n THE DUCTH ADDRESS\\n\");\n    testDutch(addrAdapter);\n  }\n\n  static void testDutch(DutchAddress addr){\n    addr.straat();\n    addr.postcode();\n    addr.plaats();\n  }\n\n}\n```\n### 类图 ###\n\n![适配器模式][1]\n\n\n[1]: /img/patterndesign/adapter.png\n","source":"_posts/java-adapter.md","raw":"\n---\ntitle: JAVA适配器模式-2016年上半半年考试真题\ndate: 2016-11-07 12:28:59\ncategories: 设计模式\ntags:\n - 适配器模式\n - 软件设计师\n - JAVA\n---\n ### 地址信息类 要求扩展 Dutch（荷兰）语言###\n-----------------\n ### 现采用适配器模式（adapter）实现该要求： ###\n\n\n <!-- more -->\n\n```java\nclass Address{\n  public void street(){System.out.println(\"正常街道\");}\n  public void zip(){System.out.println(\"正常邮编\");}\n  public void city(){System.out.println(\"正常地方\");}\n}\n\nclass DutchAddress{\n\n  public void straat(){System.out.println(\"荷兰语街道\");}\n  public void postcode(){System.out.println(\"荷兰语邮编\");}\n  public void plaats(){System.out.println(\"荷兰语地方\");}\n}\n\nclass DutchAddressAdapter extends DutchAddress{\n  private Address address;\n  public DutchAddressAdapter(Address addr){\n    this.address=addr;\n  }\n\n  public void straat(){\n    this.address.street();\n  }\n  public void postcode(){\n    this.address.zip();\n  }\n  public void plaats(){\n    this.address.city();\n  }\n\n}\n\n\npublic class Test {\n  public static void main(String[] args){\n    Address addr=new Address();\n    DutchAddress addrAdapter=new DutchAddressAdapter(addr);\n    System.out.println(\"\\n THE DUCTH ADDRESS\\n\");\n    testDutch(addrAdapter);\n  }\n\n  static void testDutch(DutchAddress addr){\n    addr.straat();\n    addr.postcode();\n    addr.plaats();\n  }\n\n}\n```\n### 类图 ###\n\n![适配器模式][1]\n\n\n[1]: /img/patterndesign/adapter.png\n","slug":"java-adapter","published":1,"updated":"2019-06-24T13:56:13.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35na0016nsgvxrcrlb2y","content":"<h3 id=\"地址信息类-要求扩展-Dutch（荷兰）语言\"><a href=\"#地址信息类-要求扩展-Dutch（荷兰）语言\" class=\"headerlink\" title=\"地址信息类 要求扩展 Dutch（荷兰）语言\"></a>地址信息类 要求扩展 Dutch（荷兰）语言</h3><hr>\n<h3 id=\"现采用适配器模式（adapter）实现该要求：\"><a href=\"#现采用适配器模式（adapter）实现该要求：\" class=\"headerlink\" title=\"现采用适配器模式（adapter）实现该要求：\"></a>现采用适配器模式（adapter）实现该要求：</h3> <a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">street</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常街道\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zip</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常邮编\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">city</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常地方\"</span>);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DutchAddress</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">straat</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语街道\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postcode</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语邮编\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">plaats</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语地方\"</span>);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DutchAddressAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">DutchAddress</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Address address;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DutchAddressAdapter</span><span class=\"params\">(Address addr)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address=addr;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">straat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.street();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postcode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.zip();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">plaats</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.city();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    Address addr=<span class=\"keyword\">new</span> Address();</div><div class=\"line\">    DutchAddress addrAdapter=<span class=\"keyword\">new</span> DutchAddressAdapter(addr);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"\\n THE DUCTH ADDRESS\\n\"</span>);</div><div class=\"line\">    testDutch(addrAdapter);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testDutch</span><span class=\"params\">(DutchAddress addr)</span></span>&#123;</div><div class=\"line\">    addr.straat();</div><div class=\"line\">    addr.postcode();</div><div class=\"line\">    addr.plaats();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/img/patterndesign/adapter.png\" alt=\"适配器模式\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"地址信息类-要求扩展-Dutch（荷兰）语言\"><a href=\"#地址信息类-要求扩展-Dutch（荷兰）语言\" class=\"headerlink\" title=\"地址信息类 要求扩展 Dutch（荷兰）语言\"></a>地址信息类 要求扩展 Dutch（荷兰）语言</h3><hr>\n<h3 id=\"现采用适配器模式（adapter）实现该要求：\"><a href=\"#现采用适配器模式（adapter）实现该要求：\" class=\"headerlink\" title=\"现采用适配器模式（adapter）实现该要求：\"></a>现采用适配器模式（adapter）实现该要求：</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">street</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常街道\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zip</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常邮编\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">city</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"正常地方\"</span>);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DutchAddress</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">straat</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语街道\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postcode</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语邮编\"</span>);&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">plaats</span><span class=\"params\">()</span></span>&#123;System.out.println(<span class=\"string\">\"荷兰语地方\"</span>);&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DutchAddressAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">DutchAddress</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Address address;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DutchAddressAdapter</span><span class=\"params\">(Address addr)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address=addr;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">straat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.street();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postcode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.zip();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">plaats</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.address.city();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    Address addr=<span class=\"keyword\">new</span> Address();</div><div class=\"line\">    DutchAddress addrAdapter=<span class=\"keyword\">new</span> DutchAddressAdapter(addr);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"\\n THE DUCTH ADDRESS\\n\"</span>);</div><div class=\"line\">    testDutch(addrAdapter);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testDutch</span><span class=\"params\">(DutchAddress addr)</span></span>&#123;</div><div class=\"line\">    addr.straat();</div><div class=\"line\">    addr.postcode();</div><div class=\"line\">    addr.plaats();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/img/patterndesign/adapter.png\" alt=\"适配器模式\"></p>"},{"title":"JAVA策略模式-2015年下半年考试真题","date":"2016-11-07T04:18:59.000Z","_content":"\n ### 大型商场要求商店有三种策略[原价、打折、满减]###\n-----------------\n ### 现采用策略模式（strategy）实现该要求： ###\n\n <!-- more -->\n\n```java\n//枚举三种策略\nenum TYPE {NORMAL,CASH_DISCOUNT,CASH_RETURN}\n\ninterface CashSuper{\n  public double acceptCash(double money);\n}\n\n//原价\nclass CashNormal implements CashSuper{\n  public double acceptCash(double money){\n    return money;\n  }\n}\n\n//打折\nclass CashDiscount implements CashSuper{\n  private double discountRate;\n\n  public CashDiscount(double discountRate){\n    this.discountRate=discountRate;\n\n  }\n  public double acceptCash(double money){\n    return money*discountRate;\n  }\n}\n\n//满减\nclass CashReturn implements CashSuper{\n  private double moneyCondition;\n  private double moneyReturn;\n\n  public CashReturn(double moneyCondition,double moneyReturn){\n\n    this.moneyCondition=moneyCondition;\n    this.moneyReturn=moneyReturn;\n\n  }\n  public double acceptCash(double money){\n\n    double result =money;\n    if(money>=moneyCondition){\n      result=money-moneyReturn;\n    }\n    return result;\n  }\n}\n\n// 策略\npublic class CashContent {\n  private CashSuper sc;\n  private TYPE t;\n\n  public CashContent (TYPE t){\n      switch (t){\n      case NORMAL:\n      sc=new CashNormal();\n      break;\n\n      case CASH_DISCOUNT:\n      sc=new CashDiscount(0.9);\n      break;\n\n\n      case CASH_RETURN:\n      sc=new CashReturn(300.00,50.00);\n          break;\n    }\n  }\n\n//实现\n  public static void main(String[] argus){\n    CashContent cc=new CashContent(TYPE.CASH_RETURN);\n    //CashContent cc=new CashContent(TYPE.CASH_DISCOUNT);\n    //CashContent cc=new CashContent(TYPE.NORMAL);\n\n    System.out.println(cc.sc.acceptCash(900));//结果为900-50=850.0\n\n  }\n}\n\n\n```\n### 类图 ###\n\n![策略模式][1]\n\n\n[1]: /img/patterndesign/strategy.png\n","source":"_posts/java-strategy.md","raw":"---\ntitle: JAVA策略模式-2015年下半年考试真题\ndate: 2016-11-07 12:18:59\ncategories: 设计模式\ntags:\n - 策略模式\n - 软件设计师\n - JAVA\n---\n\n ### 大型商场要求商店有三种策略[原价、打折、满减]###\n-----------------\n ### 现采用策略模式（strategy）实现该要求： ###\n\n <!-- more -->\n\n```java\n//枚举三种策略\nenum TYPE {NORMAL,CASH_DISCOUNT,CASH_RETURN}\n\ninterface CashSuper{\n  public double acceptCash(double money);\n}\n\n//原价\nclass CashNormal implements CashSuper{\n  public double acceptCash(double money){\n    return money;\n  }\n}\n\n//打折\nclass CashDiscount implements CashSuper{\n  private double discountRate;\n\n  public CashDiscount(double discountRate){\n    this.discountRate=discountRate;\n\n  }\n  public double acceptCash(double money){\n    return money*discountRate;\n  }\n}\n\n//满减\nclass CashReturn implements CashSuper{\n  private double moneyCondition;\n  private double moneyReturn;\n\n  public CashReturn(double moneyCondition,double moneyReturn){\n\n    this.moneyCondition=moneyCondition;\n    this.moneyReturn=moneyReturn;\n\n  }\n  public double acceptCash(double money){\n\n    double result =money;\n    if(money>=moneyCondition){\n      result=money-moneyReturn;\n    }\n    return result;\n  }\n}\n\n// 策略\npublic class CashContent {\n  private CashSuper sc;\n  private TYPE t;\n\n  public CashContent (TYPE t){\n      switch (t){\n      case NORMAL:\n      sc=new CashNormal();\n      break;\n\n      case CASH_DISCOUNT:\n      sc=new CashDiscount(0.9);\n      break;\n\n\n      case CASH_RETURN:\n      sc=new CashReturn(300.00,50.00);\n          break;\n    }\n  }\n\n//实现\n  public static void main(String[] argus){\n    CashContent cc=new CashContent(TYPE.CASH_RETURN);\n    //CashContent cc=new CashContent(TYPE.CASH_DISCOUNT);\n    //CashContent cc=new CashContent(TYPE.NORMAL);\n\n    System.out.println(cc.sc.acceptCash(900));//结果为900-50=850.0\n\n  }\n}\n\n\n```\n### 类图 ###\n\n![策略模式][1]\n\n\n[1]: /img/patterndesign/strategy.png\n","slug":"java-strategy","published":1,"updated":"2019-06-24T13:56:13.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nc0019nsgvzeinvf3e","content":"<h3 id=\"大型商场要求商店有三种策略-原价、打折、满减\"><a href=\"#大型商场要求商店有三种策略-原价、打折、满减\" class=\"headerlink\" title=\"大型商场要求商店有三种策略[原价、打折、满减]\"></a>大型商场要求商店有三种策略[原价、打折、满减]</h3><hr>\n<h3 id=\"现采用策略模式（strategy）实现该要求：\"><a href=\"#现采用策略模式（strategy）实现该要求：\" class=\"headerlink\" title=\"现采用策略模式（strategy）实现该要求：\"></a>现采用策略模式（strategy）实现该要求：</h3> <a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//枚举三种策略</span></div><div class=\"line\"><span class=\"keyword\">enum</span> TYPE &#123;NORMAL,CASH_DISCOUNT,CASH_RETURN&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原价</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashNormal</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> money;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打折</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashDiscount</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> discountRate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashDiscount</span><span class=\"params\">(<span class=\"keyword\">double</span> discountRate)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.discountRate=discountRate;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> money*discountRate;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//满减</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashReturn</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> moneyCondition;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> moneyReturn;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashReturn</span><span class=\"params\">(<span class=\"keyword\">double</span> moneyCondition,<span class=\"keyword\">double</span> moneyReturn)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.moneyCondition=moneyCondition;</div><div class=\"line\">    <span class=\"keyword\">this</span>.moneyReturn=moneyReturn;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> result =money;</div><div class=\"line\">    <span class=\"keyword\">if</span>(money&gt;=moneyCondition)&#123;</div><div class=\"line\">      result=money-moneyReturn;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 策略</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashContent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> CashSuper sc;</div><div class=\"line\">  <span class=\"keyword\">private</span> TYPE t;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashContent</span> <span class=\"params\">(TYPE t)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (t)&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> NORMAL:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashNormal();</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> CASH_DISCOUNT:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashDiscount(<span class=\"number\">0.9</span>);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> CASH_RETURN:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashReturn(<span class=\"number\">300.00</span>,<span class=\"number\">50.00</span>);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argus)</span></span>&#123;</div><div class=\"line\">    CashContent cc=<span class=\"keyword\">new</span> CashContent(TYPE.CASH_RETURN);</div><div class=\"line\">    <span class=\"comment\">//CashContent cc=new CashContent(TYPE.CASH_DISCOUNT);</span></div><div class=\"line\">    <span class=\"comment\">//CashContent cc=new CashContent(TYPE.NORMAL);</span></div><div class=\"line\"></div><div class=\"line\">    System.out.println(cc.sc.acceptCash(<span class=\"number\">900</span>));<span class=\"comment\">//结果为900-50=850.0</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/img/patterndesign/strategy.png\" alt=\"策略模式\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"大型商场要求商店有三种策略-原价、打折、满减\"><a href=\"#大型商场要求商店有三种策略-原价、打折、满减\" class=\"headerlink\" title=\"大型商场要求商店有三种策略[原价、打折、满减]\"></a>大型商场要求商店有三种策略[原价、打折、满减]</h3><hr>\n<h3 id=\"现采用策略模式（strategy）实现该要求：\"><a href=\"#现采用策略模式（strategy）实现该要求：\" class=\"headerlink\" title=\"现采用策略模式（strategy）实现该要求：\"></a>现采用策略模式（strategy）实现该要求：</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//枚举三种策略</span></div><div class=\"line\"><span class=\"keyword\">enum</span> TYPE &#123;NORMAL,CASH_DISCOUNT,CASH_RETURN&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原价</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashNormal</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> money;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打折</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashDiscount</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> discountRate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashDiscount</span><span class=\"params\">(<span class=\"keyword\">double</span> discountRate)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.discountRate=discountRate;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> money*discountRate;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//满减</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashReturn</span> <span class=\"keyword\">implements</span> <span class=\"title\">CashSuper</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> moneyCondition;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> moneyReturn;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashReturn</span><span class=\"params\">(<span class=\"keyword\">double</span> moneyCondition,<span class=\"keyword\">double</span> moneyReturn)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.moneyCondition=moneyCondition;</div><div class=\"line\">    <span class=\"keyword\">this</span>.moneyReturn=moneyReturn;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">acceptCash</span><span class=\"params\">(<span class=\"keyword\">double</span> money)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> result =money;</div><div class=\"line\">    <span class=\"keyword\">if</span>(money&gt;=moneyCondition)&#123;</div><div class=\"line\">      result=money-moneyReturn;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 策略</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashContent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> CashSuper sc;</div><div class=\"line\">  <span class=\"keyword\">private</span> TYPE t;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CashContent</span> <span class=\"params\">(TYPE t)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (t)&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> NORMAL:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashNormal();</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> CASH_DISCOUNT:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashDiscount(<span class=\"number\">0.9</span>);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> CASH_RETURN:</div><div class=\"line\">      sc=<span class=\"keyword\">new</span> CashReturn(<span class=\"number\">300.00</span>,<span class=\"number\">50.00</span>);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argus)</span></span>&#123;</div><div class=\"line\">    CashContent cc=<span class=\"keyword\">new</span> CashContent(TYPE.CASH_RETURN);</div><div class=\"line\">    <span class=\"comment\">//CashContent cc=new CashContent(TYPE.CASH_DISCOUNT);</span></div><div class=\"line\">    <span class=\"comment\">//CashContent cc=new CashContent(TYPE.NORMAL);</span></div><div class=\"line\"></div><div class=\"line\">    System.out.println(cc.sc.acceptCash(<span class=\"number\">900</span>));<span class=\"comment\">//结果为900-50=850.0</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/img/patterndesign/strategy.png\" alt=\"策略模式\"></p>"},{"title":"linux top about cpu","date":"2016-12-07T04:48:13.000Z","_content":"\n```\nTasks: 179 total,   4 running, 175 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 10.3 us,  1.3 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   3012668 total,  1073356 used,  1939312 free,    52772 buffers\nKiB Swap:  1308668 total,        0 used,  1308668 free.   409160 cached Mem\n\n```\n\n`us` 用户态 cpu执行用户进程的时间，包括nice时间，一般用户空间cpu高点比较好\n\n`sy` 系统 cpu在内核运行时间，包括软硬终中断时间，如果此值较高，说明系统有问题\n\n`id` idle 系统空闲\n`wa` waiting 系统等待io操作所花费的时间，系统不应该花费太多时间在此，如果有，说明io有瓶颈\n`hi` hard irq time 硬中断，一般由硬件发出\n`si` soft irq time 软中断，由信号发出，程序指令发出，比如等待io请求，一般没有硬件的参与\n`st` steal time，被强制等待 虚拟cpu的时间，比如为另一个虚拟处理器服务\n\n以上输出根据 `/proc/stat`\n\n```\ntb@tb:~$ cat /proc/stat\ncpu  5803 228 1006 54723 212 0 22 0 0 0\ncpu0 5803 228 1006 54723 212 0 22 0 0 0\nintr 105215 41 238 0 0 0 0 0 0 0 0 0 0 288 0 0 741 0 0 0 3170 1912 14235 58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nctxt 1172838\nbtime 1481084918\nprocesses 2570\nprocs_running 6\nprocs_blocked 0\nsoftirq 48007 4 24384 126 3233 14075 0 271 0 0 5914\n```\n<a href=\"http://download.csdn.net/detail/u010703523/9704275\" >了解更多</a>\n\n\n","source":"_posts/linux-top-about-cpu.md","raw":"---\ntitle: linux top about cpu\ndate: 2016-12-07 12:48:13\ncategories: PHP\ntags:\n - linux\n - cpu\n---\n\n```\nTasks: 179 total,   4 running, 175 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 10.3 us,  1.3 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   3012668 total,  1073356 used,  1939312 free,    52772 buffers\nKiB Swap:  1308668 total,        0 used,  1308668 free.   409160 cached Mem\n\n```\n\n`us` 用户态 cpu执行用户进程的时间，包括nice时间，一般用户空间cpu高点比较好\n\n`sy` 系统 cpu在内核运行时间，包括软硬终中断时间，如果此值较高，说明系统有问题\n\n`id` idle 系统空闲\n`wa` waiting 系统等待io操作所花费的时间，系统不应该花费太多时间在此，如果有，说明io有瓶颈\n`hi` hard irq time 硬中断，一般由硬件发出\n`si` soft irq time 软中断，由信号发出，程序指令发出，比如等待io请求，一般没有硬件的参与\n`st` steal time，被强制等待 虚拟cpu的时间，比如为另一个虚拟处理器服务\n\n以上输出根据 `/proc/stat`\n\n```\ntb@tb:~$ cat /proc/stat\ncpu  5803 228 1006 54723 212 0 22 0 0 0\ncpu0 5803 228 1006 54723 212 0 22 0 0 0\nintr 105215 41 238 0 0 0 0 0 0 0 0 0 0 288 0 0 741 0 0 0 3170 1912 14235 58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nctxt 1172838\nbtime 1481084918\nprocesses 2570\nprocs_running 6\nprocs_blocked 0\nsoftirq 48007 4 24384 126 3233 14075 0 271 0 0 5914\n```\n<a href=\"http://download.csdn.net/detail/u010703523/9704275\" >了解更多</a>\n\n\n","slug":"linux-top-about-cpu","published":1,"updated":"2019-06-24T13:56:13.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35ne001bnsgvo3ox43m6","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tasks: 179 total,   4 running, 175 sleeping,   0 stopped,   0 zombie</div><div class=\"line\">%Cpu(s): 10.3 us,  1.3 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class=\"line\">KiB Mem:   3012668 total,  1073356 used,  1939312 free,    52772 buffers</div><div class=\"line\">KiB Swap:  1308668 total,        0 used,  1308668 free.   409160 cached Mem</div></pre></td></tr></table></figure>\n<p><code>us</code> 用户态 cpu执行用户进程的时间，包括nice时间，一般用户空间cpu高点比较好</p>\n<p><code>sy</code> 系统 cpu在内核运行时间，包括软硬终中断时间，如果此值较高，说明系统有问题</p>\n<p><code>id</code> idle 系统空闲<br><code>wa</code> waiting 系统等待io操作所花费的时间，系统不应该花费太多时间在此，如果有，说明io有瓶颈<br><code>hi</code> hard irq time 硬中断，一般由硬件发出<br><code>si</code> soft irq time 软中断，由信号发出，程序指令发出，比如等待io请求，一般没有硬件的参与<br><code>st</code> steal time，被强制等待 虚拟cpu的时间，比如为另一个虚拟处理器服务</p>\n<p>以上输出根据 <code>/proc/stat</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tb@tb:~$ cat /proc/stat</div><div class=\"line\">cpu  5803 228 1006 54723 212 0 22 0 0 0</div><div class=\"line\">cpu0 5803 228 1006 54723 212 0 22 0 0 0</div><div class=\"line\">intr 105215 41 238 0 0 0 0 0 0 0 0 0 0 288 0 0 741 0 0 0 3170 1912 14235 58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</div><div class=\"line\">ctxt 1172838</div><div class=\"line\">btime 1481084918</div><div class=\"line\">processes 2570</div><div class=\"line\">procs_running 6</div><div class=\"line\">procs_blocked 0</div><div class=\"line\">softirq 48007 4 24384 126 3233 14075 0 271 0 0 5914</div></pre></td></tr></table></figure>\n<p><a href=\"http://download.csdn.net/detail/u010703523/9704275\" target=\"_blank\" rel=\"external\">了解更多</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tasks: 179 total,   4 running, 175 sleeping,   0 stopped,   0 zombie</div><div class=\"line\">%Cpu(s): 10.3 us,  1.3 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class=\"line\">KiB Mem:   3012668 total,  1073356 used,  1939312 free,    52772 buffers</div><div class=\"line\">KiB Swap:  1308668 total,        0 used,  1308668 free.   409160 cached Mem</div></pre></td></tr></table></figure>\n<p><code>us</code> 用户态 cpu执行用户进程的时间，包括nice时间，一般用户空间cpu高点比较好</p>\n<p><code>sy</code> 系统 cpu在内核运行时间，包括软硬终中断时间，如果此值较高，说明系统有问题</p>\n<p><code>id</code> idle 系统空闲<br><code>wa</code> waiting 系统等待io操作所花费的时间，系统不应该花费太多时间在此，如果有，说明io有瓶颈<br><code>hi</code> hard irq time 硬中断，一般由硬件发出<br><code>si</code> soft irq time 软中断，由信号发出，程序指令发出，比如等待io请求，一般没有硬件的参与<br><code>st</code> steal time，被强制等待 虚拟cpu的时间，比如为另一个虚拟处理器服务</p>\n<p>以上输出根据 <code>/proc/stat</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tb@tb:~$ cat /proc/stat</div><div class=\"line\">cpu  5803 228 1006 54723 212 0 22 0 0 0</div><div class=\"line\">cpu0 5803 228 1006 54723 212 0 22 0 0 0</div><div class=\"line\">intr 105215 41 238 0 0 0 0 0 0 0 0 0 0 288 0 0 741 0 0 0 3170 1912 14235 58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</div><div class=\"line\">ctxt 1172838</div><div class=\"line\">btime 1481084918</div><div class=\"line\">processes 2570</div><div class=\"line\">procs_running 6</div><div class=\"line\">procs_blocked 0</div><div class=\"line\">softirq 48007 4 24384 126 3233 14075 0 271 0 0 5914</div></pre></td></tr></table></figure>\n<p><a href=\"http://download.csdn.net/detail/u010703523/9704275\" >了解更多</a></p>\n"},{"title":"mycncart email设置","date":"2017-11-25T12:25:03.000Z","_content":"## 知识点：查看log\n\n提交订单时，出现服务器500错误，但是php的相关报错都已经打开。\n想了一会，还是看`fpm_error.log`和`nginx errorlog`\n<!-- more -->\n\n果真，\n`root@tuan:/var/log/nginx# tail -f error.log`\n\nnginx log 如下\n\n```\n...\n/php7.0-fpm.sock:\", host: \"www.maipingzheng.com\", referrer: \"http://www.maipingzheng.com/index.php?route=checkout/checkout\"\n2017/11/25 19:50:49 [error] 6104#6104: *504 FastCGI sent in stderr: \"PHP message: PHP Fatal error:  Uncaught Exception: Error: EHLO not accepted from server! in /usr/share/nginx/cart_2.0.0.3/system/library/mail/smtp.php:120\nStack trace:\n...\n\n```\n\n重点是 \n`EHLO not acceptedfromserver!`，追了下代码发现原来是源自于smtp的错误，由于发送邮箱用的是腾讯的企业邮箱，而smtp.php没有涉及到ssl相关。\n\n\n## 解决办法\nsmtp服务器由\n`smtp.exmail.qq.com`\n改为\n\n`ssl://smtp.exmail.qq.com`\n\n\n## 备忘~\nopencart nginx url seo 配置\n```\n\tserver {\n\n         location / {\n\n                 try_files $uri @opencart;\n\n         }\n\n         location @opencart {\n\n                 rewrite ^/(.+)$ /index.php?_route_=$1 last;\n\n         }\n\n\n         location ~* (\\.(tpl|ini))$ {\n\n                 deny all;\n\n \t\t}\n```\n\n","source":"_posts/mycnart_email_config.md","raw":"\n---\ntitle: mycncart email设置\ndate: 2017-11-25 20:25:03\ncategories: PHP\ntags:\n- mycnart\n---\n## 知识点：查看log\n\n提交订单时，出现服务器500错误，但是php的相关报错都已经打开。\n想了一会，还是看`fpm_error.log`和`nginx errorlog`\n<!-- more -->\n\n果真，\n`root@tuan:/var/log/nginx# tail -f error.log`\n\nnginx log 如下\n\n```\n...\n/php7.0-fpm.sock:\", host: \"www.maipingzheng.com\", referrer: \"http://www.maipingzheng.com/index.php?route=checkout/checkout\"\n2017/11/25 19:50:49 [error] 6104#6104: *504 FastCGI sent in stderr: \"PHP message: PHP Fatal error:  Uncaught Exception: Error: EHLO not accepted from server! in /usr/share/nginx/cart_2.0.0.3/system/library/mail/smtp.php:120\nStack trace:\n...\n\n```\n\n重点是 \n`EHLO not acceptedfromserver!`，追了下代码发现原来是源自于smtp的错误，由于发送邮箱用的是腾讯的企业邮箱，而smtp.php没有涉及到ssl相关。\n\n\n## 解决办法\nsmtp服务器由\n`smtp.exmail.qq.com`\n改为\n\n`ssl://smtp.exmail.qq.com`\n\n\n## 备忘~\nopencart nginx url seo 配置\n```\n\tserver {\n\n         location / {\n\n                 try_files $uri @opencart;\n\n         }\n\n         location @opencart {\n\n                 rewrite ^/(.+)$ /index.php?_route_=$1 last;\n\n         }\n\n\n         location ~* (\\.(tpl|ini))$ {\n\n                 deny all;\n\n \t\t}\n```\n\n","slug":"mycnart_email_config","published":1,"updated":"2019-06-24T13:56:13.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35ng001fnsgvpgu5dyls","content":"<h2 id=\"知识点：查看log\"><a href=\"#知识点：查看log\" class=\"headerlink\" title=\"知识点：查看log\"></a>知识点：查看log</h2><p>提交订单时，出现服务器500错误，但是php的相关报错都已经打开。<br>想了一会，还是看<code>fpm_error.log</code>和<code>nginx errorlog</code><br><a id=\"more\"></a></p>\n<p>果真，<br><code>root@tuan:/var/log/nginx# tail -f error.log</code></p>\n<p>nginx log 如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">/php7.0-fpm.sock:&quot;, host: &quot;www.maipingzheng.com&quot;, referrer: &quot;http://www.maipingzheng.com/index.php?route=checkout/checkout&quot;</div><div class=\"line\">2017/11/25 19:50:49 [error] 6104#6104: *504 FastCGI sent in stderr: &quot;PHP message: PHP Fatal error:  Uncaught Exception: Error: EHLO not accepted from server! in /usr/share/nginx/cart_2.0.0.3/system/library/mail/smtp.php:120</div><div class=\"line\">Stack trace:</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>重点是<br><code>EHLO not acceptedfromserver!</code>，追了下代码发现原来是源自于smtp的错误，由于发送邮箱用的是腾讯的企业邮箱，而smtp.php没有涉及到ssl相关。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>smtp服务器由<br><code>smtp.exmail.qq.com</code><br>改为</p>\n<p><code>ssl://smtp.exmail.qq.com</code></p>\n<h2 id=\"备忘\"><a href=\"#备忘\" class=\"headerlink\" title=\"备忘~\"></a>备忘~</h2><p>opencart nginx url seo 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\"></div><div class=\"line\">                try_files $uri @opencart;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        location @opencart &#123;</div><div class=\"line\"></div><div class=\"line\">                rewrite ^/(.+)$ /index.php?_route_=$1 last;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~* (\\.(tpl|ini))$ &#123;</div><div class=\"line\"></div><div class=\"line\">                deny all;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点：查看log\"><a href=\"#知识点：查看log\" class=\"headerlink\" title=\"知识点：查看log\"></a>知识点：查看log</h2><p>提交订单时，出现服务器500错误，但是php的相关报错都已经打开。<br>想了一会，还是看<code>fpm_error.log</code>和<code>nginx errorlog</code><br>","more":"</p>\n<p>果真，<br><code>root@tuan:/var/log/nginx# tail -f error.log</code></p>\n<p>nginx log 如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">/php7.0-fpm.sock:&quot;, host: &quot;www.maipingzheng.com&quot;, referrer: &quot;http://www.maipingzheng.com/index.php?route=checkout/checkout&quot;</div><div class=\"line\">2017/11/25 19:50:49 [error] 6104#6104: *504 FastCGI sent in stderr: &quot;PHP message: PHP Fatal error:  Uncaught Exception: Error: EHLO not accepted from server! in /usr/share/nginx/cart_2.0.0.3/system/library/mail/smtp.php:120</div><div class=\"line\">Stack trace:</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>重点是<br><code>EHLO not acceptedfromserver!</code>，追了下代码发现原来是源自于smtp的错误，由于发送邮箱用的是腾讯的企业邮箱，而smtp.php没有涉及到ssl相关。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>smtp服务器由<br><code>smtp.exmail.qq.com</code><br>改为</p>\n<p><code>ssl://smtp.exmail.qq.com</code></p>\n<h2 id=\"备忘\"><a href=\"#备忘\" class=\"headerlink\" title=\"备忘~\"></a>备忘~</h2><p>opencart nginx url seo 配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\"></div><div class=\"line\">                try_files $uri @opencart;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        location @opencart &#123;</div><div class=\"line\"></div><div class=\"line\">                rewrite ^/(.+)$ /index.php?_route_=$1 last;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~* (\\.(tpl|ini))$ &#123;</div><div class=\"line\"></div><div class=\"line\">                deny all;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>"},{"title":"php捕获fatal error","date":"2017-11-17T11:06:12.000Z","_content":"\n用到laravel定时任务的时候，由于类似conf配置问题，无法捕捉到错误，采取的方式如下\n\n{% codeblock lang:php %}\n<?php\nfunction fatal_handler() {\n    $errfile = \"unknown file\";\n    $errstr  = \"shutdown\";\n    $errno   = E_CORE_ERROR;\n    $errline = 0;\n\n    $error = error_get_last();\n\n    if($error){\n      //发送邮件队列也可以\n        file_put_contents('./testerror11.txt', json_encode($error));\n    }\n}\nregister_shutdown_function(\"fatal_handler\");\n\ntry{\n    $db=new db();\n}catch(Exception $e){\n\necho $e->error_msg();\n}\n\n{% endcodeblock %}\n","source":"_posts/php-catch-fatel-error.md","raw":"---\ntitle: php捕获fatal error\ndate: 2017-11-17 19:06:12\ncategories: PHP\ntags:\n - 异常\n---\n\n用到laravel定时任务的时候，由于类似conf配置问题，无法捕捉到错误，采取的方式如下\n\n{% codeblock lang:php %}\n<?php\nfunction fatal_handler() {\n    $errfile = \"unknown file\";\n    $errstr  = \"shutdown\";\n    $errno   = E_CORE_ERROR;\n    $errline = 0;\n\n    $error = error_get_last();\n\n    if($error){\n      //发送邮件队列也可以\n        file_put_contents('./testerror11.txt', json_encode($error));\n    }\n}\nregister_shutdown_function(\"fatal_handler\");\n\ntry{\n    $db=new db();\n}catch(Exception $e){\n\necho $e->error_msg();\n}\n\n{% endcodeblock %}\n","slug":"php-catch-fatel-error","published":1,"updated":"2019-06-24T13:56:13.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35ni001insgvx588fi5t","content":"<p>用到laravel定时任务的时候，由于类似conf配置问题，无法捕捉到错误，采取的方式如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fatal_handler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $errfile = <span class=\"string\">\"unknown file\"</span>;</div><div class=\"line\">    $errstr  = <span class=\"string\">\"shutdown\"</span>;</div><div class=\"line\">    $errno   = E_CORE_ERROR;</div><div class=\"line\">    $errline = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    $error = error_get_last();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($error)&#123;</div><div class=\"line\">      <span class=\"comment\">//发送邮件队列也可以</span></div><div class=\"line\">        file_put_contents(<span class=\"string\">'./testerror11.txt'</span>, json_encode($error));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">register_shutdown_function(<span class=\"string\">\"fatal_handler\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    $db=<span class=\"keyword\">new</span> db();</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $e-&gt;error_msg();</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>用到laravel定时任务的时候，由于类似conf配置问题，无法捕捉到错误，采取的方式如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fatal_handler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $errfile = <span class=\"string\">\"unknown file\"</span>;</div><div class=\"line\">    $errstr  = <span class=\"string\">\"shutdown\"</span>;</div><div class=\"line\">    $errno   = E_CORE_ERROR;</div><div class=\"line\">    $errline = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    $error = error_get_last();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($error)&#123;</div><div class=\"line\">      <span class=\"comment\">//发送邮件队列也可以</span></div><div class=\"line\">        file_put_contents(<span class=\"string\">'./testerror11.txt'</span>, json_encode($error));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">register_shutdown_function(<span class=\"string\">\"fatal_handler\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    $db=<span class=\"keyword\">new</span> db();</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $e-&gt;error_msg();</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"PHP的插入排序","date":"2016-11-04T11:18:59.000Z","_content":"```php\n<?php\n/*\n1.外层循环是从数组中选出一个arr[i]将要插入到有序数组的数\n2.内层循环是遍历已经排序好的数组，将arr[i]（也就是temp）依次与有序数组做对比，如果发现有序数组其中一个比准备插进来的arr[i]大，\n那么谁比这个arr[i]大，谁就出去，把位置腾出去，当然比arr[i]大的这个数也不能扔，就给他放在已经排号序数组中且相对于\n他的下一个索引就好了。\n3.2还有个空档，这时候把temp补上就行了\n*/\n$arr = [3, 7, 6,8,1];\n\nfunction insertSort($arr)\n{\n    for ($i = 1; $i < count($arr); $i++)\n    {\n        echo '外层{$i}=' . $i . \"次循环\" . \"\\n\";\n\n        $temp = $arr[$i];//待插入的数\n        echo '外层待插入的数为{$temp}=' . $temp . \"\\n\";\n\n        for ($j = $i - 1; $j >= 0 && $temp > $arr[$j]; $j--)\n        {\n            echo '====>内层{$j}=' . $j . \"次循环\" . \"\\n\";\n            echo '要插入的$temp' . \"=$temp \" . \"VS \" . '已经排序好的$arr[$j]=' . \"$arr[$j]\" . \"小\\n\";\n\n            $arr[$j + 1] = $arr[$j];\n            echo '所以要腾出一个空来给temp,这时候索引$j的值为'.$arr[$j].'要往后靠，此时$j=' . $j, \"\\n\";\n        }\n\n        echo '外层{$i}=' . $i . '次循环结束';\n        // var_dump($temp,$arr[$i]);注意此处两值如果已经经历了内层循环，那么就！==\n        $arr[$j + 1] = $temp;\n        echo '  此时完成$j=' . $j . '把temp的值' . \"$temp\" . '赋予$j+1' . \"\\n\";\n\n        echo \"=====\", \"\\n\";\n\n    }\n    return $arr;\n}\n\nvar_dump(insertSort($arr));\n```\n","source":"_posts/php-insert-sort.md","raw":"---\ntitle: PHP的插入排序\ndate: 2016-11-04 19:18:59\ncategories: PHP\ntags:\n - PHP\n - 插入排序\n - 算法\n---\n```php\n<?php\n/*\n1.外层循环是从数组中选出一个arr[i]将要插入到有序数组的数\n2.内层循环是遍历已经排序好的数组，将arr[i]（也就是temp）依次与有序数组做对比，如果发现有序数组其中一个比准备插进来的arr[i]大，\n那么谁比这个arr[i]大，谁就出去，把位置腾出去，当然比arr[i]大的这个数也不能扔，就给他放在已经排号序数组中且相对于\n他的下一个索引就好了。\n3.2还有个空档，这时候把temp补上就行了\n*/\n$arr = [3, 7, 6,8,1];\n\nfunction insertSort($arr)\n{\n    for ($i = 1; $i < count($arr); $i++)\n    {\n        echo '外层{$i}=' . $i . \"次循环\" . \"\\n\";\n\n        $temp = $arr[$i];//待插入的数\n        echo '外层待插入的数为{$temp}=' . $temp . \"\\n\";\n\n        for ($j = $i - 1; $j >= 0 && $temp > $arr[$j]; $j--)\n        {\n            echo '====>内层{$j}=' . $j . \"次循环\" . \"\\n\";\n            echo '要插入的$temp' . \"=$temp \" . \"VS \" . '已经排序好的$arr[$j]=' . \"$arr[$j]\" . \"小\\n\";\n\n            $arr[$j + 1] = $arr[$j];\n            echo '所以要腾出一个空来给temp,这时候索引$j的值为'.$arr[$j].'要往后靠，此时$j=' . $j, \"\\n\";\n        }\n\n        echo '外层{$i}=' . $i . '次循环结束';\n        // var_dump($temp,$arr[$i]);注意此处两值如果已经经历了内层循环，那么就！==\n        $arr[$j + 1] = $temp;\n        echo '  此时完成$j=' . $j . '把temp的值' . \"$temp\" . '赋予$j+1' . \"\\n\";\n\n        echo \"=====\", \"\\n\";\n\n    }\n    return $arr;\n}\n\nvar_dump(insertSort($arr));\n```\n","slug":"php-insert-sort","published":1,"updated":"2019-06-24T13:56:13.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nl001nnsgv6yfvlbd7","content":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">1.外层循环是从数组中选出一个arr[i]将要插入到有序数组的数</div><div class=\"line\">2.内层循环是遍历已经排序好的数组，将arr[i]（也就是temp）依次与有序数组做对比，如果发现有序数组其中一个比准备插进来的arr[i]大，</div><div class=\"line\">那么谁比这个arr[i]大，谁就出去，把位置腾出去，当然比arr[i]大的这个数也不能扔，就给他放在已经排号序数组中且相对于</div><div class=\"line\">他的下一个索引就好了。</div><div class=\"line\">3.2还有个空档，这时候把temp补上就行了</div><div class=\"line\">*/</div><div class=\"line\">$arr = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span><span class=\"params\">($arr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; count($arr); $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层&#123;$i&#125;='</span> . $i . <span class=\"string\">\"次循环\"</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        $temp = $arr[$i];<span class=\"comment\">//待插入的数</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层待插入的数为&#123;$temp&#125;='</span> . $temp . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> ($j = $i - <span class=\"number\">1</span>; $j &gt;= <span class=\"number\">0</span> &amp;&amp; $temp &gt; $arr[$j]; $j--)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'====&gt;内层&#123;$j&#125;='</span> . $j . <span class=\"string\">\"次循环\"</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'要插入的$temp'</span> . <span class=\"string\">\"=$temp \"</span> . <span class=\"string\">\"VS \"</span> . <span class=\"string\">'已经排序好的$arr[$j]='</span> . <span class=\"string\">\"$arr[$j]\"</span> . <span class=\"string\">\"小\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">            $arr[$j + <span class=\"number\">1</span>] = $arr[$j];</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'所以要腾出一个空来给temp,这时候索引$j的值为'</span>.$arr[$j].<span class=\"string\">'要往后靠，此时$j='</span> . $j, <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层&#123;$i&#125;='</span> . $i . <span class=\"string\">'次循环结束'</span>;</div><div class=\"line\">        <span class=\"comment\">// var_dump($temp,$arr[$i]);注意此处两值如果已经经历了内层循环，那么就！==</span></div><div class=\"line\">        $arr[$j + <span class=\"number\">1</span>] = $temp;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'  此时完成$j='</span> . $j . <span class=\"string\">'把temp的值'</span> . <span class=\"string\">\"$temp\"</span> . <span class=\"string\">'赋予$j+1'</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"=====\"</span>, <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var_dump(insertSort($arr));</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">1.外层循环是从数组中选出一个arr[i]将要插入到有序数组的数</div><div class=\"line\">2.内层循环是遍历已经排序好的数组，将arr[i]（也就是temp）依次与有序数组做对比，如果发现有序数组其中一个比准备插进来的arr[i]大，</div><div class=\"line\">那么谁比这个arr[i]大，谁就出去，把位置腾出去，当然比arr[i]大的这个数也不能扔，就给他放在已经排号序数组中且相对于</div><div class=\"line\">他的下一个索引就好了。</div><div class=\"line\">3.2还有个空档，这时候把temp补上就行了</div><div class=\"line\">*/</span></div><div class=\"line\">$arr = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span><span class=\"params\">($arr)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; count($arr); $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层&#123;$i&#125;='</span> . $i . <span class=\"string\">\"次循环\"</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        $temp = $arr[$i];<span class=\"comment\">//待插入的数</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层待插入的数为&#123;$temp&#125;='</span> . $temp . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> ($j = $i - <span class=\"number\">1</span>; $j &gt;= <span class=\"number\">0</span> &amp;&amp; $temp &gt; $arr[$j]; $j--)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'====&gt;内层&#123;$j&#125;='</span> . $j . <span class=\"string\">\"次循环\"</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'要插入的$temp'</span> . <span class=\"string\">\"=$temp \"</span> . <span class=\"string\">\"VS \"</span> . <span class=\"string\">'已经排序好的$arr[$j]='</span> . <span class=\"string\">\"$arr[$j]\"</span> . <span class=\"string\">\"小\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">            $arr[$j + <span class=\"number\">1</span>] = $arr[$j];</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'所以要腾出一个空来给temp,这时候索引$j的值为'</span>.$arr[$j].<span class=\"string\">'要往后靠，此时$j='</span> . $j, <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'外层&#123;$i&#125;='</span> . $i . <span class=\"string\">'次循环结束'</span>;</div><div class=\"line\">        <span class=\"comment\">// var_dump($temp,$arr[$i]);注意此处两值如果已经经历了内层循环，那么就！==</span></div><div class=\"line\">        $arr[$j + <span class=\"number\">1</span>] = $temp;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'  此时完成$j='</span> . $j . <span class=\"string\">'把temp的值'</span> . <span class=\"string\">\"$temp\"</span> . <span class=\"string\">'赋予$j+1'</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"=====\"</span>, <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var_dump(insertSort($arr));</div></pre></td></tr></table></figure>\n"},{"title":"在ubuntu上升级到PHP7","date":"2016-11-21T05:41:11.000Z","_content":"\n\n## 卸载旧版本php ##\n\n`apt-get autoremove php*`\n\n## 安装新源 ##\n\n```\napt-get install software-properties-common、\nadd-apt-repository ppa:ondrej/php\napt-get update\n```\n\n## 安装新版php ##\n\n <!-- more -->\n\n```\napt-get install php-common php-cli php-fpm php-mysql php-gd php-dev php-zip php-pear php-curl php-mbstring\n\n```\n\n## 一些命令及路径 ##\n\n\n`/etc/init.d/php7.0-fpm` 中的重启php7.0fpm命令\n\n```\nroot@lyh:/etc/init.d# /etc/init.d/php7.0-fpm status[start stop]\nphp7.0-fpm start/running, process 1704\n\n```\n\n\n- `/etc/php/7.0/fpm/php-fpm.conf`中的配置\n\n  `pid = /run/php/php7.0-fpm.pid`\n\n- `/etc/php/7.0/fpm/pool.d/www.conf`中的\n\n  `listen = /run/php/php7.0-fpm.sock`\n\n- `/etc/nginx/sites-enabled`中的yoursite.conf，和上面路径一致\n\n  `fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;`\n\n## PHP-v ##\n\n```\nroot@lyh:/etc/php/7.0/fpm# php -v\nPHP 7.0.13-1+deb.sury.org~trusty+1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.13-1+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies\n\n```\n","source":"_posts/php7-update-on-ubuntu.md","raw":"---\ntitle: 在ubuntu上升级到PHP7\ndate: 2016-11-21 13:41:11\ncategories: PHP\ntags:\n - PHP7\n - FPM\n - Ubuntu\n---\n\n\n## 卸载旧版本php ##\n\n`apt-get autoremove php*`\n\n## 安装新源 ##\n\n```\napt-get install software-properties-common、\nadd-apt-repository ppa:ondrej/php\napt-get update\n```\n\n## 安装新版php ##\n\n <!-- more -->\n\n```\napt-get install php-common php-cli php-fpm php-mysql php-gd php-dev php-zip php-pear php-curl php-mbstring\n\n```\n\n## 一些命令及路径 ##\n\n\n`/etc/init.d/php7.0-fpm` 中的重启php7.0fpm命令\n\n```\nroot@lyh:/etc/init.d# /etc/init.d/php7.0-fpm status[start stop]\nphp7.0-fpm start/running, process 1704\n\n```\n\n\n- `/etc/php/7.0/fpm/php-fpm.conf`中的配置\n\n  `pid = /run/php/php7.0-fpm.pid`\n\n- `/etc/php/7.0/fpm/pool.d/www.conf`中的\n\n  `listen = /run/php/php7.0-fpm.sock`\n\n- `/etc/nginx/sites-enabled`中的yoursite.conf，和上面路径一致\n\n  `fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;`\n\n## PHP-v ##\n\n```\nroot@lyh:/etc/php/7.0/fpm# php -v\nPHP 7.0.13-1+deb.sury.org~trusty+1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.13-1+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies\n\n```\n","slug":"php7-update-on-ubuntu","published":1,"updated":"2019-06-24T13:56:13.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nn001qnsgvjb1fofcs","content":"<h2 id=\"卸载旧版本php\"><a href=\"#卸载旧版本php\" class=\"headerlink\" title=\"卸载旧版本php\"></a>卸载旧版本php</h2><p><code>apt-get autoremove php*</code></p>\n<h2 id=\"安装新源\"><a href=\"#安装新源\" class=\"headerlink\" title=\"安装新源\"></a>安装新源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install software-properties-common、</div><div class=\"line\">add-apt-repository ppa:ondrej/php</div><div class=\"line\">apt-get update</div></pre></td></tr></table></figure>\n<h2 id=\"安装新版php\"><a href=\"#安装新版php\" class=\"headerlink\" title=\"安装新版php\"></a>安装新版php</h2> <a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php-common php-cli php-fpm php-mysql php-gd php-dev php-zip php-pear php-curl php-mbstring</div></pre></td></tr></table></figure>\n<h2 id=\"一些命令及路径\"><a href=\"#一些命令及路径\" class=\"headerlink\" title=\"一些命令及路径\"></a>一些命令及路径</h2><p><code>/etc/init.d/php7.0-fpm</code> 中的重启php7.0fpm命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@lyh:/etc/init.d# /etc/init.d/php7.0-fpm status[start stop]</div><div class=\"line\">php7.0-fpm start/running, process 1704</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>/etc/php/7.0/fpm/php-fpm.conf</code>中的配置</p>\n<p><code>pid = /run/php/php7.0-fpm.pid</code></p>\n</li>\n<li><p><code>/etc/php/7.0/fpm/pool.d/www.conf</code>中的</p>\n<p><code>listen = /run/php/php7.0-fpm.sock</code></p>\n</li>\n<li><p><code>/etc/nginx/sites-enabled</code>中的yoursite.conf，和上面路径一致</p>\n<p><code>fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</code></p>\n</li>\n</ul>\n<h2 id=\"PHP-v\"><a href=\"#PHP-v\" class=\"headerlink\" title=\"PHP-v\"></a>PHP-v</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@lyh:/etc/php/7.0/fpm# php -v</div><div class=\"line\">PHP 7.0.13-1+deb.sury.org~trusty+1 (cli) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2016 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies</div><div class=\"line\">    with Zend OPcache v7.0.13-1+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"卸载旧版本php\"><a href=\"#卸载旧版本php\" class=\"headerlink\" title=\"卸载旧版本php\"></a>卸载旧版本php</h2><p><code>apt-get autoremove php*</code></p>\n<h2 id=\"安装新源\"><a href=\"#安装新源\" class=\"headerlink\" title=\"安装新源\"></a>安装新源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install software-properties-common、</div><div class=\"line\">add-apt-repository ppa:ondrej/php</div><div class=\"line\">apt-get update</div></pre></td></tr></table></figure>\n<h2 id=\"安装新版php\"><a href=\"#安装新版php\" class=\"headerlink\" title=\"安装新版php\"></a>安装新版php</h2>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install php-common php-cli php-fpm php-mysql php-gd php-dev php-zip php-pear php-curl php-mbstring</div></pre></td></tr></table></figure>\n<h2 id=\"一些命令及路径\"><a href=\"#一些命令及路径\" class=\"headerlink\" title=\"一些命令及路径\"></a>一些命令及路径</h2><p><code>/etc/init.d/php7.0-fpm</code> 中的重启php7.0fpm命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@lyh:/etc/init.d# /etc/init.d/php7.0-fpm status[start stop]</div><div class=\"line\">php7.0-fpm start/running, process 1704</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>/etc/php/7.0/fpm/php-fpm.conf</code>中的配置</p>\n<p><code>pid = /run/php/php7.0-fpm.pid</code></p>\n</li>\n<li><p><code>/etc/php/7.0/fpm/pool.d/www.conf</code>中的</p>\n<p><code>listen = /run/php/php7.0-fpm.sock</code></p>\n</li>\n<li><p><code>/etc/nginx/sites-enabled</code>中的yoursite.conf，和上面路径一致</p>\n<p><code>fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</code></p>\n</li>\n</ul>\n<h2 id=\"PHP-v\"><a href=\"#PHP-v\" class=\"headerlink\" title=\"PHP-v\"></a>PHP-v</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@lyh:/etc/php/7.0/fpm# php -v</div><div class=\"line\">PHP 7.0.13-1+deb.sury.org~trusty+1 (cli) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2016 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies</div><div class=\"line\">    with Zend OPcache v7.0.13-1+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies</div></pre></td></tr></table></figure>"},{"title":"PHPSTORM中给一个方法动态添加注释","date":"2016-12-05T05:39:22.000Z","_content":"\n## 目的：在phpstorm中，动态的给一个方法添加注释 ##\n\n\n## 先添加一个动态模版【Live Templates】\n\n*ct==Crate Time*\n\n![添加动态模版][1]\n\n<!-- more -->\n\n[1]: /img/php/storm-1.jpg\n\n## 编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步\n![编辑动态模版][2]\n\n[2]: /img/php/storm-2.jpg\n\n## 最后在注释生成的部分加载这个动态模版\n\n![加载动态模版][3]\n\n[3]: /img/php/storm-3.jpg\n\n## EG\n\n```\n /**\n     * Desc:看房团热门路线推荐\n     * v4.1.7新增接口\n     * @Date&Time 2016-12-01 16:48\n     * User: TongBo\n     */\n```\n\n\n","source":"_posts/phpstorm-add-comment-in-function.md","raw":"---\ntitle: PHPSTORM中给一个方法动态添加注释\ndate: 2016-12-05 13:39:22\ncategories: PHP\ntags:\n - PHPSTORM\n - PHP\n - 编辑器\n---\n\n## 目的：在phpstorm中，动态的给一个方法添加注释 ##\n\n\n## 先添加一个动态模版【Live Templates】\n\n*ct==Crate Time*\n\n![添加动态模版][1]\n\n<!-- more -->\n\n[1]: /img/php/storm-1.jpg\n\n## 编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步\n![编辑动态模版][2]\n\n[2]: /img/php/storm-2.jpg\n\n## 最后在注释生成的部分加载这个动态模版\n\n![加载动态模版][3]\n\n[3]: /img/php/storm-3.jpg\n\n## EG\n\n```\n /**\n     * Desc:看房团热门路线推荐\n     * v4.1.7新增接口\n     * @Date&Time 2016-12-01 16:48\n     * User: TongBo\n     */\n```\n\n\n","slug":"phpstorm-add-comment-in-function","published":1,"updated":"2019-06-24T13:56:13.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35no001tnsgvkkgner0i","content":"<h2 id=\"目的：在phpstorm中，动态的给一个方法添加注释\"><a href=\"#目的：在phpstorm中，动态的给一个方法添加注释\" class=\"headerlink\" title=\"目的：在phpstorm中，动态的给一个方法添加注释\"></a>目的：在phpstorm中，动态的给一个方法添加注释</h2><h2 id=\"先添加一个动态模版【Live-Templates】\"><a href=\"#先添加一个动态模版【Live-Templates】\" class=\"headerlink\" title=\"先添加一个动态模版【Live Templates】\"></a>先添加一个动态模版【Live Templates】</h2><p><em>ct==Crate Time</em></p>\n<p><img src=\"/img/php/storm-1.jpg\" alt=\"添加动态模版\"></p>\n<a id=\"more\"></a>\n<h2 id=\"编辑这个动态模版【Live-Templates】，并应用（Application）到-PHP-Comments，可见图一第五步\"><a href=\"#编辑这个动态模版【Live-Templates】，并应用（Application）到-PHP-Comments，可见图一第五步\" class=\"headerlink\" title=\"编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步\"></a>编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步</h2><p><img src=\"/img/php/storm-2.jpg\" alt=\"编辑动态模版\"></p>\n<h2 id=\"最后在注释生成的部分加载这个动态模版\"><a href=\"#最后在注释生成的部分加载这个动态模版\" class=\"headerlink\" title=\"最后在注释生成的部分加载这个动态模版\"></a>最后在注释生成的部分加载这个动态模版</h2><p><img src=\"/img/php/storm-3.jpg\" alt=\"加载动态模版\"></p>\n<h2 id=\"EG\"><a href=\"#EG\" class=\"headerlink\" title=\"EG\"></a>EG</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * Desc:看房团热门路线推荐</div><div class=\"line\">    * v4.1.7新增接口</div><div class=\"line\">    * @Date&amp;Time 2016-12-01 16:48</div><div class=\"line\">    * User: TongBo</div><div class=\"line\">    */</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"目的：在phpstorm中，动态的给一个方法添加注释\"><a href=\"#目的：在phpstorm中，动态的给一个方法添加注释\" class=\"headerlink\" title=\"目的：在phpstorm中，动态的给一个方法添加注释\"></a>目的：在phpstorm中，动态的给一个方法添加注释</h2><h2 id=\"先添加一个动态模版【Live-Templates】\"><a href=\"#先添加一个动态模版【Live-Templates】\" class=\"headerlink\" title=\"先添加一个动态模版【Live Templates】\"></a>先添加一个动态模版【Live Templates】</h2><p><em>ct==Crate Time</em></p>\n<p><img src=\"/img/php/storm-1.jpg\" alt=\"添加动态模版\"></p>","more":"<h2 id=\"编辑这个动态模版【Live-Templates】，并应用（Application）到-PHP-Comments，可见图一第五步\"><a href=\"#编辑这个动态模版【Live-Templates】，并应用（Application）到-PHP-Comments，可见图一第五步\" class=\"headerlink\" title=\"编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步\"></a>编辑这个动态模版【Live Templates】，并应用（Application）到 PHP Comments，可见图一第五步</h2><p><img src=\"/img/php/storm-2.jpg\" alt=\"编辑动态模版\"></p>\n<h2 id=\"最后在注释生成的部分加载这个动态模版\"><a href=\"#最后在注释生成的部分加载这个动态模版\" class=\"headerlink\" title=\"最后在注释生成的部分加载这个动态模版\"></a>最后在注释生成的部分加载这个动态模版</h2><p><img src=\"/img/php/storm-3.jpg\" alt=\"加载动态模版\"></p>\n<h2 id=\"EG\"><a href=\"#EG\" class=\"headerlink\" title=\"EG\"></a>EG</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * Desc:看房团热门路线推荐</div><div class=\"line\">    * v4.1.7新增接口</div><div class=\"line\">    * @Date&amp;Time 2016-12-01 16:48</div><div class=\"line\">    * User: TongBo</div><div class=\"line\">    */</div></pre></td></tr></table></figure>"},{"title":"redis竟态与争抢唯一","date":"2017-11-22T13:12:03.000Z","_content":"\n\n\n## [incr][1]\n\n比如北京车牌采取先抢到后审批资质的流程。车牌池子中有N多号码，页面呈现以一页十条的方式展示，每个号码后有一个抢的按钮，且一个人只能抢一个车牌，同样一个车牌只能被一个人抢到。[业务模型参考][2]\n\n<!-- more -->\n```\n if ($this->redis_db->incr(\"bj_\".$car_no) != 1) {\n      让别人先下手了,点别的去~\n  }else{\n       //抢到竞态条件，如果不复核资质要求退出，并清除incr\n       if(抢到了但是没资质等){\n         释放对此id的竟态权，别占茅坑\n         $this->yredis_db->del(\"bj_\".$id);\n       }else{\n         其他业务A\n         抱得号码归...\n         其他业务B\n     }\n}\n```\n另外，`incr`对`string`类型，`hash`类型，`sortedSet`类型都可以进行操作\n\n## [blpop][3]\n\n`blpop`相对于lpop有一个好处，可以对多个队列进行优先级操作。\n`blpop`会按照`key`的排列顺序依次弹出，返回值为`key`的listname及具体元素值，而且可以设置`block`时间，原则是先阻塞先服务.\n\n```\n        $date = date('Ymd', time());\n        //左进左出 ，优先分配一般的车牌号码，然后在分配非常好的连号号码，设置一个阻塞时间\n        return $this->redis->blpop(self::$_config['dispatch_normal_list'] . $date, self::$_config['dispatch_better_list'] . $date, self::$_config['redis_block_l_pop_time_out']);\n\n```\n\n## [hsetnx][4]\n\n设置`hash`中一个`field`为指定`value`，前提是`field`不存在。如果存在，返回0。\n这样能保证在一个人只能抢一个车牌，但是抢到车牌执行付款或者其他业务操作过程中，其他人无法对此操作，（即不能将此车牌绑定到其他人身上）。根据具体业务情况，可设置基于car_no的hash field和基于 people 的hash field。\nhash_base_people {\"zhangsan\":\"京A888\",\"lisi\":\"京A999\"}\nhash_base_car_no {\"京A888\":\"zhangsan\",\"京A999\":\"lisi\"}\n基于这两个hash 可以做更多关于业务的操作,比如通过hget等查看具体的绑定关系。\n\n## [hdel][5]\n\n有了通过hsetnx的绑定模型，当某个人对某个车牌交付了订金等一系列之后，就代表可以永远的将其消除，这样会用到hdel。另外如果在指定时间内没有做比如交付订金之类的操作，这个车牌号码会回炉到原始列表中。\n\n```\n //删除以people_id为key的hash\n $base_people_id_del = $this->redis->hdel(self::$_config['hash_base_people'], $people_id);\n\n //删除以car_no为key的hash\n $base_car_no_del = $this->redis->hdel(self::$_config['hash_base_car_no'], $clue_id);\n```\n\n## [lpush][6]\n\n如果有入口将北京可以抢拍的车牌放入到一个list里\n\n```\n$lpush_res = $redisObj->lpush($list_name, $car_no);\n\n```\n\n其中list_name的值可以根据car_no的具体值来确定，比如有６和８的我就放入到`better_car_no`列表里，其他的放入到`normal_car_no`列表里，最后可以用`blpop`来指定一个先后优先级。\n\n## [rpoplpush][7]\n安全的队列弹出模式，比如N多人对一个入口按钮进行操作，如果list结构中有足够的数据，每个人有且只有一条数据会被领取，领取之后再做其他的业务操作。\n但是问题是，如果用`lpop`之后，原队列中已被弹出，如果中途客户端在取得该`pop`的元素后，且完成处理此元素前，客户端发生崩溃。这时候此条消息就凭空消失了。如果没有其他补助措施（比如通过绑定或者记录此弹出的元素）需要严谨要求，可以用`rpoplpus`h可以解决此问题。在客户端真正处理完此`pop`的元素之后，通过`lrem`将此消息安全删除。\n\n\n  [1]: http://redisdoc.com/string/incr.html\n  [2]: http://num.10010.com/NumApp/chseNumList/init?num=186\n  [3]: http://redisdoc.com/list/blpop.html\n  [4]: http://redisdoc.com/hash/hsetnx.html\n  [5]: http://redisdoc.com/hash/hdel.html\n  [6]: http://redisdoc.com/list/lpush.html\n  [7]: http://redisdoc.com/list/rpoplpush.html\n\n","source":"_posts/redis_incr_hash.md","raw":"---\ntitle: redis竟态与争抢唯一\ndate: 2017-11-22 21:12:03\ncategories: REDIS\ntags:\n- REDIS应用\n---\n\n\n\n## [incr][1]\n\n比如北京车牌采取先抢到后审批资质的流程。车牌池子中有N多号码，页面呈现以一页十条的方式展示，每个号码后有一个抢的按钮，且一个人只能抢一个车牌，同样一个车牌只能被一个人抢到。[业务模型参考][2]\n\n<!-- more -->\n```\n if ($this->redis_db->incr(\"bj_\".$car_no) != 1) {\n      让别人先下手了,点别的去~\n  }else{\n       //抢到竞态条件，如果不复核资质要求退出，并清除incr\n       if(抢到了但是没资质等){\n         释放对此id的竟态权，别占茅坑\n         $this->yredis_db->del(\"bj_\".$id);\n       }else{\n         其他业务A\n         抱得号码归...\n         其他业务B\n     }\n}\n```\n另外，`incr`对`string`类型，`hash`类型，`sortedSet`类型都可以进行操作\n\n## [blpop][3]\n\n`blpop`相对于lpop有一个好处，可以对多个队列进行优先级操作。\n`blpop`会按照`key`的排列顺序依次弹出，返回值为`key`的listname及具体元素值，而且可以设置`block`时间，原则是先阻塞先服务.\n\n```\n        $date = date('Ymd', time());\n        //左进左出 ，优先分配一般的车牌号码，然后在分配非常好的连号号码，设置一个阻塞时间\n        return $this->redis->blpop(self::$_config['dispatch_normal_list'] . $date, self::$_config['dispatch_better_list'] . $date, self::$_config['redis_block_l_pop_time_out']);\n\n```\n\n## [hsetnx][4]\n\n设置`hash`中一个`field`为指定`value`，前提是`field`不存在。如果存在，返回0。\n这样能保证在一个人只能抢一个车牌，但是抢到车牌执行付款或者其他业务操作过程中，其他人无法对此操作，（即不能将此车牌绑定到其他人身上）。根据具体业务情况，可设置基于car_no的hash field和基于 people 的hash field。\nhash_base_people {\"zhangsan\":\"京A888\",\"lisi\":\"京A999\"}\nhash_base_car_no {\"京A888\":\"zhangsan\",\"京A999\":\"lisi\"}\n基于这两个hash 可以做更多关于业务的操作,比如通过hget等查看具体的绑定关系。\n\n## [hdel][5]\n\n有了通过hsetnx的绑定模型，当某个人对某个车牌交付了订金等一系列之后，就代表可以永远的将其消除，这样会用到hdel。另外如果在指定时间内没有做比如交付订金之类的操作，这个车牌号码会回炉到原始列表中。\n\n```\n //删除以people_id为key的hash\n $base_people_id_del = $this->redis->hdel(self::$_config['hash_base_people'], $people_id);\n\n //删除以car_no为key的hash\n $base_car_no_del = $this->redis->hdel(self::$_config['hash_base_car_no'], $clue_id);\n```\n\n## [lpush][6]\n\n如果有入口将北京可以抢拍的车牌放入到一个list里\n\n```\n$lpush_res = $redisObj->lpush($list_name, $car_no);\n\n```\n\n其中list_name的值可以根据car_no的具体值来确定，比如有６和８的我就放入到`better_car_no`列表里，其他的放入到`normal_car_no`列表里，最后可以用`blpop`来指定一个先后优先级。\n\n## [rpoplpush][7]\n安全的队列弹出模式，比如N多人对一个入口按钮进行操作，如果list结构中有足够的数据，每个人有且只有一条数据会被领取，领取之后再做其他的业务操作。\n但是问题是，如果用`lpop`之后，原队列中已被弹出，如果中途客户端在取得该`pop`的元素后，且完成处理此元素前，客户端发生崩溃。这时候此条消息就凭空消失了。如果没有其他补助措施（比如通过绑定或者记录此弹出的元素）需要严谨要求，可以用`rpoplpus`h可以解决此问题。在客户端真正处理完此`pop`的元素之后，通过`lrem`将此消息安全删除。\n\n\n  [1]: http://redisdoc.com/string/incr.html\n  [2]: http://num.10010.com/NumApp/chseNumList/init?num=186\n  [3]: http://redisdoc.com/list/blpop.html\n  [4]: http://redisdoc.com/hash/hsetnx.html\n  [5]: http://redisdoc.com/hash/hdel.html\n  [6]: http://redisdoc.com/list/lpush.html\n  [7]: http://redisdoc.com/list/rpoplpush.html\n\n","slug":"redis_incr_hash","published":1,"updated":"2019-06-24T13:56:13.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nr001xnsgvi1ug90vx","content":"<h2 id=\"incr\"><a href=\"#incr\" class=\"headerlink\" title=\"incr\"></a><a href=\"http://redisdoc.com/string/incr.html\" target=\"_blank\" rel=\"external\">incr</a></h2><p>比如北京车牌采取先抢到后审批资质的流程。车牌池子中有N多号码，页面呈现以一页十条的方式展示，每个号码后有一个抢的按钮，且一个人只能抢一个车牌，同样一个车牌只能被一个人抢到。<a href=\"http://num.10010.com/NumApp/chseNumList/init?num=186\" target=\"_blank\" rel=\"external\">业务模型参考</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> if ($this-&gt;redis_db-&gt;incr(&quot;bj_&quot;.$car_no) != 1) &#123;</div><div class=\"line\">      让别人先下手了,点别的去~</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">       //抢到竞态条件，如果不复核资质要求退出，并清除incr</div><div class=\"line\">       if(抢到了但是没资质等)&#123;</div><div class=\"line\">         释放对此id的竟态权，别占茅坑</div><div class=\"line\">         $this-&gt;yredis_db-&gt;del(&quot;bj_&quot;.$id);</div><div class=\"line\">       &#125;else&#123;</div><div class=\"line\">         其他业务A</div><div class=\"line\">         抱得号码归...</div><div class=\"line\">         其他业务B</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，<code>incr</code>对<code>string</code>类型，<code>hash</code>类型，<code>sortedSet</code>类型都可以进行操作</p>\n<h2 id=\"blpop\"><a href=\"#blpop\" class=\"headerlink\" title=\"blpop\"></a><a href=\"http://redisdoc.com/list/blpop.html\" target=\"_blank\" rel=\"external\">blpop</a></h2><p><code>blpop</code>相对于lpop有一个好处，可以对多个队列进行优先级操作。<br><code>blpop</code>会按照<code>key</code>的排列顺序依次弹出，返回值为<code>key</code>的listname及具体元素值，而且可以设置<code>block</code>时间，原则是先阻塞先服务.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$date = date(&apos;Ymd&apos;, time());</div><div class=\"line\">//左进左出 ，优先分配一般的车牌号码，然后在分配非常好的连号号码，设置一个阻塞时间</div><div class=\"line\">return $this-&gt;redis-&gt;blpop(self::$_config[&apos;dispatch_normal_list&apos;] . $date, self::$_config[&apos;dispatch_better_list&apos;] . $date, self::$_config[&apos;redis_block_l_pop_time_out&apos;]);</div></pre></td></tr></table></figure>\n<h2 id=\"hsetnx\"><a href=\"#hsetnx\" class=\"headerlink\" title=\"hsetnx\"></a><a href=\"http://redisdoc.com/hash/hsetnx.html\" target=\"_blank\" rel=\"external\">hsetnx</a></h2><p>设置<code>hash</code>中一个<code>field</code>为指定<code>value</code>，前提是<code>field</code>不存在。如果存在，返回0。<br>这样能保证在一个人只能抢一个车牌，但是抢到车牌执行付款或者其他业务操作过程中，其他人无法对此操作，（即不能将此车牌绑定到其他人身上）。根据具体业务情况，可设置基于car_no的hash field和基于 people 的hash field。<br>hash_base_people {“zhangsan”:”京A888”,”lisi”:”京A999”}<br>hash_base_car_no {“京A888”:”zhangsan”,”京A999”:”lisi”}<br>基于这两个hash 可以做更多关于业务的操作,比如通过hget等查看具体的绑定关系。</p>\n<h2 id=\"hdel\"><a href=\"#hdel\" class=\"headerlink\" title=\"hdel\"></a><a href=\"http://redisdoc.com/hash/hdel.html\" target=\"_blank\" rel=\"external\">hdel</a></h2><p>有了通过hsetnx的绑定模型，当某个人对某个车牌交付了订金等一系列之后，就代表可以永远的将其消除，这样会用到hdel。另外如果在指定时间内没有做比如交付订金之类的操作，这个车牌号码会回炉到原始列表中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除以people_id为key的hash</div><div class=\"line\">$base_people_id_del = $this-&gt;redis-&gt;hdel(self::$_config[&apos;hash_base_people&apos;], $people_id);</div><div class=\"line\"></div><div class=\"line\">//删除以car_no为key的hash</div><div class=\"line\">$base_car_no_del = $this-&gt;redis-&gt;hdel(self::$_config[&apos;hash_base_car_no&apos;], $clue_id);</div></pre></td></tr></table></figure>\n<h2 id=\"lpush\"><a href=\"#lpush\" class=\"headerlink\" title=\"lpush\"></a><a href=\"http://redisdoc.com/list/lpush.html\" target=\"_blank\" rel=\"external\">lpush</a></h2><p>如果有入口将北京可以抢拍的车牌放入到一个list里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lpush_res = $redisObj-&gt;lpush($list_name, $car_no);</div></pre></td></tr></table></figure>\n<p>其中list_name的值可以根据car_no的具体值来确定，比如有６和８的我就放入到<code>better_car_no</code>列表里，其他的放入到<code>normal_car_no</code>列表里，最后可以用<code>blpop</code>来指定一个先后优先级。</p>\n<h2 id=\"rpoplpush\"><a href=\"#rpoplpush\" class=\"headerlink\" title=\"rpoplpush\"></a><a href=\"http://redisdoc.com/list/rpoplpush.html\" target=\"_blank\" rel=\"external\">rpoplpush</a></h2><p>安全的队列弹出模式，比如N多人对一个入口按钮进行操作，如果list结构中有足够的数据，每个人有且只有一条数据会被领取，领取之后再做其他的业务操作。<br>但是问题是，如果用<code>lpop</code>之后，原队列中已被弹出，如果中途客户端在取得该<code>pop</code>的元素后，且完成处理此元素前，客户端发生崩溃。这时候此条消息就凭空消失了。如果没有其他补助措施（比如通过绑定或者记录此弹出的元素）需要严谨要求，可以用<code>rpoplpus</code>h可以解决此问题。在客户端真正处理完此<code>pop</code>的元素之后，通过<code>lrem</code>将此消息安全删除。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"incr\"><a href=\"#incr\" class=\"headerlink\" title=\"incr\"></a><a href=\"http://redisdoc.com/string/incr.html\">incr</a></h2><p>比如北京车牌采取先抢到后审批资质的流程。车牌池子中有N多号码，页面呈现以一页十条的方式展示，每个号码后有一个抢的按钮，且一个人只能抢一个车牌，同样一个车牌只能被一个人抢到。<a href=\"http://num.10010.com/NumApp/chseNumList/init?num=186\">业务模型参考</a></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> if ($this-&gt;redis_db-&gt;incr(&quot;bj_&quot;.$car_no) != 1) &#123;</div><div class=\"line\">      让别人先下手了,点别的去~</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">       //抢到竞态条件，如果不复核资质要求退出，并清除incr</div><div class=\"line\">       if(抢到了但是没资质等)&#123;</div><div class=\"line\">         释放对此id的竟态权，别占茅坑</div><div class=\"line\">         $this-&gt;yredis_db-&gt;del(&quot;bj_&quot;.$id);</div><div class=\"line\">       &#125;else&#123;</div><div class=\"line\">         其他业务A</div><div class=\"line\">         抱得号码归...</div><div class=\"line\">         其他业务B</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，<code>incr</code>对<code>string</code>类型，<code>hash</code>类型，<code>sortedSet</code>类型都可以进行操作</p>\n<h2 id=\"blpop\"><a href=\"#blpop\" class=\"headerlink\" title=\"blpop\"></a><a href=\"http://redisdoc.com/list/blpop.html\">blpop</a></h2><p><code>blpop</code>相对于lpop有一个好处，可以对多个队列进行优先级操作。<br><code>blpop</code>会按照<code>key</code>的排列顺序依次弹出，返回值为<code>key</code>的listname及具体元素值，而且可以设置<code>block</code>时间，原则是先阻塞先服务.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$date = date(&apos;Ymd&apos;, time());</div><div class=\"line\">//左进左出 ，优先分配一般的车牌号码，然后在分配非常好的连号号码，设置一个阻塞时间</div><div class=\"line\">return $this-&gt;redis-&gt;blpop(self::$_config[&apos;dispatch_normal_list&apos;] . $date, self::$_config[&apos;dispatch_better_list&apos;] . $date, self::$_config[&apos;redis_block_l_pop_time_out&apos;]);</div></pre></td></tr></table></figure>\n<h2 id=\"hsetnx\"><a href=\"#hsetnx\" class=\"headerlink\" title=\"hsetnx\"></a><a href=\"http://redisdoc.com/hash/hsetnx.html\">hsetnx</a></h2><p>设置<code>hash</code>中一个<code>field</code>为指定<code>value</code>，前提是<code>field</code>不存在。如果存在，返回0。<br>这样能保证在一个人只能抢一个车牌，但是抢到车牌执行付款或者其他业务操作过程中，其他人无法对此操作，（即不能将此车牌绑定到其他人身上）。根据具体业务情况，可设置基于car_no的hash field和基于 people 的hash field。<br>hash_base_people {“zhangsan”:”京A888”,”lisi”:”京A999”}<br>hash_base_car_no {“京A888”:”zhangsan”,”京A999”:”lisi”}<br>基于这两个hash 可以做更多关于业务的操作,比如通过hget等查看具体的绑定关系。</p>\n<h2 id=\"hdel\"><a href=\"#hdel\" class=\"headerlink\" title=\"hdel\"></a><a href=\"http://redisdoc.com/hash/hdel.html\">hdel</a></h2><p>有了通过hsetnx的绑定模型，当某个人对某个车牌交付了订金等一系列之后，就代表可以永远的将其消除，这样会用到hdel。另外如果在指定时间内没有做比如交付订金之类的操作，这个车牌号码会回炉到原始列表中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除以people_id为key的hash</div><div class=\"line\">$base_people_id_del = $this-&gt;redis-&gt;hdel(self::$_config[&apos;hash_base_people&apos;], $people_id);</div><div class=\"line\"></div><div class=\"line\">//删除以car_no为key的hash</div><div class=\"line\">$base_car_no_del = $this-&gt;redis-&gt;hdel(self::$_config[&apos;hash_base_car_no&apos;], $clue_id);</div></pre></td></tr></table></figure>\n<h2 id=\"lpush\"><a href=\"#lpush\" class=\"headerlink\" title=\"lpush\"></a><a href=\"http://redisdoc.com/list/lpush.html\">lpush</a></h2><p>如果有入口将北京可以抢拍的车牌放入到一个list里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lpush_res = $redisObj-&gt;lpush($list_name, $car_no);</div></pre></td></tr></table></figure>\n<p>其中list_name的值可以根据car_no的具体值来确定，比如有６和８的我就放入到<code>better_car_no</code>列表里，其他的放入到<code>normal_car_no</code>列表里，最后可以用<code>blpop</code>来指定一个先后优先级。</p>\n<h2 id=\"rpoplpush\"><a href=\"#rpoplpush\" class=\"headerlink\" title=\"rpoplpush\"></a><a href=\"http://redisdoc.com/list/rpoplpush.html\">rpoplpush</a></h2><p>安全的队列弹出模式，比如N多人对一个入口按钮进行操作，如果list结构中有足够的数据，每个人有且只有一条数据会被领取，领取之后再做其他的业务操作。<br>但是问题是，如果用<code>lpop</code>之后，原队列中已被弹出，如果中途客户端在取得该<code>pop</code>的元素后，且完成处理此元素前，客户端发生崩溃。这时候此条消息就凭空消失了。如果没有其他补助措施（比如通过绑定或者记录此弹出的元素）需要严谨要求，可以用<code>rpoplpus</code>h可以解决此问题。在客户端真正处理完此<code>pop</code>的元素之后，通过<code>lrem</code>将此消息安全删除。</p>"},{"title":"此博客的'构造方法'","date":"2016-11-04T10:22:18.000Z","_content":"*其实这就是熟悉熟悉怎么用git，不建议一个仓库弄两个分支...*\n\nHEXO初始化\n-------\n\n暂设当前目录 iamtb，且github仓库A放hexo dynamic文件，仓库B放hexo static文件\n\n    npm install -g hexo\n\n    npm install hexo-deployer-git --save\n\n    hexo init iamtb\n\n 在iamtb文件夹下\n\n    hexo s\n\n\n来个NB的NEXT主题\n-----------\n\n在iamtb目录下载主题NEXT，\n\n<!-- more -->\n\n    git clone https://github.com/iissnan/hexo-theme-next themes/next\n\n修改基本主题配置，包括语言，page等，确保本地预览无误。\n\n[重点来了！！！]\n-------\n\n[重点来了！]必须**删除下载主题内的.git目录**，否则主题无法上传到A库，因为你自己下载的主题文件有.git控制文件夹。\n另外一定**修改.gitignore** ,把其中的`node_modules`和`db.json`，不要ignore，不要ignore，不要ignore。\n\n 意思就是你的`.ignore`文件是这样：\n\n    .DS_Store\n    Thumbs.db\n    *.log\n    public/\n    .deploy*/\n\n推到A仓库\n-----\n\n在github新建[A仓库][1]，把目前的这些文件都推到A库。参考以下命令\n\n      503  git status\n      504  git init\n      505  git status\n      506  git add *\n      507  git commit -m 'init hexo and next theme'\n      508  git status\n      509  git remote\n      510  git remote add origin https://github.com/tuber/tbhexo.git\n      511  git branch\n      512  git push\n      513  git push origin master\n\n建立yourname.github.io\n--------------------\n\ngithub建立[仓库B][2],建完后可一进入仓库setting进行初始化（Launch automatic page generator），保证访问`yourname.github.io`正常访问。\n\n\n\n本地config配置\n----------\n\n 目的就是执行`hexo d`的时候推到B仓库\n\n    deploy:\n      type: git\n      repo: https://github.com/tuber/tuber.github.io.git\n      branch: master\n      message: just static\n\n\n\n\n本地发布测试文章\n--------\n\n 如果网络慢可以在主题设置中禁用google字体\n\n    hexo new ‘001’\n\n    hexo new ‘002’\n\n    hexo new ‘003’\n\n    hexo g\n\n    git commit -am'add 3 post'\n\n    git push origin master #把本地master推到远程origin，此处为A仓库\n\n    hexo d #把生成静态文件推到B仓库\n\n完成80%了，如果换电脑了呢？\n-------\n\n 那我们由于之前都做好了准备，我们只需要在你需要的地方\n\n    git clone https://github.com/tuber/tbhexo.git，\n\n 这样你目录下就会新增了一个`tbhexo`文件夹\n\n进入thhexo目录，**不用init 不用init 不用init**\n\n    npm install hexo\n\n    npm install hexo-deployer-git\n\n然后还是先`hexo s` 启动一下，正常没问题\n\n 然后从tbhexo文件夹下，（就相当于你另外一台电脑了）\n随便创建几个文件：\n\n    hexo new add tbhexo 004\n    hexo new add tbhexo 005\n    hexo new add tbhexo 006\n\n可以参考以下命令\n\n\n\n      504  git status\n      505  git add *\n      506  git commit -m'add 3 posts and tow helloword posts in tbhexo'\n      507  git push origin master\n\n最后一步\n----\n\n`hexo d`\n\n\n完工。这样你在另外一台电脑上更新的文章也推到`yourname.github.io`上了。\n\n\n\n如此循环\n----\n\n只需要  `git pull origin master`更新\n\n`git push origin master` 上传即可。\n\n大问题：\n----\n\n目测他有一个默认文章hello word ，理论应该在第一个文章，但是经过此番折腾他跑到第三文章了。\n贴图：\n\n![图片描述][3]\n\nPostScript：备忘录\n----\n1. 第一步：应该先`git pull origin master` ，[`git branch` `git remore`查看]从远程拉一下分支到本地，保持同步。\n2. 第二步：`hexo new yourpost`，在本地文件夹下`source/`编辑`yourpost.md`\n3. 本地预览，然后，`hexo g` 生成对应文件如tags img等，确认格式文件无误，然后增加、提交`git add *`，`git status`，查看对应文件是否被捕捉完整\n4. 提交到本地 `git commit  -m 'add yourpost'`\n5. 提交到远程分支(这个分支是为了更换电脑后，文章等都没了的问题)，`git push origin master`\n6. 发布到你的对应io上，我的就是[tuber.github.io][4].这个是配置文件配的。注意与5的区别\n\n\n  [1]: https://github.com/tuber/tbhexo.git\n  [2]: http://tuber.github.io\n  [3]: /img/node/IAMTB.png\n  [4]: http://tuber.github.io\n","source":"_posts/post.md","raw":"---\ntitle: 此博客的'构造方法'\ndate: 2016-11-04 18:22:18\ncategories: node\ntags:\n - github.page\n - hexo\n - git\n - node\n---\n*其实这就是熟悉熟悉怎么用git，不建议一个仓库弄两个分支...*\n\nHEXO初始化\n-------\n\n暂设当前目录 iamtb，且github仓库A放hexo dynamic文件，仓库B放hexo static文件\n\n    npm install -g hexo\n\n    npm install hexo-deployer-git --save\n\n    hexo init iamtb\n\n 在iamtb文件夹下\n\n    hexo s\n\n\n来个NB的NEXT主题\n-----------\n\n在iamtb目录下载主题NEXT，\n\n<!-- more -->\n\n    git clone https://github.com/iissnan/hexo-theme-next themes/next\n\n修改基本主题配置，包括语言，page等，确保本地预览无误。\n\n[重点来了！！！]\n-------\n\n[重点来了！]必须**删除下载主题内的.git目录**，否则主题无法上传到A库，因为你自己下载的主题文件有.git控制文件夹。\n另外一定**修改.gitignore** ,把其中的`node_modules`和`db.json`，不要ignore，不要ignore，不要ignore。\n\n 意思就是你的`.ignore`文件是这样：\n\n    .DS_Store\n    Thumbs.db\n    *.log\n    public/\n    .deploy*/\n\n推到A仓库\n-----\n\n在github新建[A仓库][1]，把目前的这些文件都推到A库。参考以下命令\n\n      503  git status\n      504  git init\n      505  git status\n      506  git add *\n      507  git commit -m 'init hexo and next theme'\n      508  git status\n      509  git remote\n      510  git remote add origin https://github.com/tuber/tbhexo.git\n      511  git branch\n      512  git push\n      513  git push origin master\n\n建立yourname.github.io\n--------------------\n\ngithub建立[仓库B][2],建完后可一进入仓库setting进行初始化（Launch automatic page generator），保证访问`yourname.github.io`正常访问。\n\n\n\n本地config配置\n----------\n\n 目的就是执行`hexo d`的时候推到B仓库\n\n    deploy:\n      type: git\n      repo: https://github.com/tuber/tuber.github.io.git\n      branch: master\n      message: just static\n\n\n\n\n本地发布测试文章\n--------\n\n 如果网络慢可以在主题设置中禁用google字体\n\n    hexo new ‘001’\n\n    hexo new ‘002’\n\n    hexo new ‘003’\n\n    hexo g\n\n    git commit -am'add 3 post'\n\n    git push origin master #把本地master推到远程origin，此处为A仓库\n\n    hexo d #把生成静态文件推到B仓库\n\n完成80%了，如果换电脑了呢？\n-------\n\n 那我们由于之前都做好了准备，我们只需要在你需要的地方\n\n    git clone https://github.com/tuber/tbhexo.git，\n\n 这样你目录下就会新增了一个`tbhexo`文件夹\n\n进入thhexo目录，**不用init 不用init 不用init**\n\n    npm install hexo\n\n    npm install hexo-deployer-git\n\n然后还是先`hexo s` 启动一下，正常没问题\n\n 然后从tbhexo文件夹下，（就相当于你另外一台电脑了）\n随便创建几个文件：\n\n    hexo new add tbhexo 004\n    hexo new add tbhexo 005\n    hexo new add tbhexo 006\n\n可以参考以下命令\n\n\n\n      504  git status\n      505  git add *\n      506  git commit -m'add 3 posts and tow helloword posts in tbhexo'\n      507  git push origin master\n\n最后一步\n----\n\n`hexo d`\n\n\n完工。这样你在另外一台电脑上更新的文章也推到`yourname.github.io`上了。\n\n\n\n如此循环\n----\n\n只需要  `git pull origin master`更新\n\n`git push origin master` 上传即可。\n\n大问题：\n----\n\n目测他有一个默认文章hello word ，理论应该在第一个文章，但是经过此番折腾他跑到第三文章了。\n贴图：\n\n![图片描述][3]\n\nPostScript：备忘录\n----\n1. 第一步：应该先`git pull origin master` ，[`git branch` `git remore`查看]从远程拉一下分支到本地，保持同步。\n2. 第二步：`hexo new yourpost`，在本地文件夹下`source/`编辑`yourpost.md`\n3. 本地预览，然后，`hexo g` 生成对应文件如tags img等，确认格式文件无误，然后增加、提交`git add *`，`git status`，查看对应文件是否被捕捉完整\n4. 提交到本地 `git commit  -m 'add yourpost'`\n5. 提交到远程分支(这个分支是为了更换电脑后，文章等都没了的问题)，`git push origin master`\n6. 发布到你的对应io上，我的就是[tuber.github.io][4].这个是配置文件配的。注意与5的区别\n\n\n  [1]: https://github.com/tuber/tbhexo.git\n  [2]: http://tuber.github.io\n  [3]: /img/node/IAMTB.png\n  [4]: http://tuber.github.io\n","slug":"post","published":1,"updated":"2019-06-24T13:56:13.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nu001znsgvlkv5u073","content":"<p><em>其实这就是熟悉熟悉怎么用git，不建议一个仓库弄两个分支…</em></p>\n<h2 id=\"HEXO初始化\"><a href=\"#HEXO初始化\" class=\"headerlink\" title=\"HEXO初始化\"></a>HEXO初始化</h2><p>暂设当前目录 iamtb，且github仓库A放hexo dynamic文件，仓库B放hexo static文件</p>\n<pre><code>npm install -g hexo\n\nnpm install hexo-deployer-git --save\n\nhexo init iamtb\n</code></pre><p> 在iamtb文件夹下</p>\n<pre><code>hexo s\n</code></pre><h2 id=\"来个NB的NEXT主题\"><a href=\"#来个NB的NEXT主题\" class=\"headerlink\" title=\"来个NB的NEXT主题\"></a>来个NB的NEXT主题</h2><p>在iamtb目录下载主题NEXT，</p>\n<a id=\"more\"></a>\n<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next\n</code></pre><p>修改基本主题配置，包括语言，page等，确保本地预览无误。</p>\n<h2 id=\"重点来了！！！\"><a href=\"#重点来了！！！\" class=\"headerlink\" title=\"[重点来了！！！]\"></a>[重点来了！！！]</h2><p>[重点来了！]必须<strong>删除下载主题内的.git目录</strong>，否则主题无法上传到A库，因为你自己下载的主题文件有.git控制文件夹。<br>另外一定<strong>修改.gitignore</strong> ,把其中的<code>node_modules</code>和<code>db.json</code>，不要ignore，不要ignore，不要ignore。</p>\n<p> 意思就是你的<code>.ignore</code>文件是这样：</p>\n<pre><code>.DS_Store\nThumbs.db\n*.log\npublic/\n.deploy*/\n</code></pre><h2 id=\"推到A仓库\"><a href=\"#推到A仓库\" class=\"headerlink\" title=\"推到A仓库\"></a>推到A仓库</h2><p>在github新建<a href=\"https://github.com/tuber/tbhexo.git\" target=\"_blank\" rel=\"external\">A仓库</a>，把目前的这些文件都推到A库。参考以下命令</p>\n<pre><code>503  git status\n504  git init\n505  git status\n506  git add *\n507  git commit -m &apos;init hexo and next theme&apos;\n508  git status\n509  git remote\n510  git remote add origin https://github.com/tuber/tbhexo.git\n511  git branch\n512  git push\n513  git push origin master\n</code></pre><h2 id=\"建立yourname-github-io\"><a href=\"#建立yourname-github-io\" class=\"headerlink\" title=\"建立yourname.github.io\"></a>建立yourname.github.io</h2><p>github建立<a href=\"http://tuber.github.io\" target=\"_blank\" rel=\"external\">仓库B</a>,建完后可一进入仓库setting进行初始化（Launch automatic page generator），保证访问<code>yourname.github.io</code>正常访问。</p>\n<h2 id=\"本地config配置\"><a href=\"#本地config配置\" class=\"headerlink\" title=\"本地config配置\"></a>本地config配置</h2><p> 目的就是执行<code>hexo d</code>的时候推到B仓库</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/tuber/tuber.github.io.git\n  branch: master\n  message: just static\n</code></pre><h2 id=\"本地发布测试文章\"><a href=\"#本地发布测试文章\" class=\"headerlink\" title=\"本地发布测试文章\"></a>本地发布测试文章</h2><p> 如果网络慢可以在主题设置中禁用google字体</p>\n<pre><code>hexo new ‘001’\n\nhexo new ‘002’\n\nhexo new ‘003’\n\nhexo g\n\ngit commit -am&apos;add 3 post&apos;\n\ngit push origin master #把本地master推到远程origin，此处为A仓库\n\nhexo d #把生成静态文件推到B仓库\n</code></pre><h2 id=\"完成80-了，如果换电脑了呢？\"><a href=\"#完成80-了，如果换电脑了呢？\" class=\"headerlink\" title=\"完成80%了，如果换电脑了呢？\"></a>完成80%了，如果换电脑了呢？</h2><p> 那我们由于之前都做好了准备，我们只需要在你需要的地方</p>\n<pre><code>git clone https://github.com/tuber/tbhexo.git，\n</code></pre><p> 这样你目录下就会新增了一个<code>tbhexo</code>文件夹</p>\n<p>进入thhexo目录，<strong>不用init 不用init 不用init</strong></p>\n<pre><code>npm install hexo\n\nnpm install hexo-deployer-git\n</code></pre><p>然后还是先<code>hexo s</code> 启动一下，正常没问题</p>\n<p> 然后从tbhexo文件夹下，（就相当于你另外一台电脑了）<br>随便创建几个文件：</p>\n<pre><code>hexo new add tbhexo 004\nhexo new add tbhexo 005\nhexo new add tbhexo 006\n</code></pre><p>可以参考以下命令</p>\n<pre><code>504  git status\n505  git add *\n506  git commit -m&apos;add 3 posts and tow helloword posts in tbhexo&apos;\n507  git push origin master\n</code></pre><h2 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h2><p><code>hexo d</code></p>\n<p>完工。这样你在另外一台电脑上更新的文章也推到<code>yourname.github.io</code>上了。</p>\n<h2 id=\"如此循环\"><a href=\"#如此循环\" class=\"headerlink\" title=\"如此循环\"></a>如此循环</h2><p>只需要  <code>git pull origin master</code>更新</p>\n<p><code>git push origin master</code> 上传即可。</p>\n<h2 id=\"大问题：\"><a href=\"#大问题：\" class=\"headerlink\" title=\"大问题：\"></a>大问题：</h2><p>目测他有一个默认文章hello word ，理论应该在第一个文章，但是经过此番折腾他跑到第三文章了。<br>贴图：</p>\n<p><img src=\"/img/node/IAMTB.png\" alt=\"图片描述\"></p>\n<h2 id=\"PostScript：备忘录\"><a href=\"#PostScript：备忘录\" class=\"headerlink\" title=\"PostScript：备忘录\"></a>PostScript：备忘录</h2><ol>\n<li>第一步：应该先<code>git pull origin master</code> ，[<code>git branch</code> <code>git remore</code>查看]从远程拉一下分支到本地，保持同步。</li>\n<li>第二步：<code>hexo new yourpost</code>，在本地文件夹下<code>source/</code>编辑<code>yourpost.md</code></li>\n<li>本地预览，然后，<code>hexo g</code> 生成对应文件如tags img等，确认格式文件无误，然后增加、提交<code>git add *</code>，<code>git status</code>，查看对应文件是否被捕捉完整</li>\n<li>提交到本地 <code>git commit  -m &#39;add yourpost&#39;</code></li>\n<li>提交到远程分支(这个分支是为了更换电脑后，文章等都没了的问题)，<code>git push origin master</code></li>\n<li>发布到你的对应io上，我的就是<a href=\"http://tuber.github.io\" target=\"_blank\" rel=\"external\">tuber.github.io</a>.这个是配置文件配的。注意与5的区别</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><em>其实这就是熟悉熟悉怎么用git，不建议一个仓库弄两个分支…</em></p>\n<h2 id=\"HEXO初始化\"><a href=\"#HEXO初始化\" class=\"headerlink\" title=\"HEXO初始化\"></a>HEXO初始化</h2><p>暂设当前目录 iamtb，且github仓库A放hexo dynamic文件，仓库B放hexo static文件</p>\n<pre><code>npm install -g hexo\n\nnpm install hexo-deployer-git --save\n\nhexo init iamtb\n</code></pre><p> 在iamtb文件夹下</p>\n<pre><code>hexo s\n</code></pre><h2 id=\"来个NB的NEXT主题\"><a href=\"#来个NB的NEXT主题\" class=\"headerlink\" title=\"来个NB的NEXT主题\"></a>来个NB的NEXT主题</h2><p>在iamtb目录下载主题NEXT，</p>","more":"<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next\n</code></pre><p>修改基本主题配置，包括语言，page等，确保本地预览无误。</p>\n<h2 id=\"重点来了！！！\"><a href=\"#重点来了！！！\" class=\"headerlink\" title=\"[重点来了！！！]\"></a>[重点来了！！！]</h2><p>[重点来了！]必须<strong>删除下载主题内的.git目录</strong>，否则主题无法上传到A库，因为你自己下载的主题文件有.git控制文件夹。<br>另外一定<strong>修改.gitignore</strong> ,把其中的<code>node_modules</code>和<code>db.json</code>，不要ignore，不要ignore，不要ignore。</p>\n<p> 意思就是你的<code>.ignore</code>文件是这样：</p>\n<pre><code>.DS_Store\nThumbs.db\n*.log\npublic/\n.deploy*/\n</code></pre><h2 id=\"推到A仓库\"><a href=\"#推到A仓库\" class=\"headerlink\" title=\"推到A仓库\"></a>推到A仓库</h2><p>在github新建<a href=\"https://github.com/tuber/tbhexo.git\">A仓库</a>，把目前的这些文件都推到A库。参考以下命令</p>\n<pre><code>503  git status\n504  git init\n505  git status\n506  git add *\n507  git commit -m &apos;init hexo and next theme&apos;\n508  git status\n509  git remote\n510  git remote add origin https://github.com/tuber/tbhexo.git\n511  git branch\n512  git push\n513  git push origin master\n</code></pre><h2 id=\"建立yourname-github-io\"><a href=\"#建立yourname-github-io\" class=\"headerlink\" title=\"建立yourname.github.io\"></a>建立yourname.github.io</h2><p>github建立<a href=\"http://tuber.github.io\">仓库B</a>,建完后可一进入仓库setting进行初始化（Launch automatic page generator），保证访问<code>yourname.github.io</code>正常访问。</p>\n<h2 id=\"本地config配置\"><a href=\"#本地config配置\" class=\"headerlink\" title=\"本地config配置\"></a>本地config配置</h2><p> 目的就是执行<code>hexo d</code>的时候推到B仓库</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/tuber/tuber.github.io.git\n  branch: master\n  message: just static\n</code></pre><h2 id=\"本地发布测试文章\"><a href=\"#本地发布测试文章\" class=\"headerlink\" title=\"本地发布测试文章\"></a>本地发布测试文章</h2><p> 如果网络慢可以在主题设置中禁用google字体</p>\n<pre><code>hexo new ‘001’\n\nhexo new ‘002’\n\nhexo new ‘003’\n\nhexo g\n\ngit commit -am&apos;add 3 post&apos;\n\ngit push origin master #把本地master推到远程origin，此处为A仓库\n\nhexo d #把生成静态文件推到B仓库\n</code></pre><h2 id=\"完成80-了，如果换电脑了呢？\"><a href=\"#完成80-了，如果换电脑了呢？\" class=\"headerlink\" title=\"完成80%了，如果换电脑了呢？\"></a>完成80%了，如果换电脑了呢？</h2><p> 那我们由于之前都做好了准备，我们只需要在你需要的地方</p>\n<pre><code>git clone https://github.com/tuber/tbhexo.git，\n</code></pre><p> 这样你目录下就会新增了一个<code>tbhexo</code>文件夹</p>\n<p>进入thhexo目录，<strong>不用init 不用init 不用init</strong></p>\n<pre><code>npm install hexo\n\nnpm install hexo-deployer-git\n</code></pre><p>然后还是先<code>hexo s</code> 启动一下，正常没问题</p>\n<p> 然后从tbhexo文件夹下，（就相当于你另外一台电脑了）<br>随便创建几个文件：</p>\n<pre><code>hexo new add tbhexo 004\nhexo new add tbhexo 005\nhexo new add tbhexo 006\n</code></pre><p>可以参考以下命令</p>\n<pre><code>504  git status\n505  git add *\n506  git commit -m&apos;add 3 posts and tow helloword posts in tbhexo&apos;\n507  git push origin master\n</code></pre><h2 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h2><p><code>hexo d</code></p>\n<p>完工。这样你在另外一台电脑上更新的文章也推到<code>yourname.github.io</code>上了。</p>\n<h2 id=\"如此循环\"><a href=\"#如此循环\" class=\"headerlink\" title=\"如此循环\"></a>如此循环</h2><p>只需要  <code>git pull origin master</code>更新</p>\n<p><code>git push origin master</code> 上传即可。</p>\n<h2 id=\"大问题：\"><a href=\"#大问题：\" class=\"headerlink\" title=\"大问题：\"></a>大问题：</h2><p>目测他有一个默认文章hello word ，理论应该在第一个文章，但是经过此番折腾他跑到第三文章了。<br>贴图：</p>\n<p><img src=\"/img/node/IAMTB.png\" alt=\"图片描述\"></p>\n<h2 id=\"PostScript：备忘录\"><a href=\"#PostScript：备忘录\" class=\"headerlink\" title=\"PostScript：备忘录\"></a>PostScript：备忘录</h2><ol>\n<li>第一步：应该先<code>git pull origin master</code> ，[<code>git branch</code> <code>git remore</code>查看]从远程拉一下分支到本地，保持同步。</li>\n<li>第二步：<code>hexo new yourpost</code>，在本地文件夹下<code>source/</code>编辑<code>yourpost.md</code></li>\n<li>本地预览，然后，<code>hexo g</code> 生成对应文件如tags img等，确认格式文件无误，然后增加、提交<code>git add *</code>，<code>git status</code>，查看对应文件是否被捕捉完整</li>\n<li>提交到本地 <code>git commit  -m &#39;add yourpost&#39;</code></li>\n<li>提交到远程分支(这个分支是为了更换电脑后，文章等都没了的问题)，<code>git push origin master</code></li>\n<li>发布到你的对应io上，我的就是<a href=\"http://tuber.github.io\">tuber.github.io</a>.这个是配置文件配的。注意与5的区别</li>\n</ol>"},{"title":"根据当前日期算出N个工作日之后的日期","date":"2017-05-31T11:18:59.000Z","_content":"\n ### 需求：给定一个日期，要求算出N天（工作日）后的日期###\n-----------------\n <!-- more -->\n### 直接上代码 ###\n ```\n <?php\n//节假日 需要手动维护配置文件或者放入db中\n $holiday=[\n  '2017-04-29',\n    '2017-04-30',\n\n    '2017-05-01',\n    '2017-05-06',\n    '2017-05-07',\n    '2017-05-13',\n    '2017-05-14',\n    '2017-05-20',\n    '2017-05-21',\n    '2017-05-28',\n    '2017-05-29',\n    '2017-05-30',\n\n    '2017-06-03',\n    '2017-06-04',\n    '2017-06-10',\n    '2017-06-11',\n    '2017-06-17',\n    '2017-06-18',\n    '2017-06-24',\n    '2017-06-25',\n\n    '2017-07-01',\n    '2017-07-02',\n    '2017-07-08',\n    '2017-07-09',\n    '2017-07-15',\n    '2017-07-16',\n    '2017-07-22',\n    '2017-07-23',\n    '2017-07-29',\n    '2017-07-30',\n\n\n    '2017-08-05',\n    '2017-08-06',\n    '2017-08-12',\n    '2017-08-13',\n    '2017-08-19',\n    '2017-08-20',\n    '2017-08-26',\n    '2017-08-27',\n\n    '2017-09-02',\n    '2017-09-03',\n    '2017-09-09',\n    '2017-09-10',\n    '2017-09-16',\n    '2017-09-17',\n    '2017-09-23',\n    '2017-09-24',\n\n    '2017-10-01',\n    '2017-10-02',\n    '2017-10-03',\n    '2017-10-04',\n    '2017-10-05',\n    '2017-10-06',\n    '2017-10-07',\n    '2017-10-08',\n    '2017-10-14',\n    '2017-10-15',\n    '2017-10-21',\n    '2017-10-22',\n    '2017-10-28',\n    '2017-10-29',\n\n    '2017-11-04',\n    '2017-11-05',\n    '2017-11-11',\n    '2017-11-12',\n    '2017-11-18',\n    '2017-11-19',\n    '2017-11-25',\n    '2017-11-26',\n\n    '2017-12-02',\n    '2017-12-03',\n    '2017-12-09',\n    '2017-12-10',\n    '2017-12-16',\n    '2017-12-17',\n    '2017-12-23',\n    '2017-12-24',\n    '2017-12-30',\n    '2017-12-31',\n\n  //...\n  ];\n\n  function afterWorkDay($start_timestamp='',$add_workday_num='',$holiday=[]){\n\n     // 如果加天数的的时候遇到休假日，则代表需要额外增加的天数\n     $extra_day=0;\n\n     //已经实际增加的天数的数量\n     $workday_added_num=0;\n\n     for($i=1;$i<=$add_workday_num;$i++){\n\n          $detail_time=date('Y-m-d H:i:s',($start_timestamp)+$i*(60*60*24));\n\n          $workday_added_num++;\n\n          //只取宽泛的月日就好\n          $wide_date=date('Y-m-d',strtotime($detail_time));\n\n\n          // 如果其中一天在holiday中\n          if(in_array($wide_date, $holiday)){\n            //取消已经增加的天数，后面再继续加上\n            $workday_added_num--;\n\n           // 需要额外增加的天数\n            $extra_day++;\n\n           }\n           //如果加完之后的日期的下一天还是休息日，需要再次增加额外增加天数\n           $extra_judge=date(\"Y-m-d\",strtotime($wide_date)+86400);\n\n     }\n\n\n     //如果需要增加的天数与实际已经增加的天数不相等\n      if($add_workday_num!=$workday_added_num){\n\n       while (in_array($extra_judge, $holiday)) {\n\n          $extra_day++;\n\n          $extra_judge=date(\"Y-m-d\",strtotime($extra_judge)+86400);\n      }\n  }\n\n  //实际应增加总天数=已经增加天数+（应增加天数-已经增加天数）+额外需要增加天数\n   $add=$workday_added_num+($add_workday_num-$workday_added_num)+$extra_day;\n\n   return date('Y-m-d H:i:s',($start_timestamp)+$add*(60*60*24));\n\n    // $result_date=date('Y-m-d',($start_timestamp)+$add*(60*60*24));\n\n\n    // 如果这个结果也是在假期日内\n    // while (in_array($result_date, $holiday)) {\n    //    $result_date=date('Y-m-d',strtotime($result) +86400);\n    //    $result=date('Y-m-d H:i:s',strtotime($result) +86400);\n    // }\n }\n\n// xx发起时间 6月1日是周四，\n $time=mktime('13','30','56','06','01','2017');\n $start_timestamp=$time;\n // var_dump($start_timestamp);\n\n//计算两个工作日后的时间\n echo afterWorkDay($start_timestamp,2,$holiday);//out put 2017-06-05 13:30:56\n ```\n\n### [2017国务院放假权威安排][1] ###\n\n [1]: http://www.gov.cn/zhengce/content/2016-12/01/content_5141603.htm\n\n","source":"_posts/workday.md","raw":"---\ntitle: 根据当前日期算出N个工作日之后的日期\ndate: 2017-05-31 19:18:59\ncategories: PHP\ntags:\n - 工作日计算\n---\n\n ### 需求：给定一个日期，要求算出N天（工作日）后的日期###\n-----------------\n <!-- more -->\n### 直接上代码 ###\n ```\n <?php\n//节假日 需要手动维护配置文件或者放入db中\n $holiday=[\n  '2017-04-29',\n    '2017-04-30',\n\n    '2017-05-01',\n    '2017-05-06',\n    '2017-05-07',\n    '2017-05-13',\n    '2017-05-14',\n    '2017-05-20',\n    '2017-05-21',\n    '2017-05-28',\n    '2017-05-29',\n    '2017-05-30',\n\n    '2017-06-03',\n    '2017-06-04',\n    '2017-06-10',\n    '2017-06-11',\n    '2017-06-17',\n    '2017-06-18',\n    '2017-06-24',\n    '2017-06-25',\n\n    '2017-07-01',\n    '2017-07-02',\n    '2017-07-08',\n    '2017-07-09',\n    '2017-07-15',\n    '2017-07-16',\n    '2017-07-22',\n    '2017-07-23',\n    '2017-07-29',\n    '2017-07-30',\n\n\n    '2017-08-05',\n    '2017-08-06',\n    '2017-08-12',\n    '2017-08-13',\n    '2017-08-19',\n    '2017-08-20',\n    '2017-08-26',\n    '2017-08-27',\n\n    '2017-09-02',\n    '2017-09-03',\n    '2017-09-09',\n    '2017-09-10',\n    '2017-09-16',\n    '2017-09-17',\n    '2017-09-23',\n    '2017-09-24',\n\n    '2017-10-01',\n    '2017-10-02',\n    '2017-10-03',\n    '2017-10-04',\n    '2017-10-05',\n    '2017-10-06',\n    '2017-10-07',\n    '2017-10-08',\n    '2017-10-14',\n    '2017-10-15',\n    '2017-10-21',\n    '2017-10-22',\n    '2017-10-28',\n    '2017-10-29',\n\n    '2017-11-04',\n    '2017-11-05',\n    '2017-11-11',\n    '2017-11-12',\n    '2017-11-18',\n    '2017-11-19',\n    '2017-11-25',\n    '2017-11-26',\n\n    '2017-12-02',\n    '2017-12-03',\n    '2017-12-09',\n    '2017-12-10',\n    '2017-12-16',\n    '2017-12-17',\n    '2017-12-23',\n    '2017-12-24',\n    '2017-12-30',\n    '2017-12-31',\n\n  //...\n  ];\n\n  function afterWorkDay($start_timestamp='',$add_workday_num='',$holiday=[]){\n\n     // 如果加天数的的时候遇到休假日，则代表需要额外增加的天数\n     $extra_day=0;\n\n     //已经实际增加的天数的数量\n     $workday_added_num=0;\n\n     for($i=1;$i<=$add_workday_num;$i++){\n\n          $detail_time=date('Y-m-d H:i:s',($start_timestamp)+$i*(60*60*24));\n\n          $workday_added_num++;\n\n          //只取宽泛的月日就好\n          $wide_date=date('Y-m-d',strtotime($detail_time));\n\n\n          // 如果其中一天在holiday中\n          if(in_array($wide_date, $holiday)){\n            //取消已经增加的天数，后面再继续加上\n            $workday_added_num--;\n\n           // 需要额外增加的天数\n            $extra_day++;\n\n           }\n           //如果加完之后的日期的下一天还是休息日，需要再次增加额外增加天数\n           $extra_judge=date(\"Y-m-d\",strtotime($wide_date)+86400);\n\n     }\n\n\n     //如果需要增加的天数与实际已经增加的天数不相等\n      if($add_workday_num!=$workday_added_num){\n\n       while (in_array($extra_judge, $holiday)) {\n\n          $extra_day++;\n\n          $extra_judge=date(\"Y-m-d\",strtotime($extra_judge)+86400);\n      }\n  }\n\n  //实际应增加总天数=已经增加天数+（应增加天数-已经增加天数）+额外需要增加天数\n   $add=$workday_added_num+($add_workday_num-$workday_added_num)+$extra_day;\n\n   return date('Y-m-d H:i:s',($start_timestamp)+$add*(60*60*24));\n\n    // $result_date=date('Y-m-d',($start_timestamp)+$add*(60*60*24));\n\n\n    // 如果这个结果也是在假期日内\n    // while (in_array($result_date, $holiday)) {\n    //    $result_date=date('Y-m-d',strtotime($result) +86400);\n    //    $result=date('Y-m-d H:i:s',strtotime($result) +86400);\n    // }\n }\n\n// xx发起时间 6月1日是周四，\n $time=mktime('13','30','56','06','01','2017');\n $start_timestamp=$time;\n // var_dump($start_timestamp);\n\n//计算两个工作日后的时间\n echo afterWorkDay($start_timestamp,2,$holiday);//out put 2017-06-05 13:30:56\n ```\n\n### [2017国务院放假权威安排][1] ###\n\n [1]: http://www.gov.cn/zhengce/content/2016-12/01/content_5141603.htm\n\n","slug":"workday","published":1,"updated":"2019-06-24T13:56:13.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35nw0023nsgv58tjcjib","content":"<h3 id=\"需求：给定一个日期，要求算出N天（工作日）后的日期\"><a href=\"#需求：给定一个日期，要求算出N天（工作日）后的日期\" class=\"headerlink\" title=\"需求：给定一个日期，要求算出N天（工作日）后的日期\"></a>需求：给定一个日期，要求算出N天（工作日）后的日期</h3><hr>\n <a id=\"more\"></a>\n<h3 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;?php</div><div class=\"line\">//节假日 需要手动维护配置文件或者放入db中</div><div class=\"line\"> $holiday=[</div><div class=\"line\">  &apos;2017-04-29&apos;,</div><div class=\"line\">    &apos;2017-04-30&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-05-01&apos;,</div><div class=\"line\">    &apos;2017-05-06&apos;,</div><div class=\"line\">    &apos;2017-05-07&apos;,</div><div class=\"line\">    &apos;2017-05-13&apos;,</div><div class=\"line\">    &apos;2017-05-14&apos;,</div><div class=\"line\">    &apos;2017-05-20&apos;,</div><div class=\"line\">    &apos;2017-05-21&apos;,</div><div class=\"line\">    &apos;2017-05-28&apos;,</div><div class=\"line\">    &apos;2017-05-29&apos;,</div><div class=\"line\">    &apos;2017-05-30&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-06-03&apos;,</div><div class=\"line\">    &apos;2017-06-04&apos;,</div><div class=\"line\">    &apos;2017-06-10&apos;,</div><div class=\"line\">    &apos;2017-06-11&apos;,</div><div class=\"line\">    &apos;2017-06-17&apos;,</div><div class=\"line\">    &apos;2017-06-18&apos;,</div><div class=\"line\">    &apos;2017-06-24&apos;,</div><div class=\"line\">    &apos;2017-06-25&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-07-01&apos;,</div><div class=\"line\">    &apos;2017-07-02&apos;,</div><div class=\"line\">    &apos;2017-07-08&apos;,</div><div class=\"line\">    &apos;2017-07-09&apos;,</div><div class=\"line\">    &apos;2017-07-15&apos;,</div><div class=\"line\">    &apos;2017-07-16&apos;,</div><div class=\"line\">    &apos;2017-07-22&apos;,</div><div class=\"line\">    &apos;2017-07-23&apos;,</div><div class=\"line\">    &apos;2017-07-29&apos;,</div><div class=\"line\">    &apos;2017-07-30&apos;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &apos;2017-08-05&apos;,</div><div class=\"line\">    &apos;2017-08-06&apos;,</div><div class=\"line\">    &apos;2017-08-12&apos;,</div><div class=\"line\">    &apos;2017-08-13&apos;,</div><div class=\"line\">    &apos;2017-08-19&apos;,</div><div class=\"line\">    &apos;2017-08-20&apos;,</div><div class=\"line\">    &apos;2017-08-26&apos;,</div><div class=\"line\">    &apos;2017-08-27&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-09-02&apos;,</div><div class=\"line\">    &apos;2017-09-03&apos;,</div><div class=\"line\">    &apos;2017-09-09&apos;,</div><div class=\"line\">    &apos;2017-09-10&apos;,</div><div class=\"line\">    &apos;2017-09-16&apos;,</div><div class=\"line\">    &apos;2017-09-17&apos;,</div><div class=\"line\">    &apos;2017-09-23&apos;,</div><div class=\"line\">    &apos;2017-09-24&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-10-01&apos;,</div><div class=\"line\">    &apos;2017-10-02&apos;,</div><div class=\"line\">    &apos;2017-10-03&apos;,</div><div class=\"line\">    &apos;2017-10-04&apos;,</div><div class=\"line\">    &apos;2017-10-05&apos;,</div><div class=\"line\">    &apos;2017-10-06&apos;,</div><div class=\"line\">    &apos;2017-10-07&apos;,</div><div class=\"line\">    &apos;2017-10-08&apos;,</div><div class=\"line\">    &apos;2017-10-14&apos;,</div><div class=\"line\">    &apos;2017-10-15&apos;,</div><div class=\"line\">    &apos;2017-10-21&apos;,</div><div class=\"line\">    &apos;2017-10-22&apos;,</div><div class=\"line\">    &apos;2017-10-28&apos;,</div><div class=\"line\">    &apos;2017-10-29&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-11-04&apos;,</div><div class=\"line\">    &apos;2017-11-05&apos;,</div><div class=\"line\">    &apos;2017-11-11&apos;,</div><div class=\"line\">    &apos;2017-11-12&apos;,</div><div class=\"line\">    &apos;2017-11-18&apos;,</div><div class=\"line\">    &apos;2017-11-19&apos;,</div><div class=\"line\">    &apos;2017-11-25&apos;,</div><div class=\"line\">    &apos;2017-11-26&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-12-02&apos;,</div><div class=\"line\">    &apos;2017-12-03&apos;,</div><div class=\"line\">    &apos;2017-12-09&apos;,</div><div class=\"line\">    &apos;2017-12-10&apos;,</div><div class=\"line\">    &apos;2017-12-16&apos;,</div><div class=\"line\">    &apos;2017-12-17&apos;,</div><div class=\"line\">    &apos;2017-12-23&apos;,</div><div class=\"line\">    &apos;2017-12-24&apos;,</div><div class=\"line\">    &apos;2017-12-30&apos;,</div><div class=\"line\">    &apos;2017-12-31&apos;,</div><div class=\"line\"></div><div class=\"line\">  //...</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  function afterWorkDay($start_timestamp=&apos;&apos;,$add_workday_num=&apos;&apos;,$holiday=[])&#123;</div><div class=\"line\"></div><div class=\"line\">     // 如果加天数的的时候遇到休假日，则代表需要额外增加的天数</div><div class=\"line\">     $extra_day=0;</div><div class=\"line\"></div><div class=\"line\">     //已经实际增加的天数的数量</div><div class=\"line\">     $workday_added_num=0;</div><div class=\"line\"></div><div class=\"line\">     for($i=1;$i&lt;=$add_workday_num;$i++)&#123;</div><div class=\"line\"></div><div class=\"line\">          $detail_time=date(&apos;Y-m-d H:i:s&apos;,($start_timestamp)+$i*(60*60*24));</div><div class=\"line\"></div><div class=\"line\">          $workday_added_num++;</div><div class=\"line\"></div><div class=\"line\">          //只取宽泛的月日就好</div><div class=\"line\">          $wide_date=date(&apos;Y-m-d&apos;,strtotime($detail_time));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">          // 如果其中一天在holiday中</div><div class=\"line\">          if(in_array($wide_date, $holiday))&#123;</div><div class=\"line\">            //取消已经增加的天数，后面再继续加上</div><div class=\"line\">            $workday_added_num--;</div><div class=\"line\"></div><div class=\"line\">           // 需要额外增加的天数</div><div class=\"line\">            $extra_day++;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">           //如果加完之后的日期的下一天还是休息日，需要再次增加额外增加天数</div><div class=\"line\">           $extra_judge=date(&quot;Y-m-d&quot;,strtotime($wide_date)+86400);</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //如果需要增加的天数与实际已经增加的天数不相等</div><div class=\"line\">      if($add_workday_num!=$workday_added_num)&#123;</div><div class=\"line\"></div><div class=\"line\">       while (in_array($extra_judge, $holiday)) &#123;</div><div class=\"line\"></div><div class=\"line\">          $extra_day++;</div><div class=\"line\"></div><div class=\"line\">          $extra_judge=date(&quot;Y-m-d&quot;,strtotime($extra_judge)+86400);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //实际应增加总天数=已经增加天数+（应增加天数-已经增加天数）+额外需要增加天数</div><div class=\"line\">   $add=$workday_added_num+($add_workday_num-$workday_added_num)+$extra_day;</div><div class=\"line\"></div><div class=\"line\">   return date(&apos;Y-m-d H:i:s&apos;,($start_timestamp)+$add*(60*60*24));</div><div class=\"line\"></div><div class=\"line\">    // $result_date=date(&apos;Y-m-d&apos;,($start_timestamp)+$add*(60*60*24));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 如果这个结果也是在假期日内</div><div class=\"line\">    // while (in_array($result_date, $holiday)) &#123;</div><div class=\"line\">    //    $result_date=date(&apos;Y-m-d&apos;,strtotime($result) +86400);</div><div class=\"line\">    //    $result=date(&apos;Y-m-d H:i:s&apos;,strtotime($result) +86400);</div><div class=\"line\">    // &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">// xx发起时间 6月1日是周四，</div><div class=\"line\"> $time=mktime(&apos;13&apos;,&apos;30&apos;,&apos;56&apos;,&apos;06&apos;,&apos;01&apos;,&apos;2017&apos;);</div><div class=\"line\"> $start_timestamp=$time;</div><div class=\"line\"> // var_dump($start_timestamp);</div><div class=\"line\"></div><div class=\"line\">//计算两个工作日后的时间</div><div class=\"line\"> echo afterWorkDay($start_timestamp,2,$holiday);//out put 2017-06-05 13:30:56</div></pre></td></tr></table></figure>\n<h3 id=\"2017国务院放假权威安排\"><a href=\"#2017国务院放假权威安排\" class=\"headerlink\" title=\"2017国务院放假权威安排\"></a><a href=\"http://www.gov.cn/zhengce/content/2016-12/01/content_5141603.htm\" target=\"_blank\" rel=\"external\">2017国务院放假权威安排</a></h3>","site":{"data":{}},"excerpt":"<h3 id=\"需求：给定一个日期，要求算出N天（工作日）后的日期\"><a href=\"#需求：给定一个日期，要求算出N天（工作日）后的日期\" class=\"headerlink\" title=\"需求：给定一个日期，要求算出N天（工作日）后的日期\"></a>需求：给定一个日期，要求算出N天（工作日）后的日期</h3><hr>","more":"<h3 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;?php</div><div class=\"line\">//节假日 需要手动维护配置文件或者放入db中</div><div class=\"line\"> $holiday=[</div><div class=\"line\">  &apos;2017-04-29&apos;,</div><div class=\"line\">    &apos;2017-04-30&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-05-01&apos;,</div><div class=\"line\">    &apos;2017-05-06&apos;,</div><div class=\"line\">    &apos;2017-05-07&apos;,</div><div class=\"line\">    &apos;2017-05-13&apos;,</div><div class=\"line\">    &apos;2017-05-14&apos;,</div><div class=\"line\">    &apos;2017-05-20&apos;,</div><div class=\"line\">    &apos;2017-05-21&apos;,</div><div class=\"line\">    &apos;2017-05-28&apos;,</div><div class=\"line\">    &apos;2017-05-29&apos;,</div><div class=\"line\">    &apos;2017-05-30&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-06-03&apos;,</div><div class=\"line\">    &apos;2017-06-04&apos;,</div><div class=\"line\">    &apos;2017-06-10&apos;,</div><div class=\"line\">    &apos;2017-06-11&apos;,</div><div class=\"line\">    &apos;2017-06-17&apos;,</div><div class=\"line\">    &apos;2017-06-18&apos;,</div><div class=\"line\">    &apos;2017-06-24&apos;,</div><div class=\"line\">    &apos;2017-06-25&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-07-01&apos;,</div><div class=\"line\">    &apos;2017-07-02&apos;,</div><div class=\"line\">    &apos;2017-07-08&apos;,</div><div class=\"line\">    &apos;2017-07-09&apos;,</div><div class=\"line\">    &apos;2017-07-15&apos;,</div><div class=\"line\">    &apos;2017-07-16&apos;,</div><div class=\"line\">    &apos;2017-07-22&apos;,</div><div class=\"line\">    &apos;2017-07-23&apos;,</div><div class=\"line\">    &apos;2017-07-29&apos;,</div><div class=\"line\">    &apos;2017-07-30&apos;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &apos;2017-08-05&apos;,</div><div class=\"line\">    &apos;2017-08-06&apos;,</div><div class=\"line\">    &apos;2017-08-12&apos;,</div><div class=\"line\">    &apos;2017-08-13&apos;,</div><div class=\"line\">    &apos;2017-08-19&apos;,</div><div class=\"line\">    &apos;2017-08-20&apos;,</div><div class=\"line\">    &apos;2017-08-26&apos;,</div><div class=\"line\">    &apos;2017-08-27&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-09-02&apos;,</div><div class=\"line\">    &apos;2017-09-03&apos;,</div><div class=\"line\">    &apos;2017-09-09&apos;,</div><div class=\"line\">    &apos;2017-09-10&apos;,</div><div class=\"line\">    &apos;2017-09-16&apos;,</div><div class=\"line\">    &apos;2017-09-17&apos;,</div><div class=\"line\">    &apos;2017-09-23&apos;,</div><div class=\"line\">    &apos;2017-09-24&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-10-01&apos;,</div><div class=\"line\">    &apos;2017-10-02&apos;,</div><div class=\"line\">    &apos;2017-10-03&apos;,</div><div class=\"line\">    &apos;2017-10-04&apos;,</div><div class=\"line\">    &apos;2017-10-05&apos;,</div><div class=\"line\">    &apos;2017-10-06&apos;,</div><div class=\"line\">    &apos;2017-10-07&apos;,</div><div class=\"line\">    &apos;2017-10-08&apos;,</div><div class=\"line\">    &apos;2017-10-14&apos;,</div><div class=\"line\">    &apos;2017-10-15&apos;,</div><div class=\"line\">    &apos;2017-10-21&apos;,</div><div class=\"line\">    &apos;2017-10-22&apos;,</div><div class=\"line\">    &apos;2017-10-28&apos;,</div><div class=\"line\">    &apos;2017-10-29&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-11-04&apos;,</div><div class=\"line\">    &apos;2017-11-05&apos;,</div><div class=\"line\">    &apos;2017-11-11&apos;,</div><div class=\"line\">    &apos;2017-11-12&apos;,</div><div class=\"line\">    &apos;2017-11-18&apos;,</div><div class=\"line\">    &apos;2017-11-19&apos;,</div><div class=\"line\">    &apos;2017-11-25&apos;,</div><div class=\"line\">    &apos;2017-11-26&apos;,</div><div class=\"line\"></div><div class=\"line\">    &apos;2017-12-02&apos;,</div><div class=\"line\">    &apos;2017-12-03&apos;,</div><div class=\"line\">    &apos;2017-12-09&apos;,</div><div class=\"line\">    &apos;2017-12-10&apos;,</div><div class=\"line\">    &apos;2017-12-16&apos;,</div><div class=\"line\">    &apos;2017-12-17&apos;,</div><div class=\"line\">    &apos;2017-12-23&apos;,</div><div class=\"line\">    &apos;2017-12-24&apos;,</div><div class=\"line\">    &apos;2017-12-30&apos;,</div><div class=\"line\">    &apos;2017-12-31&apos;,</div><div class=\"line\"></div><div class=\"line\">  //...</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  function afterWorkDay($start_timestamp=&apos;&apos;,$add_workday_num=&apos;&apos;,$holiday=[])&#123;</div><div class=\"line\"></div><div class=\"line\">     // 如果加天数的的时候遇到休假日，则代表需要额外增加的天数</div><div class=\"line\">     $extra_day=0;</div><div class=\"line\"></div><div class=\"line\">     //已经实际增加的天数的数量</div><div class=\"line\">     $workday_added_num=0;</div><div class=\"line\"></div><div class=\"line\">     for($i=1;$i&lt;=$add_workday_num;$i++)&#123;</div><div class=\"line\"></div><div class=\"line\">          $detail_time=date(&apos;Y-m-d H:i:s&apos;,($start_timestamp)+$i*(60*60*24));</div><div class=\"line\"></div><div class=\"line\">          $workday_added_num++;</div><div class=\"line\"></div><div class=\"line\">          //只取宽泛的月日就好</div><div class=\"line\">          $wide_date=date(&apos;Y-m-d&apos;,strtotime($detail_time));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">          // 如果其中一天在holiday中</div><div class=\"line\">          if(in_array($wide_date, $holiday))&#123;</div><div class=\"line\">            //取消已经增加的天数，后面再继续加上</div><div class=\"line\">            $workday_added_num--;</div><div class=\"line\"></div><div class=\"line\">           // 需要额外增加的天数</div><div class=\"line\">            $extra_day++;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">           //如果加完之后的日期的下一天还是休息日，需要再次增加额外增加天数</div><div class=\"line\">           $extra_judge=date(&quot;Y-m-d&quot;,strtotime($wide_date)+86400);</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //如果需要增加的天数与实际已经增加的天数不相等</div><div class=\"line\">      if($add_workday_num!=$workday_added_num)&#123;</div><div class=\"line\"></div><div class=\"line\">       while (in_array($extra_judge, $holiday)) &#123;</div><div class=\"line\"></div><div class=\"line\">          $extra_day++;</div><div class=\"line\"></div><div class=\"line\">          $extra_judge=date(&quot;Y-m-d&quot;,strtotime($extra_judge)+86400);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //实际应增加总天数=已经增加天数+（应增加天数-已经增加天数）+额外需要增加天数</div><div class=\"line\">   $add=$workday_added_num+($add_workday_num-$workday_added_num)+$extra_day;</div><div class=\"line\"></div><div class=\"line\">   return date(&apos;Y-m-d H:i:s&apos;,($start_timestamp)+$add*(60*60*24));</div><div class=\"line\"></div><div class=\"line\">    // $result_date=date(&apos;Y-m-d&apos;,($start_timestamp)+$add*(60*60*24));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 如果这个结果也是在假期日内</div><div class=\"line\">    // while (in_array($result_date, $holiday)) &#123;</div><div class=\"line\">    //    $result_date=date(&apos;Y-m-d&apos;,strtotime($result) +86400);</div><div class=\"line\">    //    $result=date(&apos;Y-m-d H:i:s&apos;,strtotime($result) +86400);</div><div class=\"line\">    // &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">// xx发起时间 6月1日是周四，</div><div class=\"line\"> $time=mktime(&apos;13&apos;,&apos;30&apos;,&apos;56&apos;,&apos;06&apos;,&apos;01&apos;,&apos;2017&apos;);</div><div class=\"line\"> $start_timestamp=$time;</div><div class=\"line\"> // var_dump($start_timestamp);</div><div class=\"line\"></div><div class=\"line\">//计算两个工作日后的时间</div><div class=\"line\"> echo afterWorkDay($start_timestamp,2,$holiday);//out put 2017-06-05 13:30:56</div></pre></td></tr></table></figure>\n<h3 id=\"2017国务院放假权威安排\"><a href=\"#2017国务院放假权威安排\" class=\"headerlink\" title=\"2017国务院放假权威安排\"></a><a href=\"http://www.gov.cn/zhengce/content/2016-12/01/content_5141603.htm\">2017国务院放假权威安排</a></h3>"},{"title":"kafka基本概念应用场景高级特性等","date":"2016-11-11T01:22:03.000Z","_content":"\n\n## 大纲\n- 基本概念\n- 消息结构\n- kafka特点及应用场景\n- java code demo\n- 高级特性\n    - 事务\n    - 零拷贝\n- more...\n<!-- more -->\n## 2-1 来源及作用\n1. 来源：linkedin开源：a distributed streamed platform\n- databus\n- cubrect\n- parseq\n- kafka\n stream platform has three key capabilities\n\n2. 特性\n- 消息队列 mq\n- 数据存储 db\n- 流处理   stream  \n- 构建实时流管道，实时处理数据流 real time & transform react\n\n3.面向于数据流的生产、消费、存储、处理\n\n## 3-1 基本概念\n### 物理概念（服务器|| 硬件|| 载体...）\n\n### 逻辑概念（策略 逻辑...）\n\n1. producer   \n消息和数据的生产者，向一个topic发送消息的\n- 进程\n- 代码\n- 服务\n2. consumer  \n消息和数据的消费者，订阅数据topic并且处理器发布的消息的\n- 进程\n- 代码\n- 服务\n3. consumer group 逻辑概念\n消费组，针对同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。\n4. broker 物理概念\nkafka集群节点之一，\n5. topic 逻辑概念\nkafka消息的类别，对数据进行分类 区分 隔离\n6. partition 物理概念\nkafka下数据存储的基本单元，一个topic会被分散处理存储到多个partition，每个partition是有序的，但是每个topic无法保证有序。\n7. replication\n同一个partition可能会有多个raplica，多个replica之间数据时一样的\n8. replication leader\n多个replication副本之间需要一个且只有一个leader major负责该partition与producer和consumer交互，其他的replication是副本，只负责同步数据。\n9. replica manager\n负责管理当前broler所有分区和副本的信息，处理kafka controller 发起的请求，副本状态的切换 ，添加 读取消息等，选举出一个replication leader\n\n\n## 3-2更多的kafka基本概念\n1. partition\n- 每个topic被切分称多个partitions\n- 消费者的数目小于或者等于partiton的数目\n每一个消费者会消费一个partition，如果消费者数目大于partition的数量，会出现一个partition被多个消费者消费\n- broker group中的每一个broker保存topic的一个或多个partition，注意区别对待consumer group，同一个partion不会被保存在相同的broker上。如果partion非常大，可以用多个broker保存，而不是说一个partition被保存了多份在一个broker上。\n- comsumer group中仅有一个consumer 读取topic的一个或者多个partion，并且是唯一的consumer，一个partition只能被这一个consumer消费，可以参考第二条\n- 为什么要有consumer group\n为了容错，group有容错机制?\n为了提高性能？后续再讲\n- replication 副本\n当集群中有broker挂了，partition ，系统可以主动使replications提供服务，系统默认每个topic的replication系数为1，可以在创建topic时单独设置\n- replication\n基本特点是topic的partition\n所有的读和写都从followers，follower必须能够及时复制leader数据\n增加容错性和可扩展性\n## 3-3 kafka基本结构\n![image][1]  \n数据从productor流向consumer，\nkafka暴露四个接口 \n- connectors api\n- stream processors api\n- producer api\n- consumer api\n![image][2]\nkafka强依赖于zp，broker信息、topic、partition的分布\n应用包括：\n- hadoop\n- 实时监控\n- 数据仓库\n- 其他...\n![image][3]  \n- offset 当前消息所处的偏移量 4字节\n- length 当前消息整体长度 4字节\n- crc32 校验当前消息完整性 4字节\n- magic 分布式系统一般都设计为这个字段，固定的一个字段。可以快速的判定是不是kafka的消息。如果不是，则扔掉，不需要经过校验等动作\n- attributes 放置当前消息属性 1字节 枚举值\n- timestamp  消费时间戳 8字节\n- key length  4字节\n-  value 无限制\n- value length 4字节\n-  value 无限制\n\n\n## 3-4 kafka特点\n- 分布式\n    - 多分区 partition\n    - 多副本 replication\n    - 多订阅者 \n      topic可以有一个或者多个订阅者，每一个订阅者只能有一个partition\n    - 基于zookeeper调度\n- 高性能\n    - 高吞吐量 几十万/s\n    - 低延迟 \n    - 高并发\n    - 时间复杂度o（1）\n    - \n- 持久性和扩展性\n    - 数据可持久化\n    - 容错性 按组消费 多副本 \n    - 支持在线水平扩展 增加新机器就可以放topic和partion\n    - 消息自动平衡 consumer group 避免消息过于集中在某几台服务器，在服务端和消费者两端自动平衡，怎么实现的？\n    \n## 3.5 应用环节\n1. 消息队列 分区、副本、持久化、稳定、重复消费、低延迟...\n2. 行为跟踪 发布订阅模式的扩展应用 在线或者离线应用\n3. 元信息监控 运维数据监控\n4. 日志收集 elk flume ，kafka可以让日志活起来，低延迟，支持更多的数据源和消费者，脱离以文件为中心的日志收集\n5. 流处理 收集上游 处理在下游 对一个topic多次处理后再次处理，分段式链路流处理 \n6. 事件源 记录状态转移序列 回溯事件变更 存储日志 动态汇总\n7. 持久性日志 commit log 日志压缩 通过对日志回溯，\n\n## 3.5 kafka简单案例\n1. 环境启动\n - 下载zookeeper\n - kafka下载\n - 解压、环境变量、配置文件...\n - zookeeper-server-start\n - bin/kafka/-topics --create -- zookeeper 127.0.0.1:2181 --replication-factor 1 --partition s 3 --topic imooc-kafka-topic\n - bin/kafka-topics --list --zookeeper 127.0.0.1:2121\n - 隐藏分区 __consumer_offsets \n - 启动producer /bin/kafka-console-producer --broker-list\n - 启动消费者 /bin/kafka-console-comsumer --bootstrap-server 127.0.0.1:9002 --topic imooc-kafka-topic --from-beginning \n - \n2. 简单生产者\n3. 简单消费者\n\n## 4-3 kafka代码案例\n基于java spring boot\njava代码真的挺有意思的，比php的好看 有艺术多了\n\n## 5-1 kafuka高级特性-消息事务\n1. 为什么要支持事务\n - 要支持读取-处理-写入模式 ，要保证数据一致性\n - 流处理需求的增加增强\n - 需要更准确的数据处理结果\n2. 数据传输事务的定义\n- 最多一次：消息不会被重复发送，最多被传输一次，但也可能一次也不传输\n- 最少一次：消息不会被漏发，最少被传输一次，但可能重复传输。但最好消息方最好幂等操作\n- 精确的一次 exactly once：不会漏也不会重复，仅仅一次，最优美。不会丢失，不会重复。\n\n3. 事务保证\n- 内部重试问题 \n procedure 幂等处理（自身已经处理好）\n- 多分区原子写入\n读取 -处理-写入 如何实现原子性？\n![image][4]  \n也就是说如何保证成功消费（从topic 1）并且发布（到topic2）\nX为偏移量，会被标记成已消费，并写入到一个内部的kafka的topic（offset topic），记录office commit，此时认为被成功消费（已经提交了偏移量）\n- 事务保证-避免僵尸实例\n    - 每个事务producer分配一个transactional.id,在进程重新启动时能够识别相同的producer实例\n    - kafka增加一个与transactional.id的epoch（时期），存储每个transactionalid内部元数据\n    - 一旦epoch被触发，任何具有相同transactionalid和更旧的epoch的producer被视为僵尸，kafka会拒绝来自这些来自procedure的后续事务性写入\n    - \n## 5-2 kafka高级特性之零拷贝\n1. nginx rocketmq netty kafka都具有实现了这种技术\n- 网络传输持久性日志块（生产和消费的消息）\n- java nio channel.transforTo方法\n- linux sendfile 系统调用\n2. 文件传输到网络的公共数据路径\n    1.操作系统将数据从磁盘读入到内核空间的页缓存\n    2. 应用程序将程序从内核空间读入到用户空间内存中\n    3. 应用程序将数据写回到内核空间的socket缓存中\n    4. 操作系统将数据从socket缓冲区复制到网卡缓冲区，以便将数据从网络发出\n    5. 以上为4次拷贝，才能从磁盘到达网卡\n3. 零拷贝过程\n    1. 操作系统将数据从磁盘读入到内核空间的页缓存\n    2. 将数据的位置和长度的信息的描述符增加至内核空间的socket缓冲区中\n    3. 操作系统将数据从内核拷贝到网卡缓冲区，以便将数据从网卡发出\n    4. 此处的零拷贝指的是内核空间和用户空间的交互拷贝为0\n4. 文件传输到网络的公共数据路径的演变   \n从  \n\n![image][5]  \n\n    1. CPU发指令给I/O设备的DMA，由DMA将我们磁盘中的数据传输到内核空间的内核buffer。\n    2. 第二阶段触发我们的CPU中断，CPU开始将将数据从kernel buffer拷贝至我们的应用缓存\n    3. CPU将数据从应用缓存拷贝到内核中的socket buffer.\n    4. DMA将数据从socket buffer中的数据拷贝到网卡缓存。 \n    \n改为NIO  \n\n![image][6]\n\n    1. 调用sendfie(),CPU下发指令叫DMA将磁盘数据拷贝到内核buffer中。\n    \n    2. DMA拷贝完成发出中断请求，进行CPU拷贝，拷贝到socketbuffer中，sendFile调用完成返回。 3.DMA将socket buffer拷贝至网卡buffer。\n\n6. 补充-零贝定义：\n> 在计算机在网络上发送文件时候，不需要将文件内容拷贝到用户空间（user space） 而直接在内核空间 （kernel space ）中传输到网络的形式。\n> \n> \n>  \n>  \n> [1]: /img/kafka/kafka_basic_construct.png\n  [2]: /img/kafka/kafka_basic_2.png\n  [3]: /img/kafka/kafka_message.png\n  [4]: /img/kafka/kafka_constancepng.png\n  [5]: /img/kafka/no_zero_copy.png\n  [6]: /img/kafka/zero_copy.png\n\n\n\n \n\n","source":"_posts/kafka-basic-from-imooc.md","raw":"---\ntitle: kafka基本概念应用场景高级特性等\ndate: 2016-11-11 09:22:03\ncategories: kafka\ntags:\n - kafka\n - 消息队列\n - 流处理\n---\n\n\n## 大纲\n- 基本概念\n- 消息结构\n- kafka特点及应用场景\n- java code demo\n- 高级特性\n    - 事务\n    - 零拷贝\n- more...\n<!-- more -->\n## 2-1 来源及作用\n1. 来源：linkedin开源：a distributed streamed platform\n- databus\n- cubrect\n- parseq\n- kafka\n stream platform has three key capabilities\n\n2. 特性\n- 消息队列 mq\n- 数据存储 db\n- 流处理   stream  \n- 构建实时流管道，实时处理数据流 real time & transform react\n\n3.面向于数据流的生产、消费、存储、处理\n\n## 3-1 基本概念\n### 物理概念（服务器|| 硬件|| 载体...）\n\n### 逻辑概念（策略 逻辑...）\n\n1. producer   \n消息和数据的生产者，向一个topic发送消息的\n- 进程\n- 代码\n- 服务\n2. consumer  \n消息和数据的消费者，订阅数据topic并且处理器发布的消息的\n- 进程\n- 代码\n- 服务\n3. consumer group 逻辑概念\n消费组，针对同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。\n4. broker 物理概念\nkafka集群节点之一，\n5. topic 逻辑概念\nkafka消息的类别，对数据进行分类 区分 隔离\n6. partition 物理概念\nkafka下数据存储的基本单元，一个topic会被分散处理存储到多个partition，每个partition是有序的，但是每个topic无法保证有序。\n7. replication\n同一个partition可能会有多个raplica，多个replica之间数据时一样的\n8. replication leader\n多个replication副本之间需要一个且只有一个leader major负责该partition与producer和consumer交互，其他的replication是副本，只负责同步数据。\n9. replica manager\n负责管理当前broler所有分区和副本的信息，处理kafka controller 发起的请求，副本状态的切换 ，添加 读取消息等，选举出一个replication leader\n\n\n## 3-2更多的kafka基本概念\n1. partition\n- 每个topic被切分称多个partitions\n- 消费者的数目小于或者等于partiton的数目\n每一个消费者会消费一个partition，如果消费者数目大于partition的数量，会出现一个partition被多个消费者消费\n- broker group中的每一个broker保存topic的一个或多个partition，注意区别对待consumer group，同一个partion不会被保存在相同的broker上。如果partion非常大，可以用多个broker保存，而不是说一个partition被保存了多份在一个broker上。\n- comsumer group中仅有一个consumer 读取topic的一个或者多个partion，并且是唯一的consumer，一个partition只能被这一个consumer消费，可以参考第二条\n- 为什么要有consumer group\n为了容错，group有容错机制?\n为了提高性能？后续再讲\n- replication 副本\n当集群中有broker挂了，partition ，系统可以主动使replications提供服务，系统默认每个topic的replication系数为1，可以在创建topic时单独设置\n- replication\n基本特点是topic的partition\n所有的读和写都从followers，follower必须能够及时复制leader数据\n增加容错性和可扩展性\n## 3-3 kafka基本结构\n![image][1]  \n数据从productor流向consumer，\nkafka暴露四个接口 \n- connectors api\n- stream processors api\n- producer api\n- consumer api\n![image][2]\nkafka强依赖于zp，broker信息、topic、partition的分布\n应用包括：\n- hadoop\n- 实时监控\n- 数据仓库\n- 其他...\n![image][3]  \n- offset 当前消息所处的偏移量 4字节\n- length 当前消息整体长度 4字节\n- crc32 校验当前消息完整性 4字节\n- magic 分布式系统一般都设计为这个字段，固定的一个字段。可以快速的判定是不是kafka的消息。如果不是，则扔掉，不需要经过校验等动作\n- attributes 放置当前消息属性 1字节 枚举值\n- timestamp  消费时间戳 8字节\n- key length  4字节\n-  value 无限制\n- value length 4字节\n-  value 无限制\n\n\n## 3-4 kafka特点\n- 分布式\n    - 多分区 partition\n    - 多副本 replication\n    - 多订阅者 \n      topic可以有一个或者多个订阅者，每一个订阅者只能有一个partition\n    - 基于zookeeper调度\n- 高性能\n    - 高吞吐量 几十万/s\n    - 低延迟 \n    - 高并发\n    - 时间复杂度o（1）\n    - \n- 持久性和扩展性\n    - 数据可持久化\n    - 容错性 按组消费 多副本 \n    - 支持在线水平扩展 增加新机器就可以放topic和partion\n    - 消息自动平衡 consumer group 避免消息过于集中在某几台服务器，在服务端和消费者两端自动平衡，怎么实现的？\n    \n## 3.5 应用环节\n1. 消息队列 分区、副本、持久化、稳定、重复消费、低延迟...\n2. 行为跟踪 发布订阅模式的扩展应用 在线或者离线应用\n3. 元信息监控 运维数据监控\n4. 日志收集 elk flume ，kafka可以让日志活起来，低延迟，支持更多的数据源和消费者，脱离以文件为中心的日志收集\n5. 流处理 收集上游 处理在下游 对一个topic多次处理后再次处理，分段式链路流处理 \n6. 事件源 记录状态转移序列 回溯事件变更 存储日志 动态汇总\n7. 持久性日志 commit log 日志压缩 通过对日志回溯，\n\n## 3.5 kafka简单案例\n1. 环境启动\n - 下载zookeeper\n - kafka下载\n - 解压、环境变量、配置文件...\n - zookeeper-server-start\n - bin/kafka/-topics --create -- zookeeper 127.0.0.1:2181 --replication-factor 1 --partition s 3 --topic imooc-kafka-topic\n - bin/kafka-topics --list --zookeeper 127.0.0.1:2121\n - 隐藏分区 __consumer_offsets \n - 启动producer /bin/kafka-console-producer --broker-list\n - 启动消费者 /bin/kafka-console-comsumer --bootstrap-server 127.0.0.1:9002 --topic imooc-kafka-topic --from-beginning \n - \n2. 简单生产者\n3. 简单消费者\n\n## 4-3 kafka代码案例\n基于java spring boot\njava代码真的挺有意思的，比php的好看 有艺术多了\n\n## 5-1 kafuka高级特性-消息事务\n1. 为什么要支持事务\n - 要支持读取-处理-写入模式 ，要保证数据一致性\n - 流处理需求的增加增强\n - 需要更准确的数据处理结果\n2. 数据传输事务的定义\n- 最多一次：消息不会被重复发送，最多被传输一次，但也可能一次也不传输\n- 最少一次：消息不会被漏发，最少被传输一次，但可能重复传输。但最好消息方最好幂等操作\n- 精确的一次 exactly once：不会漏也不会重复，仅仅一次，最优美。不会丢失，不会重复。\n\n3. 事务保证\n- 内部重试问题 \n procedure 幂等处理（自身已经处理好）\n- 多分区原子写入\n读取 -处理-写入 如何实现原子性？\n![image][4]  \n也就是说如何保证成功消费（从topic 1）并且发布（到topic2）\nX为偏移量，会被标记成已消费，并写入到一个内部的kafka的topic（offset topic），记录office commit，此时认为被成功消费（已经提交了偏移量）\n- 事务保证-避免僵尸实例\n    - 每个事务producer分配一个transactional.id,在进程重新启动时能够识别相同的producer实例\n    - kafka增加一个与transactional.id的epoch（时期），存储每个transactionalid内部元数据\n    - 一旦epoch被触发，任何具有相同transactionalid和更旧的epoch的producer被视为僵尸，kafka会拒绝来自这些来自procedure的后续事务性写入\n    - \n## 5-2 kafka高级特性之零拷贝\n1. nginx rocketmq netty kafka都具有实现了这种技术\n- 网络传输持久性日志块（生产和消费的消息）\n- java nio channel.transforTo方法\n- linux sendfile 系统调用\n2. 文件传输到网络的公共数据路径\n    1.操作系统将数据从磁盘读入到内核空间的页缓存\n    2. 应用程序将程序从内核空间读入到用户空间内存中\n    3. 应用程序将数据写回到内核空间的socket缓存中\n    4. 操作系统将数据从socket缓冲区复制到网卡缓冲区，以便将数据从网络发出\n    5. 以上为4次拷贝，才能从磁盘到达网卡\n3. 零拷贝过程\n    1. 操作系统将数据从磁盘读入到内核空间的页缓存\n    2. 将数据的位置和长度的信息的描述符增加至内核空间的socket缓冲区中\n    3. 操作系统将数据从内核拷贝到网卡缓冲区，以便将数据从网卡发出\n    4. 此处的零拷贝指的是内核空间和用户空间的交互拷贝为0\n4. 文件传输到网络的公共数据路径的演变   \n从  \n\n![image][5]  \n\n    1. CPU发指令给I/O设备的DMA，由DMA将我们磁盘中的数据传输到内核空间的内核buffer。\n    2. 第二阶段触发我们的CPU中断，CPU开始将将数据从kernel buffer拷贝至我们的应用缓存\n    3. CPU将数据从应用缓存拷贝到内核中的socket buffer.\n    4. DMA将数据从socket buffer中的数据拷贝到网卡缓存。 \n    \n改为NIO  \n\n![image][6]\n\n    1. 调用sendfie(),CPU下发指令叫DMA将磁盘数据拷贝到内核buffer中。\n    \n    2. DMA拷贝完成发出中断请求，进行CPU拷贝，拷贝到socketbuffer中，sendFile调用完成返回。 3.DMA将socket buffer拷贝至网卡buffer。\n\n6. 补充-零贝定义：\n> 在计算机在网络上发送文件时候，不需要将文件内容拷贝到用户空间（user space） 而直接在内核空间 （kernel space ）中传输到网络的形式。\n> \n> \n>  \n>  \n> [1]: /img/kafka/kafka_basic_construct.png\n  [2]: /img/kafka/kafka_basic_2.png\n  [3]: /img/kafka/kafka_message.png\n  [4]: /img/kafka/kafka_constancepng.png\n  [5]: /img/kafka/no_zero_copy.png\n  [6]: /img/kafka/zero_copy.png\n\n\n\n \n\n","slug":"kafka-basic-from-imooc","published":1,"updated":"2019-06-24T13:56:13.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35u1004ynsgv88dp2jrk","content":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>基本概念</li>\n<li>消息结构</li>\n<li>kafka特点及应用场景</li>\n<li>java code demo</li>\n<li>高级特性<ul>\n<li>事务</li>\n<li>零拷贝</li>\n</ul>\n</li>\n<li>more…<a id=\"more\"></a>\n<h2 id=\"2-1-来源及作用\"><a href=\"#2-1-来源及作用\" class=\"headerlink\" title=\"2-1 来源及作用\"></a>2-1 来源及作用</h2></li>\n</ul>\n<ol>\n<li>来源：linkedin开源：a distributed streamed platform</li>\n</ol>\n<ul>\n<li>databus</li>\n<li>cubrect</li>\n<li>parseq</li>\n<li>kafka<br>stream platform has three key capabilities</li>\n</ul>\n<ol>\n<li>特性</li>\n</ol>\n<ul>\n<li>消息队列 mq</li>\n<li>数据存储 db</li>\n<li>流处理   stream  </li>\n<li>构建实时流管道，实时处理数据流 real time &amp; transform react</li>\n</ul>\n<p>3.面向于数据流的生产、消费、存储、处理</p>\n<h2 id=\"3-1-基本概念\"><a href=\"#3-1-基本概念\" class=\"headerlink\" title=\"3-1 基本概念\"></a>3-1 基本概念</h2><h3 id=\"物理概念（服务器-硬件-载体…）\"><a href=\"#物理概念（服务器-硬件-载体…）\" class=\"headerlink\" title=\"物理概念（服务器|| 硬件|| 载体…）\"></a>物理概念（服务器|| 硬件|| 载体…）</h3><h3 id=\"逻辑概念（策略-逻辑…）\"><a href=\"#逻辑概念（策略-逻辑…）\" class=\"headerlink\" title=\"逻辑概念（策略 逻辑…）\"></a>逻辑概念（策略 逻辑…）</h3><ol>\n<li>producer<br>消息和数据的生产者，向一个topic发送消息的</li>\n</ol>\n<ul>\n<li>进程</li>\n<li>代码</li>\n<li>服务</li>\n</ul>\n<ol>\n<li>consumer<br>消息和数据的消费者，订阅数据topic并且处理器发布的消息的</li>\n</ol>\n<ul>\n<li>进程</li>\n<li>代码</li>\n<li>服务</li>\n</ul>\n<ol>\n<li>consumer group 逻辑概念<br>消费组，针对同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。</li>\n<li>broker 物理概念<br>kafka集群节点之一，</li>\n<li>topic 逻辑概念<br>kafka消息的类别，对数据进行分类 区分 隔离</li>\n<li>partition 物理概念<br>kafka下数据存储的基本单元，一个topic会被分散处理存储到多个partition，每个partition是有序的，但是每个topic无法保证有序。</li>\n<li>replication<br>同一个partition可能会有多个raplica，多个replica之间数据时一样的</li>\n<li>replication leader<br>多个replication副本之间需要一个且只有一个leader major负责该partition与producer和consumer交互，其他的replication是副本，只负责同步数据。</li>\n<li>replica manager<br>负责管理当前broler所有分区和副本的信息，处理kafka controller 发起的请求，副本状态的切换 ，添加 读取消息等，选举出一个replication leader</li>\n</ol>\n<h2 id=\"3-2更多的kafka基本概念\"><a href=\"#3-2更多的kafka基本概念\" class=\"headerlink\" title=\"3-2更多的kafka基本概念\"></a>3-2更多的kafka基本概念</h2><ol>\n<li>partition</li>\n</ol>\n<ul>\n<li>每个topic被切分称多个partitions</li>\n<li>消费者的数目小于或者等于partiton的数目<br>每一个消费者会消费一个partition，如果消费者数目大于partition的数量，会出现一个partition被多个消费者消费</li>\n<li>broker group中的每一个broker保存topic的一个或多个partition，注意区别对待consumer group，同一个partion不会被保存在相同的broker上。如果partion非常大，可以用多个broker保存，而不是说一个partition被保存了多份在一个broker上。</li>\n<li>comsumer group中仅有一个consumer 读取topic的一个或者多个partion，并且是唯一的consumer，一个partition只能被这一个consumer消费，可以参考第二条</li>\n<li>为什么要有consumer group<br>为了容错，group有容错机制?<br>为了提高性能？后续再讲</li>\n<li>replication 副本<br>当集群中有broker挂了，partition ，系统可以主动使replications提供服务，系统默认每个topic的replication系数为1，可以在创建topic时单独设置</li>\n<li>replication<br>基本特点是topic的partition<br>所有的读和写都从followers，follower必须能够及时复制leader数据<br>增加容错性和可扩展性<h2 id=\"3-3-kafka基本结构\"><a href=\"#3-3-kafka基本结构\" class=\"headerlink\" title=\"3-3 kafka基本结构\"></a>3-3 kafka基本结构</h2>![image][1]<br>数据从productor流向consumer，<br>kafka暴露四个接口 </li>\n<li>connectors api</li>\n<li>stream processors api</li>\n<li>producer api</li>\n<li>consumer api<br><img src=\"/img/kafka/kafka_basic_2.png\" alt=\"image\"><br>kafka强依赖于zp，broker信息、topic、partition的分布<br>应用包括：</li>\n<li>hadoop</li>\n<li>实时监控</li>\n<li>数据仓库</li>\n<li>其他…<br><img src=\"/img/kafka/kafka_message.png\" alt=\"image\">  </li>\n<li>offset 当前消息所处的偏移量 4字节</li>\n<li>length 当前消息整体长度 4字节</li>\n<li>crc32 校验当前消息完整性 4字节</li>\n<li>magic 分布式系统一般都设计为这个字段，固定的一个字段。可以快速的判定是不是kafka的消息。如果不是，则扔掉，不需要经过校验等动作</li>\n<li>attributes 放置当前消息属性 1字节 枚举值</li>\n<li>timestamp  消费时间戳 8字节</li>\n<li>key length  4字节</li>\n<li>value 无限制</li>\n<li>value length 4字节</li>\n<li>value 无限制</li>\n</ul>\n<h2 id=\"3-4-kafka特点\"><a href=\"#3-4-kafka特点\" class=\"headerlink\" title=\"3-4 kafka特点\"></a>3-4 kafka特点</h2><ul>\n<li>分布式<ul>\n<li>多分区 partition</li>\n<li>多副本 replication</li>\n<li>多订阅者<br>topic可以有一个或者多个订阅者，每一个订阅者只能有一个partition</li>\n<li>基于zookeeper调度</li>\n</ul>\n</li>\n<li>高性能<ul>\n<li>高吞吐量 几十万/s</li>\n<li>低延迟 </li>\n<li>高并发</li>\n<li>时间复杂度o（1）</li>\n<li></li>\n</ul>\n</li>\n<li>持久性和扩展性<ul>\n<li>数据可持久化</li>\n<li>容错性 按组消费 多副本 </li>\n<li>支持在线水平扩展 增加新机器就可以放topic和partion</li>\n<li>消息自动平衡 consumer group 避免消息过于集中在某几台服务器，在服务端和消费者两端自动平衡，怎么实现的？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-5-应用环节\"><a href=\"#3-5-应用环节\" class=\"headerlink\" title=\"3.5 应用环节\"></a>3.5 应用环节</h2><ol>\n<li>消息队列 分区、副本、持久化、稳定、重复消费、低延迟…</li>\n<li>行为跟踪 发布订阅模式的扩展应用 在线或者离线应用</li>\n<li>元信息监控 运维数据监控</li>\n<li>日志收集 elk flume ，kafka可以让日志活起来，低延迟，支持更多的数据源和消费者，脱离以文件为中心的日志收集</li>\n<li>流处理 收集上游 处理在下游 对一个topic多次处理后再次处理，分段式链路流处理 </li>\n<li>事件源 记录状态转移序列 回溯事件变更 存储日志 动态汇总</li>\n<li>持久性日志 commit log 日志压缩 通过对日志回溯，</li>\n</ol>\n<h2 id=\"3-5-kafka简单案例\"><a href=\"#3-5-kafka简单案例\" class=\"headerlink\" title=\"3.5 kafka简单案例\"></a>3.5 kafka简单案例</h2><ol>\n<li>环境启动<ul>\n<li>下载zookeeper</li>\n<li>kafka下载</li>\n<li>解压、环境变量、配置文件…</li>\n<li>zookeeper-server-start</li>\n<li>bin/kafka/-topics –create – zookeeper 127.0.0.1:2181 –replication-factor 1 –partition s 3 –topic imooc-kafka-topic</li>\n<li>bin/kafka-topics –list –zookeeper 127.0.0.1:2121</li>\n<li>隐藏分区 __consumer_offsets </li>\n<li>启动producer /bin/kafka-console-producer –broker-list</li>\n<li>启动消费者 /bin/kafka-console-comsumer –bootstrap-server 127.0.0.1:9002 –topic imooc-kafka-topic –from-beginning </li>\n<li></li>\n</ul>\n</li>\n<li>简单生产者</li>\n<li>简单消费者</li>\n</ol>\n<h2 id=\"4-3-kafka代码案例\"><a href=\"#4-3-kafka代码案例\" class=\"headerlink\" title=\"4-3 kafka代码案例\"></a>4-3 kafka代码案例</h2><p>基于java spring boot<br>java代码真的挺有意思的，比php的好看 有艺术多了</p>\n<h2 id=\"5-1-kafuka高级特性-消息事务\"><a href=\"#5-1-kafuka高级特性-消息事务\" class=\"headerlink\" title=\"5-1 kafuka高级特性-消息事务\"></a>5-1 kafuka高级特性-消息事务</h2><ol>\n<li>为什么要支持事务<ul>\n<li>要支持读取-处理-写入模式 ，要保证数据一致性</li>\n<li>流处理需求的增加增强</li>\n<li>需要更准确的数据处理结果</li>\n</ul>\n</li>\n<li>数据传输事务的定义</li>\n</ol>\n<ul>\n<li>最多一次：消息不会被重复发送，最多被传输一次，但也可能一次也不传输</li>\n<li>最少一次：消息不会被漏发，最少被传输一次，但可能重复传输。但最好消息方最好幂等操作</li>\n<li>精确的一次 exactly once：不会漏也不会重复，仅仅一次，最优美。不会丢失，不会重复。</li>\n</ul>\n<ol>\n<li>事务保证</li>\n</ol>\n<ul>\n<li>内部重试问题<br>procedure 幂等处理（自身已经处理好）</li>\n<li>多分区原子写入<br>读取 -处理-写入 如何实现原子性？<br><img src=\"/img/kafka/kafka_constancepng.png\" alt=\"image\"><br>也就是说如何保证成功消费（从topic 1）并且发布（到topic2）<br>X为偏移量，会被标记成已消费，并写入到一个内部的kafka的topic（offset topic），记录office commit，此时认为被成功消费（已经提交了偏移量）</li>\n<li>事务保证-避免僵尸实例<ul>\n<li>每个事务producer分配一个transactional.id,在进程重新启动时能够识别相同的producer实例</li>\n<li>kafka增加一个与transactional.id的epoch（时期），存储每个transactionalid内部元数据</li>\n<li>一旦epoch被触发，任何具有相同transactionalid和更旧的epoch的producer被视为僵尸，kafka会拒绝来自这些来自procedure的后续事务性写入</li>\n<li><h2 id=\"5-2-kafka高级特性之零拷贝\"><a href=\"#5-2-kafka高级特性之零拷贝\" class=\"headerlink\" title=\"5-2 kafka高级特性之零拷贝\"></a>5-2 kafka高级特性之零拷贝</h2></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>nginx rocketmq netty kafka都具有实现了这种技术</li>\n</ol>\n<ul>\n<li>网络传输持久性日志块（生产和消费的消息）</li>\n<li>java nio channel.transforTo方法</li>\n<li>linux sendfile 系统调用</li>\n</ul>\n<ol>\n<li>文件传输到网络的公共数据路径<br> 1.操作系统将数据从磁盘读入到内核空间的页缓存<ol>\n<li>应用程序将程序从内核空间读入到用户空间内存中</li>\n<li>应用程序将数据写回到内核空间的socket缓存中</li>\n<li>操作系统将数据从socket缓冲区复制到网卡缓冲区，以便将数据从网络发出</li>\n<li>以上为4次拷贝，才能从磁盘到达网卡</li>\n</ol>\n</li>\n<li>零拷贝过程<ol>\n<li>操作系统将数据从磁盘读入到内核空间的页缓存</li>\n<li>将数据的位置和长度的信息的描述符增加至内核空间的socket缓冲区中</li>\n<li>操作系统将数据从内核拷贝到网卡缓冲区，以便将数据从网卡发出</li>\n<li>此处的零拷贝指的是内核空间和用户空间的交互拷贝为0</li>\n</ol>\n</li>\n<li>文件传输到网络的公共数据路径的演变<br>从  </li>\n</ol>\n<p><img src=\"/img/kafka/no_zero_copy.png\" alt=\"image\">  </p>\n<pre><code>1. CPU发指令给I/O设备的DMA，由DMA将我们磁盘中的数据传输到内核空间的内核buffer。\n2. 第二阶段触发我们的CPU中断，CPU开始将将数据从kernel buffer拷贝至我们的应用缓存\n3. CPU将数据从应用缓存拷贝到内核中的socket buffer.\n4. DMA将数据从socket buffer中的数据拷贝到网卡缓存。 \n</code></pre><p>改为NIO  </p>\n<p><img src=\"/img/kafka/zero_copy.png\" alt=\"image\"></p>\n<pre><code>1. 调用sendfie(),CPU下发指令叫DMA将磁盘数据拷贝到内核buffer中。\n\n2. DMA拷贝完成发出中断请求，进行CPU拷贝，拷贝到socketbuffer中，sendFile调用完成返回。 3.DMA将socket buffer拷贝至网卡buffer。\n</code></pre><ol>\n<li>补充-零贝定义：<blockquote>\n<p>在计算机在网络上发送文件时候，不需要将文件内容拷贝到用户空间（user space） 而直接在内核空间 （kernel space ）中传输到网络的形式。</p>\n<p>[1]: /img/kafka/kafka_basic_construct.png</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>基本概念</li>\n<li>消息结构</li>\n<li>kafka特点及应用场景</li>\n<li>java code demo</li>\n<li>高级特性<ul>\n<li>事务</li>\n<li>零拷贝</li>\n</ul>\n</li>\n<li>more…","more":"<h2 id=\"2-1-来源及作用\"><a href=\"#2-1-来源及作用\" class=\"headerlink\" title=\"2-1 来源及作用\"></a>2-1 来源及作用</h2></li>\n</ul>\n<ol>\n<li>来源：linkedin开源：a distributed streamed platform</li>\n</ol>\n<ul>\n<li>databus</li>\n<li>cubrect</li>\n<li>parseq</li>\n<li>kafka<br>stream platform has three key capabilities</li>\n</ul>\n<ol>\n<li>特性</li>\n</ol>\n<ul>\n<li>消息队列 mq</li>\n<li>数据存储 db</li>\n<li>流处理   stream  </li>\n<li>构建实时流管道，实时处理数据流 real time &amp; transform react</li>\n</ul>\n<p>3.面向于数据流的生产、消费、存储、处理</p>\n<h2 id=\"3-1-基本概念\"><a href=\"#3-1-基本概念\" class=\"headerlink\" title=\"3-1 基本概念\"></a>3-1 基本概念</h2><h3 id=\"物理概念（服务器-硬件-载体…）\"><a href=\"#物理概念（服务器-硬件-载体…）\" class=\"headerlink\" title=\"物理概念（服务器|| 硬件|| 载体…）\"></a>物理概念（服务器|| 硬件|| 载体…）</h3><h3 id=\"逻辑概念（策略-逻辑…）\"><a href=\"#逻辑概念（策略-逻辑…）\" class=\"headerlink\" title=\"逻辑概念（策略 逻辑…）\"></a>逻辑概念（策略 逻辑…）</h3><ol>\n<li>producer<br>消息和数据的生产者，向一个topic发送消息的</li>\n</ol>\n<ul>\n<li>进程</li>\n<li>代码</li>\n<li>服务</li>\n</ul>\n<ol>\n<li>consumer<br>消息和数据的消费者，订阅数据topic并且处理器发布的消息的</li>\n</ol>\n<ul>\n<li>进程</li>\n<li>代码</li>\n<li>服务</li>\n</ul>\n<ol>\n<li>consumer group 逻辑概念<br>消费组，针对同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息。</li>\n<li>broker 物理概念<br>kafka集群节点之一，</li>\n<li>topic 逻辑概念<br>kafka消息的类别，对数据进行分类 区分 隔离</li>\n<li>partition 物理概念<br>kafka下数据存储的基本单元，一个topic会被分散处理存储到多个partition，每个partition是有序的，但是每个topic无法保证有序。</li>\n<li>replication<br>同一个partition可能会有多个raplica，多个replica之间数据时一样的</li>\n<li>replication leader<br>多个replication副本之间需要一个且只有一个leader major负责该partition与producer和consumer交互，其他的replication是副本，只负责同步数据。</li>\n<li>replica manager<br>负责管理当前broler所有分区和副本的信息，处理kafka controller 发起的请求，副本状态的切换 ，添加 读取消息等，选举出一个replication leader</li>\n</ol>\n<h2 id=\"3-2更多的kafka基本概念\"><a href=\"#3-2更多的kafka基本概念\" class=\"headerlink\" title=\"3-2更多的kafka基本概念\"></a>3-2更多的kafka基本概念</h2><ol>\n<li>partition</li>\n</ol>\n<ul>\n<li>每个topic被切分称多个partitions</li>\n<li>消费者的数目小于或者等于partiton的数目<br>每一个消费者会消费一个partition，如果消费者数目大于partition的数量，会出现一个partition被多个消费者消费</li>\n<li>broker group中的每一个broker保存topic的一个或多个partition，注意区别对待consumer group，同一个partion不会被保存在相同的broker上。如果partion非常大，可以用多个broker保存，而不是说一个partition被保存了多份在一个broker上。</li>\n<li>comsumer group中仅有一个consumer 读取topic的一个或者多个partion，并且是唯一的consumer，一个partition只能被这一个consumer消费，可以参考第二条</li>\n<li>为什么要有consumer group<br>为了容错，group有容错机制?<br>为了提高性能？后续再讲</li>\n<li>replication 副本<br>当集群中有broker挂了，partition ，系统可以主动使replications提供服务，系统默认每个topic的replication系数为1，可以在创建topic时单独设置</li>\n<li>replication<br>基本特点是topic的partition<br>所有的读和写都从followers，follower必须能够及时复制leader数据<br>增加容错性和可扩展性<h2 id=\"3-3-kafka基本结构\"><a href=\"#3-3-kafka基本结构\" class=\"headerlink\" title=\"3-3 kafka基本结构\"></a>3-3 kafka基本结构</h2>![image][1]<br>数据从productor流向consumer，<br>kafka暴露四个接口 </li>\n<li>connectors api</li>\n<li>stream processors api</li>\n<li>producer api</li>\n<li>consumer api<br><img src=\"/img/kafka/kafka_basic_2.png\" alt=\"image\"><br>kafka强依赖于zp，broker信息、topic、partition的分布<br>应用包括：</li>\n<li>hadoop</li>\n<li>实时监控</li>\n<li>数据仓库</li>\n<li>其他…<br><img src=\"/img/kafka/kafka_message.png\" alt=\"image\">  </li>\n<li>offset 当前消息所处的偏移量 4字节</li>\n<li>length 当前消息整体长度 4字节</li>\n<li>crc32 校验当前消息完整性 4字节</li>\n<li>magic 分布式系统一般都设计为这个字段，固定的一个字段。可以快速的判定是不是kafka的消息。如果不是，则扔掉，不需要经过校验等动作</li>\n<li>attributes 放置当前消息属性 1字节 枚举值</li>\n<li>timestamp  消费时间戳 8字节</li>\n<li>key length  4字节</li>\n<li>value 无限制</li>\n<li>value length 4字节</li>\n<li>value 无限制</li>\n</ul>\n<h2 id=\"3-4-kafka特点\"><a href=\"#3-4-kafka特点\" class=\"headerlink\" title=\"3-4 kafka特点\"></a>3-4 kafka特点</h2><ul>\n<li>分布式<ul>\n<li>多分区 partition</li>\n<li>多副本 replication</li>\n<li>多订阅者<br>topic可以有一个或者多个订阅者，每一个订阅者只能有一个partition</li>\n<li>基于zookeeper调度</li>\n</ul>\n</li>\n<li>高性能<ul>\n<li>高吞吐量 几十万/s</li>\n<li>低延迟 </li>\n<li>高并发</li>\n<li>时间复杂度o（1）</li>\n<li></li>\n</ul>\n</li>\n<li>持久性和扩展性<ul>\n<li>数据可持久化</li>\n<li>容错性 按组消费 多副本 </li>\n<li>支持在线水平扩展 增加新机器就可以放topic和partion</li>\n<li>消息自动平衡 consumer group 避免消息过于集中在某几台服务器，在服务端和消费者两端自动平衡，怎么实现的？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-5-应用环节\"><a href=\"#3-5-应用环节\" class=\"headerlink\" title=\"3.5 应用环节\"></a>3.5 应用环节</h2><ol>\n<li>消息队列 分区、副本、持久化、稳定、重复消费、低延迟…</li>\n<li>行为跟踪 发布订阅模式的扩展应用 在线或者离线应用</li>\n<li>元信息监控 运维数据监控</li>\n<li>日志收集 elk flume ，kafka可以让日志活起来，低延迟，支持更多的数据源和消费者，脱离以文件为中心的日志收集</li>\n<li>流处理 收集上游 处理在下游 对一个topic多次处理后再次处理，分段式链路流处理 </li>\n<li>事件源 记录状态转移序列 回溯事件变更 存储日志 动态汇总</li>\n<li>持久性日志 commit log 日志压缩 通过对日志回溯，</li>\n</ol>\n<h2 id=\"3-5-kafka简单案例\"><a href=\"#3-5-kafka简单案例\" class=\"headerlink\" title=\"3.5 kafka简单案例\"></a>3.5 kafka简单案例</h2><ol>\n<li>环境启动<ul>\n<li>下载zookeeper</li>\n<li>kafka下载</li>\n<li>解压、环境变量、配置文件…</li>\n<li>zookeeper-server-start</li>\n<li>bin/kafka/-topics –create – zookeeper 127.0.0.1:2181 –replication-factor 1 –partition s 3 –topic imooc-kafka-topic</li>\n<li>bin/kafka-topics –list –zookeeper 127.0.0.1:2121</li>\n<li>隐藏分区 __consumer_offsets </li>\n<li>启动producer /bin/kafka-console-producer –broker-list</li>\n<li>启动消费者 /bin/kafka-console-comsumer –bootstrap-server 127.0.0.1:9002 –topic imooc-kafka-topic –from-beginning </li>\n<li></li>\n</ul>\n</li>\n<li>简单生产者</li>\n<li>简单消费者</li>\n</ol>\n<h2 id=\"4-3-kafka代码案例\"><a href=\"#4-3-kafka代码案例\" class=\"headerlink\" title=\"4-3 kafka代码案例\"></a>4-3 kafka代码案例</h2><p>基于java spring boot<br>java代码真的挺有意思的，比php的好看 有艺术多了</p>\n<h2 id=\"5-1-kafuka高级特性-消息事务\"><a href=\"#5-1-kafuka高级特性-消息事务\" class=\"headerlink\" title=\"5-1 kafuka高级特性-消息事务\"></a>5-1 kafuka高级特性-消息事务</h2><ol>\n<li>为什么要支持事务<ul>\n<li>要支持读取-处理-写入模式 ，要保证数据一致性</li>\n<li>流处理需求的增加增强</li>\n<li>需要更准确的数据处理结果</li>\n</ul>\n</li>\n<li>数据传输事务的定义</li>\n</ol>\n<ul>\n<li>最多一次：消息不会被重复发送，最多被传输一次，但也可能一次也不传输</li>\n<li>最少一次：消息不会被漏发，最少被传输一次，但可能重复传输。但最好消息方最好幂等操作</li>\n<li>精确的一次 exactly once：不会漏也不会重复，仅仅一次，最优美。不会丢失，不会重复。</li>\n</ul>\n<ol>\n<li>事务保证</li>\n</ol>\n<ul>\n<li>内部重试问题<br>procedure 幂等处理（自身已经处理好）</li>\n<li>多分区原子写入<br>读取 -处理-写入 如何实现原子性？<br><img src=\"/img/kafka/kafka_constancepng.png\" alt=\"image\"><br>也就是说如何保证成功消费（从topic 1）并且发布（到topic2）<br>X为偏移量，会被标记成已消费，并写入到一个内部的kafka的topic（offset topic），记录office commit，此时认为被成功消费（已经提交了偏移量）</li>\n<li>事务保证-避免僵尸实例<ul>\n<li>每个事务producer分配一个transactional.id,在进程重新启动时能够识别相同的producer实例</li>\n<li>kafka增加一个与transactional.id的epoch（时期），存储每个transactionalid内部元数据</li>\n<li>一旦epoch被触发，任何具有相同transactionalid和更旧的epoch的producer被视为僵尸，kafka会拒绝来自这些来自procedure的后续事务性写入</li>\n<li><h2 id=\"5-2-kafka高级特性之零拷贝\"><a href=\"#5-2-kafka高级特性之零拷贝\" class=\"headerlink\" title=\"5-2 kafka高级特性之零拷贝\"></a>5-2 kafka高级特性之零拷贝</h2></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>nginx rocketmq netty kafka都具有实现了这种技术</li>\n</ol>\n<ul>\n<li>网络传输持久性日志块（生产和消费的消息）</li>\n<li>java nio channel.transforTo方法</li>\n<li>linux sendfile 系统调用</li>\n</ul>\n<ol>\n<li>文件传输到网络的公共数据路径<br> 1.操作系统将数据从磁盘读入到内核空间的页缓存<ol>\n<li>应用程序将程序从内核空间读入到用户空间内存中</li>\n<li>应用程序将数据写回到内核空间的socket缓存中</li>\n<li>操作系统将数据从socket缓冲区复制到网卡缓冲区，以便将数据从网络发出</li>\n<li>以上为4次拷贝，才能从磁盘到达网卡</li>\n</ol>\n</li>\n<li>零拷贝过程<ol>\n<li>操作系统将数据从磁盘读入到内核空间的页缓存</li>\n<li>将数据的位置和长度的信息的描述符增加至内核空间的socket缓冲区中</li>\n<li>操作系统将数据从内核拷贝到网卡缓冲区，以便将数据从网卡发出</li>\n<li>此处的零拷贝指的是内核空间和用户空间的交互拷贝为0</li>\n</ol>\n</li>\n<li>文件传输到网络的公共数据路径的演变<br>从  </li>\n</ol>\n<p><img src=\"/img/kafka/no_zero_copy.png\" alt=\"image\">  </p>\n<pre><code>1. CPU发指令给I/O设备的DMA，由DMA将我们磁盘中的数据传输到内核空间的内核buffer。\n2. 第二阶段触发我们的CPU中断，CPU开始将将数据从kernel buffer拷贝至我们的应用缓存\n3. CPU将数据从应用缓存拷贝到内核中的socket buffer.\n4. DMA将数据从socket buffer中的数据拷贝到网卡缓存。 \n</code></pre><p>改为NIO  </p>\n<p><img src=\"/img/kafka/zero_copy.png\" alt=\"image\"></p>\n<pre><code>1. 调用sendfie(),CPU下发指令叫DMA将磁盘数据拷贝到内核buffer中。\n\n2. DMA拷贝完成发出中断请求，进行CPU拷贝，拷贝到socketbuffer中，sendFile调用完成返回。 3.DMA将socket buffer拷贝至网卡buffer。\n</code></pre><ol>\n<li>补充-零贝定义：<blockquote>\n<p>在计算机在网络上发送文件时候，不需要将文件内容拷贝到用户空间（user space） 而直接在内核空间 （kernel space ）中传输到网络的形式。</p>\n<p>[1]: /img/kafka/kafka_basic_construct.png</p>\n</blockquote>\n</li>\n</ol>"},{"title":"2015上半年软件设计师上午题部分试题分析","date":"2016-11-09T11:18:59.000Z","_content":"\n1.计算机中cpu对其访问速度最快的是 通用寄存器>CACHE>内存》硬盘\n\n2.机器字长为N位的二进制数可以用补码来表示个不同的有符号定点小数。\n 对正数来说，二进制的原码，反码，补码都相同。\n 负数的反码为符号位不变，其他位取反。\n 负数的补码为其反码+1\n 带符号的数：机器数的最高位表示符号\n定点数是小数点位置约定不变的数，小数点不占位置，定点数分为定点整数和定点小数\n定点整数（纯整数）：约定小数点的位置在机器数的最低位之后\n定点小数（纯小数）：约定小数点的位置在机器数的最高数值位之前（带符号数，最高数值位是在符号位之后）\n符号位占一位，符号位也有0 和1的变化，即出现正数和负数\n,8位为例：理论上有负数2^(n-1)-1 =127个、正数2^(n-1)-1=127 个再加上10000000和00000000 。共计256个。\n\n3.cache的地址映像中，发生冲突块最小的是\n  1)．直接映象\n<!-- more -->\n　　每个主存地址映像到Cache中的一个指定地址的方式，称为直接映象方式。在直接映象方式下，主存中存储单元的数据只可调入Cache中的一个位置，如果主存中另一个存储单元的数据也要调入该位置则将发生冲突。地址映像的方法一般是将主存空间按Cache的尺寸分区，每区内相同的块号映像到Cache 中相同的块位置。一般地，Cache被分为2N块，主存被分为同样大小的2M块，主存与Cache中块的对应关系可用如下映像函数表示：j = i mod 2N。式中，j是Cache中的块号，i是主存中的块号。　　\n\n　　直接映象是一种最简单的地址映像方式，它的地址变换速度快，而且不涉及其他两种映像方式中的替换策略问题。但是这种方式的块冲突概率较高，当称序往返访问两个相互冲突的块中的数据时，Cache的命中率将急剧下降，因为这时即使Cache中有其他空闲块，也因为固定的地址映像关系而无法应用。　　\n\n  2)．全相联映象　　　　\n\n　　主存中的每一个字块可映像到Cache任何一个字块位置上，这种方式称为全相联映像。这种方式只有当Cache中的块全部装满后才会出现块冲突，所以块冲突的概率低，可达到很高的Cache命中率；但实现很复杂。当访问一个块中的数据时，块地址要与Cache块表中的所有地址标记进行比较已确定是否命中。在数据块调入时存在着一个比较复杂的替换问题，即决定将数据块调入Cache中什么位置，将Cache中那一块数据调出主存。为了达到较高的速度，全部比较和替换都要用硬件实现。\n\n  3)．组相联映象　　　\n\n　　组相联映象方式是直接映象和全相联映象的一种折衷方案。这种方法将存储空间分为若干组，各组之间是直接映像，而组内各块之间则是全相联映像。它是上述两种映像方式的一般形式，如果组的大小为1，即Cache空间分为2N组，就变为直接映像；如果组的大小为Cache整个的尺寸，就变为了全相联映像。组相联方式在判断块命中及替换算法上都要比全相联方式简单，块冲突的概率比直接映像的低，其命中率也介于直接映像和全相联映像方式之间。\n\n\n  [参考](http://blog.csdn.net/kobesdu/article/details/39081189) 　\n\n\n4.计算机中的cpu终端响应时间指的是 从发出中断请求到开始进入中断处理程序，要分清中断响应过程和中断服务过程\n\n5.总线宽度为32bit，时钟频率为200MHZ,若总线上每5个小时周期传送一个32bit的字，则该总线的宽度为\n32bit*(200MHZ/5)/8bit=160MB\n总线的带宽指的是这条总线在单位时间内可以传输的数据总量，它等于总线位宽与工作频率的乘积。例如，对于64位、800MHz的前端总线，它的数据传输率就等于64bit×800MHz÷8(Byte)=6.4GB/s；32位、33MHz PCI总线的数据传输率就是32bit×33MHz÷8=132MB/s，等等，这项法则可以用于所有并行总线上面——看到这里，读者应该明白我们所说的总线带宽指的就是它的数据传输率。\n[参考](\nhttp://baike.baidu.com/link?url=AIbVrUoI9cOptbbWoJaK2gd1pQbm4OWS7BDlE9MgNQ6UsBME35eOd0S8SZBswIiP_lwaHPB8xXeJ_oa4S9a3tTGNVwr6drJmsieSPN2xETQ8E7VscDXfRz0HLGzdOBUg\n)\n\n\n6.流水线性能：采用异步并不会明显提高性能。药师加速比和效率最大化应该对流水线各级采用相同的运行时间。\n\n7.SSH，安全套接层secure shell，建立在应用层基础上\n\n8.9.系统安全 漏洞补丁，应用安全 数据库安全\n\n10.11.软件产品也是作品的一种，公民拥有的为死后50年，企业为发布后50年，公民的署名权，修改权，保护作品完整权 是永远保护的\n个人一般只有个署名权，其他的著作权都归公司。商标谁申请谁拥有，同时申请，谁先用，谁使用。专利，谁先申请谁拥有，同时那就协商去。或者抓阄。\n著作权不需要申请就拥有。\n专利同时申请的就协商，协商不成谁也不想要。\n\n\n12.13.媒体分为感觉媒体、表示媒体、表现媒体、存储媒体和传输媒体\n 感觉媒体\n感觉媒体指的是能直接作用于人们的感觉器官，从而能使人产生直接感觉的媒体。如文字、数据、声音、图形、图像等。\n在多媒体计算机技术中，我们所说的媒体一般指的是感觉媒体。\n 表示媒体\n表示媒体指的是为了传输感觉媒体而人为研究出来的媒体，借助于此种媒体，能有效地存储感觉媒体或将感觉媒体从一个地方传送到另一个地方。如语言编码、电报码、条形码等。\n 表现媒体\n表现媒体指的是用于通信中使电信号和感觉媒体之间产生转换用的媒体。如输入、输出设备，包括键盘、鼠标器、显示器、打印机等。\n 存储媒体\n存储媒体指的是用于存放表示媒体的媒体。如纸张、磁带、磁盘、光盘等。\n\n传输媒体\n传输媒体指的用于传输某种媒体的物理媒体。如双绞线、电缆、光纤等。\n\n14.\n\n15.软件工程的基本要素包括方法 工具和过程\n\n16.在概要设计阶段，选择适当的解决方案，将系统分解为若干个子系统，建立整个系统的体系结构\n\n17.18 ，关键路径算法\n\n你好，本题是考察项目的关键路径，关键路径：项目中时间最长的活动顺序，决定着可能的项目最短工期。\n本题解题时需要先生成网络图，然后找出关键路径。\n本题按照题干生成的图如下：\n\n![img][1]\n可以从图中发现ADEFH是最长的路径，也就是关键路径。\n由于ADF都是关键路径上的活动，对其进行修改就会影响关键路径，而B不是关键路径上的活动，对其进行缩短，经过B的所有路径的时长都不会比关键路径长，即不会影响项目工期\n\n19.风险的优先级通常是根据 风险暴露risk exposure 来设定\n风险暴露又称为风险曝光度，测量的是资产的整个安全性风险，他将表示实际损失的可能性与表示大量可能损失的资讯结合到单一数字评估中，风险曝光riskexposure=错误出现率 *错误造成损失（风险损失）\n\n20.程序设计语言中，局部变量的值是在运行时改变的\n\n21.算法表达式对应的树，对此二叉树进行先序，中序，后序遍历，便可以得到表达式的前缀，中缀和后缀书写形式。\n中缀形式是算术表达式的通常形式，只是没有括号。使用后缀表达式更容易求职（在计算机中）\n\n22.c程序中全局变量的存储空间在静态数据区分配\n\n23.24.25记得v是增加信号量，p是减少信号量。用pv就能选出，不用是p几s几\n\n26.访问位为0的就把他淘汰掉\n\n27.28 嵌入式系统初始化分为片级初始化，板级初始化，系统级初始化。这是按照自底向上，从硬件到软件的次序依次进行的。\n片级初始化完成嵌入式微处理器的初始化，包括设置嵌入式微处理器的核心寄存器和控制寄存器。片级初始化是一个纯硬件的过程。\n板级初始化，同时需要设置一些数据结构和参数，同时包含软件和硬件在内的初始化过程。\n系统初始化，系统分区，网络系统，文件系统等，最后将控制权交给应用程序的入口\n\n29.瀑布模型 文档驱动 系统可能不满足客户的需求\n快速原型模型 关注满足客户需求 可能导致系统设计差、效率低，难于维护\n增量模型 开发早期反馈及时，易于维护 需要开放式体系结构，可能会导致效率低下\n螺旋模型 风险驱动 风险分析人员需要有经验且经过充分训练\n\n记住螺旋模型是有风险控制的就好\n\n30.敏捷开发\nscrum【并列争球】：三个角色，四个会议，三个物件\n极限编程【xp】：交流，朴素，反馈和勇气，近螺旋式开发方法\n水晶方法srystal：提倡机动性方法，包含具有共性的核心元素，每个都含有独特的角色，过程模式，工作产品和实践七大体系特征：经常交付，反思改进，渗透式交流，个人安全，焦点，与专家用户建立方便的联系，配有自动测试，配置管理和经常集成功能的技术环境\nDSDM dynamic system development management 动态系统开发方法：以业务为核心 用户持续参与，产品经常交付，迭代增量\n\n31.软件配置管理内容：版本控制，变更控制，过程支持\n\n32.内聚和耦合。内聚是从功能性角度，描述的是模块内功能性的关系。耦合是各个模块之间互相连接的一种度量。\n耦合强弱取决于模块之间接口的复杂程度。\n模块之间关系越紧密，耦合性就强，独立性就差\n\n内容耦合：一个模块直接访问另外一个模块内部数据；一个模块多个入口，这种耦合性最强。（目前高级语言不会有这种情况，最早出现在汇编）\n公共耦合：一组模块都访问同一个全局数据结构，公共数据环境可以是全局数据结构，共享通信区，内存的公共覆盖区等\n外部耦合:一组模块都访问同一全局简单变量，而且不通过参数表传递该全局变量信息，则称为外部耦合。\n控制耦合：模块之间传递的不是数据信息，而是控制信息，如标志，开关量等，一个模块控制了另外一个模块的功能。\n标记耦合：调用模块和被调用模块之间传递的数据结构而不是简单数据，同时也称作特征耦合，其实传递的是地址。\n\n数据耦合：调用模块和被调用模块之间只是传递简单的数据项参数，相当于高级语言值传递。\n\n非直接耦合：两个模块之间没有直接关系，他们之间的联系完全通过主模块的调用来实现的，耦合度最低，模块独立性最强。\n\n内聚：偶然内聚，没有任何关系，\n逻辑内聚：调用时由传送模块参数传递\n时间内聚：把需要执行的动作组合在一起形成模块\n过程内聚：特定次数，特定关系\n通信内聚模块内各个组成部分都使用相同的数据结构或产生相同的数据结构\n顺序内聚：必须顺序执行\n功能内聚是最强内聚\n\n某模块实现两个功能，向某个数据结构区域写数据和从该区域读数据，则该模块内聚类型为 通信内聚\n\n33.正规技术评审目的\n（1）发现软件在功能、逻辑、实现上的错误；\n（2）验证软件符合它的需求规格；\n（3）确认软件符合预先定义的开发规范和标准；\n（4）保证软件在统一的模式下进行开发；\n（5）便于项目管理。\n此外，正规技术评审为新手提供软件分析、设计和实现的培训途经，后备、后续开发人员也可以通过正规技术评审熟悉他人开发的软件。\n\n34.自顶向下集成\n\n目的：从顶层控制（主控模块）开始，采用同设计顺序一样的思路对被测系统进行测试，来验证系统的稳定性。\n定义：自顶向下的集成测试就是按照系统层次结构图，以主程序模块为中心，自上而下按照深度优先或者广度优先策略，对各个模块一边组装一边进行测试。\n方法：\n①      把主控模块作为测试驱动，所有与主控模块直接相连的模块作为桩模块；\n②                      根据集成的方式（深度优先或者广度优先），逐渐使用实际模块替换相应的下层桩模块；再用桩代替他们的直接下属模块，与已通过测试的模块或子系统组装成新的子系统。\n③                      在每个模块被集成时，都必须已经通过了单元测试；\n④                      进行回归测试（重新执行以前做过的全部或部分测试），以确定集成新模块后没有引入错误；\n⑤                      从上述过程中的第二步开始重复执行，直到所有模块都已经集成到系统中为止。\n优点：\n①      在测试的过程中，可以较早地验证主要的控制和判断点。\n② 选择深度优先组合方式，可以首先实现和验证一个完整的软件功能，可先对逻辑输入的分支进行组装和测试，检查和克服潜藏的错误和缺陷，\n③      验证其功能的正确性，为此后主要分支的组装和测试提供保证；\n④      能够较早的验证功能可行性，给开发者和用户带来成功的信心；\n⑤      只有在个别情况下，才需要驱动程序（最多不超过一个），减少了测试驱动程序开发和维护的费用；\n⑥      可以和开发设计工作一起并行执行集成测试，能够灵活的适应目标环境；\n⑦      容易进行故障隔离和错误定位。\n 缺点：\n①      在测试时需要为每个模块的下层模块提供桩模块，桩模块的开发和维护费用大；\n②      底层组件的需求变更可能会影响到全局组件，需要修改整个系统的多个上层模块。\n③      要求控制模块具有比较高的可测试性；\n④      可能会导致底层模块特别是被重用的模块测试不够充分。\n 适用范围：\n①      控制结构比较清晰和稳定的应用程序；\n②      系统高层的模块接口变化的可能性比较小；\n③      产品的低层模块接口还未定义或可能会经常因需求变更等原因被修改；\n④      产品中的控制模块技术风险较大，需要尽可能提前验证；\n⑤      需要尽早看到产品的系统功能行为；\n⑥      在极限编程（Extreme Programming）中使用测试优先的开发方法。\n\n自底向上集成\n\n1) 目的：从依赖性最小的底层模块开始，按照层次结构图，逐层向上集成，验证系统的稳定性。\n2) 定义：自底向上集成是从系统层次结构图的最底层模块开始进行组装和集成测试的方式。\n3) 方法：\n①      从最底层的模块开始组装，组合成一个能够完成制定的软件子功能的构件；\n②      编制驱动程序，协调测试用例的输入与输出；\n③      测试集成后的构件；\n④      使用实际模块代替驱动程序，按程序结构向上组装测试后的构件；\n⑤      重复上面的第二步，直到系统的最顶层模块被加入到系统中为止。\n4) 优点：\n①      即使数据流并未构成有向的非环状图，生成测试数据也没有困难。\n②      可以尽早的验证底层模块的行为。<3>提高了测试效率；\n③      对实际被测模块的可测试性要求要少；\n④      减少了桩模块的工作量;\n⑤      容易对错误进行定位。\n5) 缺点\n①      直到最后一个模块加进去之后才能看到整个系统的框架；\n②      只有到测试过程的后期才能发现时序问题和资源竞争问题；\n③      驱动模块的设计工作量大;\n④      不能被及时发现高层模块设计上的错误。\n6) 适用范围\n① 底层模块接口比较稳定的产品；\n② 高层模块接口变更比较频繁的产品；\n③ 底层模块开发和单元测试工作完成较早的产品。\n\n自底向上的集成测试策略的优点 不需要编写桩程序，但是需要编写很多驱动模块\n\n\n\n35.mccabe 程序控制流程图中，节点是程序代码中最小的单元。边代表节点间的控制流，一个有e条边和n个节点的流程图f。其圈复杂度为e-f+2 ，边-点+2\n10-8+2=4\n\n36.软件可维护性是衡量软件质量的一个重要特性，受到开发文档影响，可维护性也是软件开发阶段各个时期的关键目标，可以从可理解行，可靠性，可测试性，可行性，可移植性进行度量。\n\n37.对象是封闭数据和行为的整体\n\n38.面向对象程序设计选择合适的面向对象程序设计语言，将程序组织为相互协作的对象集合，每个对象表示某个类的实例，类通过继承等关系进行组织。\n面向对象分析：主要任务是抽取和整理用户需求并建立问题域精确模型，\n面向对象设计：采用协作的对象，对象的属性和方法说明软件解决方案的一种方式，强调的是定义软件对象和这些软件对象如何协作来满足要求，延续了面向对象分析。\n面向对象实现：采用面向对象程序设计语言下hi线系统。\n面向对象测试是根据规范来说明验证系统设计的正确性。\n\n39.一个类可以通过多个重名方法而参数类型列表示不通的方法，被称为重载方法\n\n40.41.UML关系\n实现关系implementation：接口和类的实现，implements 带空心三角形的虚线来表示\n组合关系composition：整体和部分关系，并且有统一的生存期。整体不存在，那么部分也不存在。比如头和嘴的关系。\n组合关系用实心菱形。整体那边是实心菱形，部分那么是箭头。\n\n聚合关系aggregation整体和部分的关系，但是可以相互存在，就是部分可以脱离整体。比如电脑和显示器。整体那边是虚心菱形\n\n关联关系 association 一对一，多对多，自关联等，是一种结构关系，描述了一种链。链是对象之间的连接。\n泛化 generation 就是继承关系，空心三角指向父类\n\n依赖关系dependence 大多情况，依赖关系体现在某个类的方法使用另一个类的对象作为参数\n虚心箭头表示，开车和司机的关系\n\n42.43uml，统一建模语言\n用例图：描述用户需求，从用户角度描述系统功能，椭圆为某个用户，人形为角色，帮助团队以一种可视化的方式理解系统功能需求\n活动图：通过动作来组织，主要描述一种方法，机制或用例的内部行为，涉及状态 活动转移分支 并发 同步\n静态结构图：【类图】，【对象图】，【包图】，【组合结构图】...\n部署图：deployment diagram 描述系统所需的硬件构件的物理部署\n\n[参考](http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html)\n\n\n44.45.46 组合模式，属于结构型模式，表示对象的整体，结构层次\n\n47.某些设计模式会引入总是被用作参数的对象 visitor 访问者模式对象是一个多态accept的参数\n命令模式：将请求封装为一个对象，可以将不通的请求对客户进行参数化\n责任链模式：chain of responsibility 模式将多个对象的请求连成一条链，并沿着这条连传递该请求，直到有一个对象处理他为止，主要是避免请求的发送者和接受者之间的耦合关系。\n观察者模式：定义对象之间的一种一对的依赖关系，当一个对象的状态发生改变时，所有依赖他的对象都得到通知并被自动更新。\n\n48.对高级语言源程序的编译或解释的过程可以分为多个阶段，解释方式不包括 目标代码生成。解释方式是没有目标代码生成的，与编译方式在词法，语法，语义方面大体相同，但在运行时直接执行源程序或源程序的内部形式，即解释程序不产生源程序的目标程序。这是与编译程序的主要区别。如php都是分析之后，解释成opcode码，然后解释执行，可以这么说，解释程序是参与程序的运行过程的。编译就是分开的。解释的控制器在解释程序。\n\n[参考](http://www.cnblogs.com/riskyer/p/3347865.html)\n\n49.\n\n50.递归下降分析法是一种自上而下的语法分析\n\n51.若关系R（h,l,m,p）的主键为全码，则关系的主键为为HLMP\n\n52.\n\n53.遗传算法的主要基因操作是选种、交配和突变，而在进化规则、进化策略中，进化机制源于选种和突变。就适应度的角度来说遗传算法用于选择优秀的父代(优秀的父代产生优秀的子代)，而进化规则和进化策略则用于选择子代(优秀的子代才能存在)。\n\n54.55.56 自然连接是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的 属性去掉。等值连接是不会去重重复属性列的。\n自然连接一定是等值连接，自然连接会把重复的属性移除。\n\n\n67.一个vlan【虚拟局域网】就是一个广播域。\n\n\n\n[1]: /img/ruankao/17-18.png\n\n","source":"_posts/2015-ruankao-am.md","raw":"---\ntitle: 2015上半年软件设计师上午题部分试题分析\ndate: 2016-11-09 19:18:59\ncategories: computer\ntags:\n - 软考\n - 软件设计师\n---\n\n1.计算机中cpu对其访问速度最快的是 通用寄存器>CACHE>内存》硬盘\n\n2.机器字长为N位的二进制数可以用补码来表示个不同的有符号定点小数。\n 对正数来说，二进制的原码，反码，补码都相同。\n 负数的反码为符号位不变，其他位取反。\n 负数的补码为其反码+1\n 带符号的数：机器数的最高位表示符号\n定点数是小数点位置约定不变的数，小数点不占位置，定点数分为定点整数和定点小数\n定点整数（纯整数）：约定小数点的位置在机器数的最低位之后\n定点小数（纯小数）：约定小数点的位置在机器数的最高数值位之前（带符号数，最高数值位是在符号位之后）\n符号位占一位，符号位也有0 和1的变化，即出现正数和负数\n,8位为例：理论上有负数2^(n-1)-1 =127个、正数2^(n-1)-1=127 个再加上10000000和00000000 。共计256个。\n\n3.cache的地址映像中，发生冲突块最小的是\n  1)．直接映象\n<!-- more -->\n　　每个主存地址映像到Cache中的一个指定地址的方式，称为直接映象方式。在直接映象方式下，主存中存储单元的数据只可调入Cache中的一个位置，如果主存中另一个存储单元的数据也要调入该位置则将发生冲突。地址映像的方法一般是将主存空间按Cache的尺寸分区，每区内相同的块号映像到Cache 中相同的块位置。一般地，Cache被分为2N块，主存被分为同样大小的2M块，主存与Cache中块的对应关系可用如下映像函数表示：j = i mod 2N。式中，j是Cache中的块号，i是主存中的块号。　　\n\n　　直接映象是一种最简单的地址映像方式，它的地址变换速度快，而且不涉及其他两种映像方式中的替换策略问题。但是这种方式的块冲突概率较高，当称序往返访问两个相互冲突的块中的数据时，Cache的命中率将急剧下降，因为这时即使Cache中有其他空闲块，也因为固定的地址映像关系而无法应用。　　\n\n  2)．全相联映象　　　　\n\n　　主存中的每一个字块可映像到Cache任何一个字块位置上，这种方式称为全相联映像。这种方式只有当Cache中的块全部装满后才会出现块冲突，所以块冲突的概率低，可达到很高的Cache命中率；但实现很复杂。当访问一个块中的数据时，块地址要与Cache块表中的所有地址标记进行比较已确定是否命中。在数据块调入时存在着一个比较复杂的替换问题，即决定将数据块调入Cache中什么位置，将Cache中那一块数据调出主存。为了达到较高的速度，全部比较和替换都要用硬件实现。\n\n  3)．组相联映象　　　\n\n　　组相联映象方式是直接映象和全相联映象的一种折衷方案。这种方法将存储空间分为若干组，各组之间是直接映像，而组内各块之间则是全相联映像。它是上述两种映像方式的一般形式，如果组的大小为1，即Cache空间分为2N组，就变为直接映像；如果组的大小为Cache整个的尺寸，就变为了全相联映像。组相联方式在判断块命中及替换算法上都要比全相联方式简单，块冲突的概率比直接映像的低，其命中率也介于直接映像和全相联映像方式之间。\n\n\n  [参考](http://blog.csdn.net/kobesdu/article/details/39081189) 　\n\n\n4.计算机中的cpu终端响应时间指的是 从发出中断请求到开始进入中断处理程序，要分清中断响应过程和中断服务过程\n\n5.总线宽度为32bit，时钟频率为200MHZ,若总线上每5个小时周期传送一个32bit的字，则该总线的宽度为\n32bit*(200MHZ/5)/8bit=160MB\n总线的带宽指的是这条总线在单位时间内可以传输的数据总量，它等于总线位宽与工作频率的乘积。例如，对于64位、800MHz的前端总线，它的数据传输率就等于64bit×800MHz÷8(Byte)=6.4GB/s；32位、33MHz PCI总线的数据传输率就是32bit×33MHz÷8=132MB/s，等等，这项法则可以用于所有并行总线上面——看到这里，读者应该明白我们所说的总线带宽指的就是它的数据传输率。\n[参考](\nhttp://baike.baidu.com/link?url=AIbVrUoI9cOptbbWoJaK2gd1pQbm4OWS7BDlE9MgNQ6UsBME35eOd0S8SZBswIiP_lwaHPB8xXeJ_oa4S9a3tTGNVwr6drJmsieSPN2xETQ8E7VscDXfRz0HLGzdOBUg\n)\n\n\n6.流水线性能：采用异步并不会明显提高性能。药师加速比和效率最大化应该对流水线各级采用相同的运行时间。\n\n7.SSH，安全套接层secure shell，建立在应用层基础上\n\n8.9.系统安全 漏洞补丁，应用安全 数据库安全\n\n10.11.软件产品也是作品的一种，公民拥有的为死后50年，企业为发布后50年，公民的署名权，修改权，保护作品完整权 是永远保护的\n个人一般只有个署名权，其他的著作权都归公司。商标谁申请谁拥有，同时申请，谁先用，谁使用。专利，谁先申请谁拥有，同时那就协商去。或者抓阄。\n著作权不需要申请就拥有。\n专利同时申请的就协商，协商不成谁也不想要。\n\n\n12.13.媒体分为感觉媒体、表示媒体、表现媒体、存储媒体和传输媒体\n 感觉媒体\n感觉媒体指的是能直接作用于人们的感觉器官，从而能使人产生直接感觉的媒体。如文字、数据、声音、图形、图像等。\n在多媒体计算机技术中，我们所说的媒体一般指的是感觉媒体。\n 表示媒体\n表示媒体指的是为了传输感觉媒体而人为研究出来的媒体，借助于此种媒体，能有效地存储感觉媒体或将感觉媒体从一个地方传送到另一个地方。如语言编码、电报码、条形码等。\n 表现媒体\n表现媒体指的是用于通信中使电信号和感觉媒体之间产生转换用的媒体。如输入、输出设备，包括键盘、鼠标器、显示器、打印机等。\n 存储媒体\n存储媒体指的是用于存放表示媒体的媒体。如纸张、磁带、磁盘、光盘等。\n\n传输媒体\n传输媒体指的用于传输某种媒体的物理媒体。如双绞线、电缆、光纤等。\n\n14.\n\n15.软件工程的基本要素包括方法 工具和过程\n\n16.在概要设计阶段，选择适当的解决方案，将系统分解为若干个子系统，建立整个系统的体系结构\n\n17.18 ，关键路径算法\n\n你好，本题是考察项目的关键路径，关键路径：项目中时间最长的活动顺序，决定着可能的项目最短工期。\n本题解题时需要先生成网络图，然后找出关键路径。\n本题按照题干生成的图如下：\n\n![img][1]\n可以从图中发现ADEFH是最长的路径，也就是关键路径。\n由于ADF都是关键路径上的活动，对其进行修改就会影响关键路径，而B不是关键路径上的活动，对其进行缩短，经过B的所有路径的时长都不会比关键路径长，即不会影响项目工期\n\n19.风险的优先级通常是根据 风险暴露risk exposure 来设定\n风险暴露又称为风险曝光度，测量的是资产的整个安全性风险，他将表示实际损失的可能性与表示大量可能损失的资讯结合到单一数字评估中，风险曝光riskexposure=错误出现率 *错误造成损失（风险损失）\n\n20.程序设计语言中，局部变量的值是在运行时改变的\n\n21.算法表达式对应的树，对此二叉树进行先序，中序，后序遍历，便可以得到表达式的前缀，中缀和后缀书写形式。\n中缀形式是算术表达式的通常形式，只是没有括号。使用后缀表达式更容易求职（在计算机中）\n\n22.c程序中全局变量的存储空间在静态数据区分配\n\n23.24.25记得v是增加信号量，p是减少信号量。用pv就能选出，不用是p几s几\n\n26.访问位为0的就把他淘汰掉\n\n27.28 嵌入式系统初始化分为片级初始化，板级初始化，系统级初始化。这是按照自底向上，从硬件到软件的次序依次进行的。\n片级初始化完成嵌入式微处理器的初始化，包括设置嵌入式微处理器的核心寄存器和控制寄存器。片级初始化是一个纯硬件的过程。\n板级初始化，同时需要设置一些数据结构和参数，同时包含软件和硬件在内的初始化过程。\n系统初始化，系统分区，网络系统，文件系统等，最后将控制权交给应用程序的入口\n\n29.瀑布模型 文档驱动 系统可能不满足客户的需求\n快速原型模型 关注满足客户需求 可能导致系统设计差、效率低，难于维护\n增量模型 开发早期反馈及时，易于维护 需要开放式体系结构，可能会导致效率低下\n螺旋模型 风险驱动 风险分析人员需要有经验且经过充分训练\n\n记住螺旋模型是有风险控制的就好\n\n30.敏捷开发\nscrum【并列争球】：三个角色，四个会议，三个物件\n极限编程【xp】：交流，朴素，反馈和勇气，近螺旋式开发方法\n水晶方法srystal：提倡机动性方法，包含具有共性的核心元素，每个都含有独特的角色，过程模式，工作产品和实践七大体系特征：经常交付，反思改进，渗透式交流，个人安全，焦点，与专家用户建立方便的联系，配有自动测试，配置管理和经常集成功能的技术环境\nDSDM dynamic system development management 动态系统开发方法：以业务为核心 用户持续参与，产品经常交付，迭代增量\n\n31.软件配置管理内容：版本控制，变更控制，过程支持\n\n32.内聚和耦合。内聚是从功能性角度，描述的是模块内功能性的关系。耦合是各个模块之间互相连接的一种度量。\n耦合强弱取决于模块之间接口的复杂程度。\n模块之间关系越紧密，耦合性就强，独立性就差\n\n内容耦合：一个模块直接访问另外一个模块内部数据；一个模块多个入口，这种耦合性最强。（目前高级语言不会有这种情况，最早出现在汇编）\n公共耦合：一组模块都访问同一个全局数据结构，公共数据环境可以是全局数据结构，共享通信区，内存的公共覆盖区等\n外部耦合:一组模块都访问同一全局简单变量，而且不通过参数表传递该全局变量信息，则称为外部耦合。\n控制耦合：模块之间传递的不是数据信息，而是控制信息，如标志，开关量等，一个模块控制了另外一个模块的功能。\n标记耦合：调用模块和被调用模块之间传递的数据结构而不是简单数据，同时也称作特征耦合，其实传递的是地址。\n\n数据耦合：调用模块和被调用模块之间只是传递简单的数据项参数，相当于高级语言值传递。\n\n非直接耦合：两个模块之间没有直接关系，他们之间的联系完全通过主模块的调用来实现的，耦合度最低，模块独立性最强。\n\n内聚：偶然内聚，没有任何关系，\n逻辑内聚：调用时由传送模块参数传递\n时间内聚：把需要执行的动作组合在一起形成模块\n过程内聚：特定次数，特定关系\n通信内聚模块内各个组成部分都使用相同的数据结构或产生相同的数据结构\n顺序内聚：必须顺序执行\n功能内聚是最强内聚\n\n某模块实现两个功能，向某个数据结构区域写数据和从该区域读数据，则该模块内聚类型为 通信内聚\n\n33.正规技术评审目的\n（1）发现软件在功能、逻辑、实现上的错误；\n（2）验证软件符合它的需求规格；\n（3）确认软件符合预先定义的开发规范和标准；\n（4）保证软件在统一的模式下进行开发；\n（5）便于项目管理。\n此外，正规技术评审为新手提供软件分析、设计和实现的培训途经，后备、后续开发人员也可以通过正规技术评审熟悉他人开发的软件。\n\n34.自顶向下集成\n\n目的：从顶层控制（主控模块）开始，采用同设计顺序一样的思路对被测系统进行测试，来验证系统的稳定性。\n定义：自顶向下的集成测试就是按照系统层次结构图，以主程序模块为中心，自上而下按照深度优先或者广度优先策略，对各个模块一边组装一边进行测试。\n方法：\n①      把主控模块作为测试驱动，所有与主控模块直接相连的模块作为桩模块；\n②                      根据集成的方式（深度优先或者广度优先），逐渐使用实际模块替换相应的下层桩模块；再用桩代替他们的直接下属模块，与已通过测试的模块或子系统组装成新的子系统。\n③                      在每个模块被集成时，都必须已经通过了单元测试；\n④                      进行回归测试（重新执行以前做过的全部或部分测试），以确定集成新模块后没有引入错误；\n⑤                      从上述过程中的第二步开始重复执行，直到所有模块都已经集成到系统中为止。\n优点：\n①      在测试的过程中，可以较早地验证主要的控制和判断点。\n② 选择深度优先组合方式，可以首先实现和验证一个完整的软件功能，可先对逻辑输入的分支进行组装和测试，检查和克服潜藏的错误和缺陷，\n③      验证其功能的正确性，为此后主要分支的组装和测试提供保证；\n④      能够较早的验证功能可行性，给开发者和用户带来成功的信心；\n⑤      只有在个别情况下，才需要驱动程序（最多不超过一个），减少了测试驱动程序开发和维护的费用；\n⑥      可以和开发设计工作一起并行执行集成测试，能够灵活的适应目标环境；\n⑦      容易进行故障隔离和错误定位。\n 缺点：\n①      在测试时需要为每个模块的下层模块提供桩模块，桩模块的开发和维护费用大；\n②      底层组件的需求变更可能会影响到全局组件，需要修改整个系统的多个上层模块。\n③      要求控制模块具有比较高的可测试性；\n④      可能会导致底层模块特别是被重用的模块测试不够充分。\n 适用范围：\n①      控制结构比较清晰和稳定的应用程序；\n②      系统高层的模块接口变化的可能性比较小；\n③      产品的低层模块接口还未定义或可能会经常因需求变更等原因被修改；\n④      产品中的控制模块技术风险较大，需要尽可能提前验证；\n⑤      需要尽早看到产品的系统功能行为；\n⑥      在极限编程（Extreme Programming）中使用测试优先的开发方法。\n\n自底向上集成\n\n1) 目的：从依赖性最小的底层模块开始，按照层次结构图，逐层向上集成，验证系统的稳定性。\n2) 定义：自底向上集成是从系统层次结构图的最底层模块开始进行组装和集成测试的方式。\n3) 方法：\n①      从最底层的模块开始组装，组合成一个能够完成制定的软件子功能的构件；\n②      编制驱动程序，协调测试用例的输入与输出；\n③      测试集成后的构件；\n④      使用实际模块代替驱动程序，按程序结构向上组装测试后的构件；\n⑤      重复上面的第二步，直到系统的最顶层模块被加入到系统中为止。\n4) 优点：\n①      即使数据流并未构成有向的非环状图，生成测试数据也没有困难。\n②      可以尽早的验证底层模块的行为。<3>提高了测试效率；\n③      对实际被测模块的可测试性要求要少；\n④      减少了桩模块的工作量;\n⑤      容易对错误进行定位。\n5) 缺点\n①      直到最后一个模块加进去之后才能看到整个系统的框架；\n②      只有到测试过程的后期才能发现时序问题和资源竞争问题；\n③      驱动模块的设计工作量大;\n④      不能被及时发现高层模块设计上的错误。\n6) 适用范围\n① 底层模块接口比较稳定的产品；\n② 高层模块接口变更比较频繁的产品；\n③ 底层模块开发和单元测试工作完成较早的产品。\n\n自底向上的集成测试策略的优点 不需要编写桩程序，但是需要编写很多驱动模块\n\n\n\n35.mccabe 程序控制流程图中，节点是程序代码中最小的单元。边代表节点间的控制流，一个有e条边和n个节点的流程图f。其圈复杂度为e-f+2 ，边-点+2\n10-8+2=4\n\n36.软件可维护性是衡量软件质量的一个重要特性，受到开发文档影响，可维护性也是软件开发阶段各个时期的关键目标，可以从可理解行，可靠性，可测试性，可行性，可移植性进行度量。\n\n37.对象是封闭数据和行为的整体\n\n38.面向对象程序设计选择合适的面向对象程序设计语言，将程序组织为相互协作的对象集合，每个对象表示某个类的实例，类通过继承等关系进行组织。\n面向对象分析：主要任务是抽取和整理用户需求并建立问题域精确模型，\n面向对象设计：采用协作的对象，对象的属性和方法说明软件解决方案的一种方式，强调的是定义软件对象和这些软件对象如何协作来满足要求，延续了面向对象分析。\n面向对象实现：采用面向对象程序设计语言下hi线系统。\n面向对象测试是根据规范来说明验证系统设计的正确性。\n\n39.一个类可以通过多个重名方法而参数类型列表示不通的方法，被称为重载方法\n\n40.41.UML关系\n实现关系implementation：接口和类的实现，implements 带空心三角形的虚线来表示\n组合关系composition：整体和部分关系，并且有统一的生存期。整体不存在，那么部分也不存在。比如头和嘴的关系。\n组合关系用实心菱形。整体那边是实心菱形，部分那么是箭头。\n\n聚合关系aggregation整体和部分的关系，但是可以相互存在，就是部分可以脱离整体。比如电脑和显示器。整体那边是虚心菱形\n\n关联关系 association 一对一，多对多，自关联等，是一种结构关系，描述了一种链。链是对象之间的连接。\n泛化 generation 就是继承关系，空心三角指向父类\n\n依赖关系dependence 大多情况，依赖关系体现在某个类的方法使用另一个类的对象作为参数\n虚心箭头表示，开车和司机的关系\n\n42.43uml，统一建模语言\n用例图：描述用户需求，从用户角度描述系统功能，椭圆为某个用户，人形为角色，帮助团队以一种可视化的方式理解系统功能需求\n活动图：通过动作来组织，主要描述一种方法，机制或用例的内部行为，涉及状态 活动转移分支 并发 同步\n静态结构图：【类图】，【对象图】，【包图】，【组合结构图】...\n部署图：deployment diagram 描述系统所需的硬件构件的物理部署\n\n[参考](http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html)\n\n\n44.45.46 组合模式，属于结构型模式，表示对象的整体，结构层次\n\n47.某些设计模式会引入总是被用作参数的对象 visitor 访问者模式对象是一个多态accept的参数\n命令模式：将请求封装为一个对象，可以将不通的请求对客户进行参数化\n责任链模式：chain of responsibility 模式将多个对象的请求连成一条链，并沿着这条连传递该请求，直到有一个对象处理他为止，主要是避免请求的发送者和接受者之间的耦合关系。\n观察者模式：定义对象之间的一种一对的依赖关系，当一个对象的状态发生改变时，所有依赖他的对象都得到通知并被自动更新。\n\n48.对高级语言源程序的编译或解释的过程可以分为多个阶段，解释方式不包括 目标代码生成。解释方式是没有目标代码生成的，与编译方式在词法，语法，语义方面大体相同，但在运行时直接执行源程序或源程序的内部形式，即解释程序不产生源程序的目标程序。这是与编译程序的主要区别。如php都是分析之后，解释成opcode码，然后解释执行，可以这么说，解释程序是参与程序的运行过程的。编译就是分开的。解释的控制器在解释程序。\n\n[参考](http://www.cnblogs.com/riskyer/p/3347865.html)\n\n49.\n\n50.递归下降分析法是一种自上而下的语法分析\n\n51.若关系R（h,l,m,p）的主键为全码，则关系的主键为为HLMP\n\n52.\n\n53.遗传算法的主要基因操作是选种、交配和突变，而在进化规则、进化策略中，进化机制源于选种和突变。就适应度的角度来说遗传算法用于选择优秀的父代(优秀的父代产生优秀的子代)，而进化规则和进化策略则用于选择子代(优秀的子代才能存在)。\n\n54.55.56 自然连接是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的 属性去掉。等值连接是不会去重重复属性列的。\n自然连接一定是等值连接，自然连接会把重复的属性移除。\n\n\n67.一个vlan【虚拟局域网】就是一个广播域。\n\n\n\n[1]: /img/ruankao/17-18.png\n\n","slug":"2015-ruankao-am","published":1,"updated":"2019-06-24T13:56:13.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35ve0058nsgvjrv9jxuy","content":"<p>1.计算机中cpu对其访问速度最快的是 通用寄存器&gt;CACHE&gt;内存》硬盘</p>\n<p>2.机器字长为N位的二进制数可以用补码来表示个不同的有符号定点小数。<br> 对正数来说，二进制的原码，反码，补码都相同。<br> 负数的反码为符号位不变，其他位取反。<br> 负数的补码为其反码+1<br> 带符号的数：机器数的最高位表示符号<br>定点数是小数点位置约定不变的数，小数点不占位置，定点数分为定点整数和定点小数<br>定点整数（纯整数）：约定小数点的位置在机器数的最低位之后<br>定点小数（纯小数）：约定小数点的位置在机器数的最高数值位之前（带符号数，最高数值位是在符号位之后）<br>符号位占一位，符号位也有0 和1的变化，即出现正数和负数<br>,8位为例：理论上有负数2^(n-1)-1 =127个、正数2^(n-1)-1=127 个再加上10000000和00000000 。共计256个。</p>\n<p>3.cache的地址映像中，发生冲突块最小的是<br>  1)．直接映象<br><a id=\"more\"></a><br>　　每个主存地址映像到Cache中的一个指定地址的方式，称为直接映象方式。在直接映象方式下，主存中存储单元的数据只可调入Cache中的一个位置，如果主存中另一个存储单元的数据也要调入该位置则将发生冲突。地址映像的方法一般是将主存空间按Cache的尺寸分区，每区内相同的块号映像到Cache 中相同的块位置。一般地，Cache被分为2N块，主存被分为同样大小的2M块，主存与Cache中块的对应关系可用如下映像函数表示：j = i mod 2N。式中，j是Cache中的块号，i是主存中的块号。　　</p>\n<p>　　直接映象是一种最简单的地址映像方式，它的地址变换速度快，而且不涉及其他两种映像方式中的替换策略问题。但是这种方式的块冲突概率较高，当称序往返访问两个相互冲突的块中的数据时，Cache的命中率将急剧下降，因为这时即使Cache中有其他空闲块，也因为固定的地址映像关系而无法应用。　　</p>\n<p>  2)．全相联映象　　　　</p>\n<p>　　主存中的每一个字块可映像到Cache任何一个字块位置上，这种方式称为全相联映像。这种方式只有当Cache中的块全部装满后才会出现块冲突，所以块冲突的概率低，可达到很高的Cache命中率；但实现很复杂。当访问一个块中的数据时，块地址要与Cache块表中的所有地址标记进行比较已确定是否命中。在数据块调入时存在着一个比较复杂的替换问题，即决定将数据块调入Cache中什么位置，将Cache中那一块数据调出主存。为了达到较高的速度，全部比较和替换都要用硬件实现。</p>\n<p>  3)．组相联映象　　　</p>\n<p>　　组相联映象方式是直接映象和全相联映象的一种折衷方案。这种方法将存储空间分为若干组，各组之间是直接映像，而组内各块之间则是全相联映像。它是上述两种映像方式的一般形式，如果组的大小为1，即Cache空间分为2N组，就变为直接映像；如果组的大小为Cache整个的尺寸，就变为了全相联映像。组相联方式在判断块命中及替换算法上都要比全相联方式简单，块冲突的概率比直接映像的低，其命中率也介于直接映像和全相联映像方式之间。</p>\n<p>  <a href=\"http://blog.csdn.net/kobesdu/article/details/39081189\" target=\"_blank\" rel=\"external\">参考</a> 　</p>\n<p>4.计算机中的cpu终端响应时间指的是 从发出中断请求到开始进入中断处理程序，要分清中断响应过程和中断服务过程</p>\n<p>5.总线宽度为32bit，时钟频率为200MHZ,若总线上每5个小时周期传送一个32bit的字，则该总线的宽度为<br>32bit*(200MHZ/5)/8bit=160MB<br>总线的带宽指的是这条总线在单位时间内可以传输的数据总量，它等于总线位宽与工作频率的乘积。例如，对于64位、800MHz的前端总线，它的数据传输率就等于64bit×800MHz÷8(Byte)=6.4GB/s；32位、33MHz PCI总线的数据传输率就是32bit×33MHz÷8=132MB/s，等等，这项法则可以用于所有并行总线上面——看到这里，读者应该明白我们所说的总线带宽指的就是它的数据传输率。<br><a href=\"http://baike.baidu.com/link?url=AIbVrUoI9cOptbbWoJaK2gd1pQbm4OWS7BDlE9MgNQ6UsBME35eOd0S8SZBswIiP_lwaHPB8xXeJ_oa4S9a3tTGNVwr6drJmsieSPN2xETQ8E7VscDXfRz0HLGzdOBUg\" target=\"_blank\" rel=\"external\">参考</a></p>\n<p>6.流水线性能：采用异步并不会明显提高性能。药师加速比和效率最大化应该对流水线各级采用相同的运行时间。</p>\n<p>7.SSH，安全套接层secure shell，建立在应用层基础上</p>\n<p>8.9.系统安全 漏洞补丁，应用安全 数据库安全</p>\n<p>10.11.软件产品也是作品的一种，公民拥有的为死后50年，企业为发布后50年，公民的署名权，修改权，保护作品完整权 是永远保护的<br>个人一般只有个署名权，其他的著作权都归公司。商标谁申请谁拥有，同时申请，谁先用，谁使用。专利，谁先申请谁拥有，同时那就协商去。或者抓阄。<br>著作权不需要申请就拥有。<br>专利同时申请的就协商，协商不成谁也不想要。</p>\n<p>12.13.媒体分为感觉媒体、表示媒体、表现媒体、存储媒体和传输媒体<br> 感觉媒体<br>感觉媒体指的是能直接作用于人们的感觉器官，从而能使人产生直接感觉的媒体。如文字、数据、声音、图形、图像等。<br>在多媒体计算机技术中，我们所说的媒体一般指的是感觉媒体。<br> 表示媒体<br>表示媒体指的是为了传输感觉媒体而人为研究出来的媒体，借助于此种媒体，能有效地存储感觉媒体或将感觉媒体从一个地方传送到另一个地方。如语言编码、电报码、条形码等。<br> 表现媒体<br>表现媒体指的是用于通信中使电信号和感觉媒体之间产生转换用的媒体。如输入、输出设备，包括键盘、鼠标器、显示器、打印机等。<br> 存储媒体<br>存储媒体指的是用于存放表示媒体的媒体。如纸张、磁带、磁盘、光盘等。</p>\n<p>传输媒体<br>传输媒体指的用于传输某种媒体的物理媒体。如双绞线、电缆、光纤等。</p>\n<p>14.</p>\n<p>15.软件工程的基本要素包括方法 工具和过程</p>\n<p>16.在概要设计阶段，选择适当的解决方案，将系统分解为若干个子系统，建立整个系统的体系结构</p>\n<p>17.18 ，关键路径算法</p>\n<p>你好，本题是考察项目的关键路径，关键路径：项目中时间最长的活动顺序，决定着可能的项目最短工期。<br>本题解题时需要先生成网络图，然后找出关键路径。<br>本题按照题干生成的图如下：</p>\n<p><img src=\"/img/ruankao/17-18.png\" alt=\"img\"><br>可以从图中发现ADEFH是最长的路径，也就是关键路径。<br>由于ADF都是关键路径上的活动，对其进行修改就会影响关键路径，而B不是关键路径上的活动，对其进行缩短，经过B的所有路径的时长都不会比关键路径长，即不会影响项目工期</p>\n<p>19.风险的优先级通常是根据 风险暴露risk exposure 来设定<br>风险暴露又称为风险曝光度，测量的是资产的整个安全性风险，他将表示实际损失的可能性与表示大量可能损失的资讯结合到单一数字评估中，风险曝光riskexposure=错误出现率 *错误造成损失（风险损失）</p>\n<p>20.程序设计语言中，局部变量的值是在运行时改变的</p>\n<p>21.算法表达式对应的树，对此二叉树进行先序，中序，后序遍历，便可以得到表达式的前缀，中缀和后缀书写形式。<br>中缀形式是算术表达式的通常形式，只是没有括号。使用后缀表达式更容易求职（在计算机中）</p>\n<p>22.c程序中全局变量的存储空间在静态数据区分配</p>\n<p>23.24.25记得v是增加信号量，p是减少信号量。用pv就能选出，不用是p几s几</p>\n<p>26.访问位为0的就把他淘汰掉</p>\n<p>27.28 嵌入式系统初始化分为片级初始化，板级初始化，系统级初始化。这是按照自底向上，从硬件到软件的次序依次进行的。<br>片级初始化完成嵌入式微处理器的初始化，包括设置嵌入式微处理器的核心寄存器和控制寄存器。片级初始化是一个纯硬件的过程。<br>板级初始化，同时需要设置一些数据结构和参数，同时包含软件和硬件在内的初始化过程。<br>系统初始化，系统分区，网络系统，文件系统等，最后将控制权交给应用程序的入口</p>\n<p>29.瀑布模型 文档驱动 系统可能不满足客户的需求<br>快速原型模型 关注满足客户需求 可能导致系统设计差、效率低，难于维护<br>增量模型 开发早期反馈及时，易于维护 需要开放式体系结构，可能会导致效率低下<br>螺旋模型 风险驱动 风险分析人员需要有经验且经过充分训练</p>\n<p>记住螺旋模型是有风险控制的就好</p>\n<p>30.敏捷开发<br>scrum【并列争球】：三个角色，四个会议，三个物件<br>极限编程【xp】：交流，朴素，反馈和勇气，近螺旋式开发方法<br>水晶方法srystal：提倡机动性方法，包含具有共性的核心元素，每个都含有独特的角色，过程模式，工作产品和实践七大体系特征：经常交付，反思改进，渗透式交流，个人安全，焦点，与专家用户建立方便的联系，配有自动测试，配置管理和经常集成功能的技术环境<br>DSDM dynamic system development management 动态系统开发方法：以业务为核心 用户持续参与，产品经常交付，迭代增量</p>\n<p>31.软件配置管理内容：版本控制，变更控制，过程支持</p>\n<p>32.内聚和耦合。内聚是从功能性角度，描述的是模块内功能性的关系。耦合是各个模块之间互相连接的一种度量。<br>耦合强弱取决于模块之间接口的复杂程度。<br>模块之间关系越紧密，耦合性就强，独立性就差</p>\n<p>内容耦合：一个模块直接访问另外一个模块内部数据；一个模块多个入口，这种耦合性最强。（目前高级语言不会有这种情况，最早出现在汇编）<br>公共耦合：一组模块都访问同一个全局数据结构，公共数据环境可以是全局数据结构，共享通信区，内存的公共覆盖区等<br>外部耦合:一组模块都访问同一全局简单变量，而且不通过参数表传递该全局变量信息，则称为外部耦合。<br>控制耦合：模块之间传递的不是数据信息，而是控制信息，如标志，开关量等，一个模块控制了另外一个模块的功能。<br>标记耦合：调用模块和被调用模块之间传递的数据结构而不是简单数据，同时也称作特征耦合，其实传递的是地址。</p>\n<p>数据耦合：调用模块和被调用模块之间只是传递简单的数据项参数，相当于高级语言值传递。</p>\n<p>非直接耦合：两个模块之间没有直接关系，他们之间的联系完全通过主模块的调用来实现的，耦合度最低，模块独立性最强。</p>\n<p>内聚：偶然内聚，没有任何关系，<br>逻辑内聚：调用时由传送模块参数传递<br>时间内聚：把需要执行的动作组合在一起形成模块<br>过程内聚：特定次数，特定关系<br>通信内聚模块内各个组成部分都使用相同的数据结构或产生相同的数据结构<br>顺序内聚：必须顺序执行<br>功能内聚是最强内聚</p>\n<p>某模块实现两个功能，向某个数据结构区域写数据和从该区域读数据，则该模块内聚类型为 通信内聚</p>\n<p>33.正规技术评审目的<br>（1）发现软件在功能、逻辑、实现上的错误；<br>（2）验证软件符合它的需求规格；<br>（3）确认软件符合预先定义的开发规范和标准；<br>（4）保证软件在统一的模式下进行开发；<br>（5）便于项目管理。<br>此外，正规技术评审为新手提供软件分析、设计和实现的培训途经，后备、后续开发人员也可以通过正规技术评审熟悉他人开发的软件。</p>\n<p>34.自顶向下集成</p>\n<p>目的：从顶层控制（主控模块）开始，采用同设计顺序一样的思路对被测系统进行测试，来验证系统的稳定性。<br>定义：自顶向下的集成测试就是按照系统层次结构图，以主程序模块为中心，自上而下按照深度优先或者广度优先策略，对各个模块一边组装一边进行测试。<br>方法：<br>①      把主控模块作为测试驱动，所有与主控模块直接相连的模块作为桩模块；<br>②                      根据集成的方式（深度优先或者广度优先），逐渐使用实际模块替换相应的下层桩模块；再用桩代替他们的直接下属模块，与已通过测试的模块或子系统组装成新的子系统。<br>③                      在每个模块被集成时，都必须已经通过了单元测试；<br>④                      进行回归测试（重新执行以前做过的全部或部分测试），以确定集成新模块后没有引入错误；<br>⑤                      从上述过程中的第二步开始重复执行，直到所有模块都已经集成到系统中为止。<br>优点：<br>①      在测试的过程中，可以较早地验证主要的控制和判断点。<br>② 选择深度优先组合方式，可以首先实现和验证一个完整的软件功能，可先对逻辑输入的分支进行组装和测试，检查和克服潜藏的错误和缺陷，<br>③      验证其功能的正确性，为此后主要分支的组装和测试提供保证；<br>④      能够较早的验证功能可行性，给开发者和用户带来成功的信心；<br>⑤      只有在个别情况下，才需要驱动程序（最多不超过一个），减少了测试驱动程序开发和维护的费用；<br>⑥      可以和开发设计工作一起并行执行集成测试，能够灵活的适应目标环境；<br>⑦      容易进行故障隔离和错误定位。<br> 缺点：<br>①      在测试时需要为每个模块的下层模块提供桩模块，桩模块的开发和维护费用大；<br>②      底层组件的需求变更可能会影响到全局组件，需要修改整个系统的多个上层模块。<br>③      要求控制模块具有比较高的可测试性；<br>④      可能会导致底层模块特别是被重用的模块测试不够充分。<br> 适用范围：<br>①      控制结构比较清晰和稳定的应用程序；<br>②      系统高层的模块接口变化的可能性比较小；<br>③      产品的低层模块接口还未定义或可能会经常因需求变更等原因被修改；<br>④      产品中的控制模块技术风险较大，需要尽可能提前验证；<br>⑤      需要尽早看到产品的系统功能行为；<br>⑥      在极限编程（Extreme Programming）中使用测试优先的开发方法。</p>\n<p>自底向上集成</p>\n<p>1) 目的：从依赖性最小的底层模块开始，按照层次结构图，逐层向上集成，验证系统的稳定性。<br>2) 定义：自底向上集成是从系统层次结构图的最底层模块开始进行组装和集成测试的方式。<br>3) 方法：<br>①      从最底层的模块开始组装，组合成一个能够完成制定的软件子功能的构件；<br>②      编制驱动程序，协调测试用例的输入与输出；<br>③      测试集成后的构件；<br>④      使用实际模块代替驱动程序，按程序结构向上组装测试后的构件；<br>⑤      重复上面的第二步，直到系统的最顶层模块被加入到系统中为止。<br>4) 优点：<br>①      即使数据流并未构成有向的非环状图，生成测试数据也没有困难。<br>②      可以尽早的验证底层模块的行为。<3>提高了测试效率；<br>③      对实际被测模块的可测试性要求要少；<br>④      减少了桩模块的工作量;<br>⑤      容易对错误进行定位。<br>5) 缺点<br>①      直到最后一个模块加进去之后才能看到整个系统的框架；<br>②      只有到测试过程的后期才能发现时序问题和资源竞争问题；<br>③      驱动模块的设计工作量大;<br>④      不能被及时发现高层模块设计上的错误。<br>6) 适用范围<br>① 底层模块接口比较稳定的产品；<br>② 高层模块接口变更比较频繁的产品；<br>③ 底层模块开发和单元测试工作完成较早的产品。</3></p>\n<p>自底向上的集成测试策略的优点 不需要编写桩程序，但是需要编写很多驱动模块</p>\n<p>35.mccabe 程序控制流程图中，节点是程序代码中最小的单元。边代表节点间的控制流，一个有e条边和n个节点的流程图f。其圈复杂度为e-f+2 ，边-点+2<br>10-8+2=4</p>\n<p>36.软件可维护性是衡量软件质量的一个重要特性，受到开发文档影响，可维护性也是软件开发阶段各个时期的关键目标，可以从可理解行，可靠性，可测试性，可行性，可移植性进行度量。</p>\n<p>37.对象是封闭数据和行为的整体</p>\n<p>38.面向对象程序设计选择合适的面向对象程序设计语言，将程序组织为相互协作的对象集合，每个对象表示某个类的实例，类通过继承等关系进行组织。<br>面向对象分析：主要任务是抽取和整理用户需求并建立问题域精确模型，<br>面向对象设计：采用协作的对象，对象的属性和方法说明软件解决方案的一种方式，强调的是定义软件对象和这些软件对象如何协作来满足要求，延续了面向对象分析。<br>面向对象实现：采用面向对象程序设计语言下hi线系统。<br>面向对象测试是根据规范来说明验证系统设计的正确性。</p>\n<p>39.一个类可以通过多个重名方法而参数类型列表示不通的方法，被称为重载方法</p>\n<p>40.41.UML关系<br>实现关系implementation：接口和类的实现，implements 带空心三角形的虚线来表示<br>组合关系composition：整体和部分关系，并且有统一的生存期。整体不存在，那么部分也不存在。比如头和嘴的关系。<br>组合关系用实心菱形。整体那边是实心菱形，部分那么是箭头。</p>\n<p>聚合关系aggregation整体和部分的关系，但是可以相互存在，就是部分可以脱离整体。比如电脑和显示器。整体那边是虚心菱形</p>\n<p>关联关系 association 一对一，多对多，自关联等，是一种结构关系，描述了一种链。链是对象之间的连接。<br>泛化 generation 就是继承关系，空心三角指向父类</p>\n<p>依赖关系dependence 大多情况，依赖关系体现在某个类的方法使用另一个类的对象作为参数<br>虚心箭头表示，开车和司机的关系</p>\n<p>42.43uml，统一建模语言<br>用例图：描述用户需求，从用户角度描述系统功能，椭圆为某个用户，人形为角色，帮助团队以一种可视化的方式理解系统功能需求<br>活动图：通过动作来组织，主要描述一种方法，机制或用例的内部行为，涉及状态 活动转移分支 并发 同步<br>静态结构图：【类图】，【对象图】，【包图】，【组合结构图】…<br>部署图：deployment diagram 描述系统所需的硬件构件的物理部署</p>\n<p><a href=\"http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html\" target=\"_blank\" rel=\"external\">参考</a></p>\n<p>44.45.46 组合模式，属于结构型模式，表示对象的整体，结构层次</p>\n<p>47.某些设计模式会引入总是被用作参数的对象 visitor 访问者模式对象是一个多态accept的参数<br>命令模式：将请求封装为一个对象，可以将不通的请求对客户进行参数化<br>责任链模式：chain of responsibility 模式将多个对象的请求连成一条链，并沿着这条连传递该请求，直到有一个对象处理他为止，主要是避免请求的发送者和接受者之间的耦合关系。<br>观察者模式：定义对象之间的一种一对的依赖关系，当一个对象的状态发生改变时，所有依赖他的对象都得到通知并被自动更新。</p>\n<p>48.对高级语言源程序的编译或解释的过程可以分为多个阶段，解释方式不包括 目标代码生成。解释方式是没有目标代码生成的，与编译方式在词法，语法，语义方面大体相同，但在运行时直接执行源程序或源程序的内部形式，即解释程序不产生源程序的目标程序。这是与编译程序的主要区别。如php都是分析之后，解释成opcode码，然后解释执行，可以这么说，解释程序是参与程序的运行过程的。编译就是分开的。解释的控制器在解释程序。</p>\n<p><a href=\"http://www.cnblogs.com/riskyer/p/3347865.html\" target=\"_blank\" rel=\"external\">参考</a></p>\n<p>49.</p>\n<p>50.递归下降分析法是一种自上而下的语法分析</p>\n<p>51.若关系R（h,l,m,p）的主键为全码，则关系的主键为为HLMP</p>\n<p>52.</p>\n<p>53.遗传算法的主要基因操作是选种、交配和突变，而在进化规则、进化策略中，进化机制源于选种和突变。就适应度的角度来说遗传算法用于选择优秀的父代(优秀的父代产生优秀的子代)，而进化规则和进化策略则用于选择子代(优秀的子代才能存在)。</p>\n<p>54.55.56 自然连接是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的 属性去掉。等值连接是不会去重重复属性列的。<br>自然连接一定是等值连接，自然连接会把重复的属性移除。</p>\n<p>67.一个vlan【虚拟局域网】就是一个广播域。</p>\n","site":{"data":{}},"excerpt":"<p>1.计算机中cpu对其访问速度最快的是 通用寄存器&gt;CACHE&gt;内存》硬盘</p>\n<p>2.机器字长为N位的二进制数可以用补码来表示个不同的有符号定点小数。<br> 对正数来说，二进制的原码，反码，补码都相同。<br> 负数的反码为符号位不变，其他位取反。<br> 负数的补码为其反码+1<br> 带符号的数：机器数的最高位表示符号<br>定点数是小数点位置约定不变的数，小数点不占位置，定点数分为定点整数和定点小数<br>定点整数（纯整数）：约定小数点的位置在机器数的最低位之后<br>定点小数（纯小数）：约定小数点的位置在机器数的最高数值位之前（带符号数，最高数值位是在符号位之后）<br>符号位占一位，符号位也有0 和1的变化，即出现正数和负数<br>,8位为例：理论上有负数2^(n-1)-1 =127个、正数2^(n-1)-1=127 个再加上10000000和00000000 。共计256个。</p>\n<p>3.cache的地址映像中，发生冲突块最小的是<br>  1)．直接映象<br>","more":"<br>　　每个主存地址映像到Cache中的一个指定地址的方式，称为直接映象方式。在直接映象方式下，主存中存储单元的数据只可调入Cache中的一个位置，如果主存中另一个存储单元的数据也要调入该位置则将发生冲突。地址映像的方法一般是将主存空间按Cache的尺寸分区，每区内相同的块号映像到Cache 中相同的块位置。一般地，Cache被分为2N块，主存被分为同样大小的2M块，主存与Cache中块的对应关系可用如下映像函数表示：j = i mod 2N。式中，j是Cache中的块号，i是主存中的块号。　　</p>\n<p>　　直接映象是一种最简单的地址映像方式，它的地址变换速度快，而且不涉及其他两种映像方式中的替换策略问题。但是这种方式的块冲突概率较高，当称序往返访问两个相互冲突的块中的数据时，Cache的命中率将急剧下降，因为这时即使Cache中有其他空闲块，也因为固定的地址映像关系而无法应用。　　</p>\n<p>  2)．全相联映象　　　　</p>\n<p>　　主存中的每一个字块可映像到Cache任何一个字块位置上，这种方式称为全相联映像。这种方式只有当Cache中的块全部装满后才会出现块冲突，所以块冲突的概率低，可达到很高的Cache命中率；但实现很复杂。当访问一个块中的数据时，块地址要与Cache块表中的所有地址标记进行比较已确定是否命中。在数据块调入时存在着一个比较复杂的替换问题，即决定将数据块调入Cache中什么位置，将Cache中那一块数据调出主存。为了达到较高的速度，全部比较和替换都要用硬件实现。</p>\n<p>  3)．组相联映象　　　</p>\n<p>　　组相联映象方式是直接映象和全相联映象的一种折衷方案。这种方法将存储空间分为若干组，各组之间是直接映像，而组内各块之间则是全相联映像。它是上述两种映像方式的一般形式，如果组的大小为1，即Cache空间分为2N组，就变为直接映像；如果组的大小为Cache整个的尺寸，就变为了全相联映像。组相联方式在判断块命中及替换算法上都要比全相联方式简单，块冲突的概率比直接映像的低，其命中率也介于直接映像和全相联映像方式之间。</p>\n<p>  <a href=\"http://blog.csdn.net/kobesdu/article/details/39081189\">参考</a> 　</p>\n<p>4.计算机中的cpu终端响应时间指的是 从发出中断请求到开始进入中断处理程序，要分清中断响应过程和中断服务过程</p>\n<p>5.总线宽度为32bit，时钟频率为200MHZ,若总线上每5个小时周期传送一个32bit的字，则该总线的宽度为<br>32bit*(200MHZ/5)/8bit=160MB<br>总线的带宽指的是这条总线在单位时间内可以传输的数据总量，它等于总线位宽与工作频率的乘积。例如，对于64位、800MHz的前端总线，它的数据传输率就等于64bit×800MHz÷8(Byte)=6.4GB/s；32位、33MHz PCI总线的数据传输率就是32bit×33MHz÷8=132MB/s，等等，这项法则可以用于所有并行总线上面——看到这里，读者应该明白我们所说的总线带宽指的就是它的数据传输率。<br><a href=\"http://baike.baidu.com/link?url=AIbVrUoI9cOptbbWoJaK2gd1pQbm4OWS7BDlE9MgNQ6UsBME35eOd0S8SZBswIiP_lwaHPB8xXeJ_oa4S9a3tTGNVwr6drJmsieSPN2xETQ8E7VscDXfRz0HLGzdOBUg\">参考</a></p>\n<p>6.流水线性能：采用异步并不会明显提高性能。药师加速比和效率最大化应该对流水线各级采用相同的运行时间。</p>\n<p>7.SSH，安全套接层secure shell，建立在应用层基础上</p>\n<p>8.9.系统安全 漏洞补丁，应用安全 数据库安全</p>\n<p>10.11.软件产品也是作品的一种，公民拥有的为死后50年，企业为发布后50年，公民的署名权，修改权，保护作品完整权 是永远保护的<br>个人一般只有个署名权，其他的著作权都归公司。商标谁申请谁拥有，同时申请，谁先用，谁使用。专利，谁先申请谁拥有，同时那就协商去。或者抓阄。<br>著作权不需要申请就拥有。<br>专利同时申请的就协商，协商不成谁也不想要。</p>\n<p>12.13.媒体分为感觉媒体、表示媒体、表现媒体、存储媒体和传输媒体<br> 感觉媒体<br>感觉媒体指的是能直接作用于人们的感觉器官，从而能使人产生直接感觉的媒体。如文字、数据、声音、图形、图像等。<br>在多媒体计算机技术中，我们所说的媒体一般指的是感觉媒体。<br> 表示媒体<br>表示媒体指的是为了传输感觉媒体而人为研究出来的媒体，借助于此种媒体，能有效地存储感觉媒体或将感觉媒体从一个地方传送到另一个地方。如语言编码、电报码、条形码等。<br> 表现媒体<br>表现媒体指的是用于通信中使电信号和感觉媒体之间产生转换用的媒体。如输入、输出设备，包括键盘、鼠标器、显示器、打印机等。<br> 存储媒体<br>存储媒体指的是用于存放表示媒体的媒体。如纸张、磁带、磁盘、光盘等。</p>\n<p>传输媒体<br>传输媒体指的用于传输某种媒体的物理媒体。如双绞线、电缆、光纤等。</p>\n<p>14.</p>\n<p>15.软件工程的基本要素包括方法 工具和过程</p>\n<p>16.在概要设计阶段，选择适当的解决方案，将系统分解为若干个子系统，建立整个系统的体系结构</p>\n<p>17.18 ，关键路径算法</p>\n<p>你好，本题是考察项目的关键路径，关键路径：项目中时间最长的活动顺序，决定着可能的项目最短工期。<br>本题解题时需要先生成网络图，然后找出关键路径。<br>本题按照题干生成的图如下：</p>\n<p><img src=\"/img/ruankao/17-18.png\" alt=\"img\"><br>可以从图中发现ADEFH是最长的路径，也就是关键路径。<br>由于ADF都是关键路径上的活动，对其进行修改就会影响关键路径，而B不是关键路径上的活动，对其进行缩短，经过B的所有路径的时长都不会比关键路径长，即不会影响项目工期</p>\n<p>19.风险的优先级通常是根据 风险暴露risk exposure 来设定<br>风险暴露又称为风险曝光度，测量的是资产的整个安全性风险，他将表示实际损失的可能性与表示大量可能损失的资讯结合到单一数字评估中，风险曝光riskexposure=错误出现率 *错误造成损失（风险损失）</p>\n<p>20.程序设计语言中，局部变量的值是在运行时改变的</p>\n<p>21.算法表达式对应的树，对此二叉树进行先序，中序，后序遍历，便可以得到表达式的前缀，中缀和后缀书写形式。<br>中缀形式是算术表达式的通常形式，只是没有括号。使用后缀表达式更容易求职（在计算机中）</p>\n<p>22.c程序中全局变量的存储空间在静态数据区分配</p>\n<p>23.24.25记得v是增加信号量，p是减少信号量。用pv就能选出，不用是p几s几</p>\n<p>26.访问位为0的就把他淘汰掉</p>\n<p>27.28 嵌入式系统初始化分为片级初始化，板级初始化，系统级初始化。这是按照自底向上，从硬件到软件的次序依次进行的。<br>片级初始化完成嵌入式微处理器的初始化，包括设置嵌入式微处理器的核心寄存器和控制寄存器。片级初始化是一个纯硬件的过程。<br>板级初始化，同时需要设置一些数据结构和参数，同时包含软件和硬件在内的初始化过程。<br>系统初始化，系统分区，网络系统，文件系统等，最后将控制权交给应用程序的入口</p>\n<p>29.瀑布模型 文档驱动 系统可能不满足客户的需求<br>快速原型模型 关注满足客户需求 可能导致系统设计差、效率低，难于维护<br>增量模型 开发早期反馈及时，易于维护 需要开放式体系结构，可能会导致效率低下<br>螺旋模型 风险驱动 风险分析人员需要有经验且经过充分训练</p>\n<p>记住螺旋模型是有风险控制的就好</p>\n<p>30.敏捷开发<br>scrum【并列争球】：三个角色，四个会议，三个物件<br>极限编程【xp】：交流，朴素，反馈和勇气，近螺旋式开发方法<br>水晶方法srystal：提倡机动性方法，包含具有共性的核心元素，每个都含有独特的角色，过程模式，工作产品和实践七大体系特征：经常交付，反思改进，渗透式交流，个人安全，焦点，与专家用户建立方便的联系，配有自动测试，配置管理和经常集成功能的技术环境<br>DSDM dynamic system development management 动态系统开发方法：以业务为核心 用户持续参与，产品经常交付，迭代增量</p>\n<p>31.软件配置管理内容：版本控制，变更控制，过程支持</p>\n<p>32.内聚和耦合。内聚是从功能性角度，描述的是模块内功能性的关系。耦合是各个模块之间互相连接的一种度量。<br>耦合强弱取决于模块之间接口的复杂程度。<br>模块之间关系越紧密，耦合性就强，独立性就差</p>\n<p>内容耦合：一个模块直接访问另外一个模块内部数据；一个模块多个入口，这种耦合性最强。（目前高级语言不会有这种情况，最早出现在汇编）<br>公共耦合：一组模块都访问同一个全局数据结构，公共数据环境可以是全局数据结构，共享通信区，内存的公共覆盖区等<br>外部耦合:一组模块都访问同一全局简单变量，而且不通过参数表传递该全局变量信息，则称为外部耦合。<br>控制耦合：模块之间传递的不是数据信息，而是控制信息，如标志，开关量等，一个模块控制了另外一个模块的功能。<br>标记耦合：调用模块和被调用模块之间传递的数据结构而不是简单数据，同时也称作特征耦合，其实传递的是地址。</p>\n<p>数据耦合：调用模块和被调用模块之间只是传递简单的数据项参数，相当于高级语言值传递。</p>\n<p>非直接耦合：两个模块之间没有直接关系，他们之间的联系完全通过主模块的调用来实现的，耦合度最低，模块独立性最强。</p>\n<p>内聚：偶然内聚，没有任何关系，<br>逻辑内聚：调用时由传送模块参数传递<br>时间内聚：把需要执行的动作组合在一起形成模块<br>过程内聚：特定次数，特定关系<br>通信内聚模块内各个组成部分都使用相同的数据结构或产生相同的数据结构<br>顺序内聚：必须顺序执行<br>功能内聚是最强内聚</p>\n<p>某模块实现两个功能，向某个数据结构区域写数据和从该区域读数据，则该模块内聚类型为 通信内聚</p>\n<p>33.正规技术评审目的<br>（1）发现软件在功能、逻辑、实现上的错误；<br>（2）验证软件符合它的需求规格；<br>（3）确认软件符合预先定义的开发规范和标准；<br>（4）保证软件在统一的模式下进行开发；<br>（5）便于项目管理。<br>此外，正规技术评审为新手提供软件分析、设计和实现的培训途经，后备、后续开发人员也可以通过正规技术评审熟悉他人开发的软件。</p>\n<p>34.自顶向下集成</p>\n<p>目的：从顶层控制（主控模块）开始，采用同设计顺序一样的思路对被测系统进行测试，来验证系统的稳定性。<br>定义：自顶向下的集成测试就是按照系统层次结构图，以主程序模块为中心，自上而下按照深度优先或者广度优先策略，对各个模块一边组装一边进行测试。<br>方法：<br>①      把主控模块作为测试驱动，所有与主控模块直接相连的模块作为桩模块；<br>②                      根据集成的方式（深度优先或者广度优先），逐渐使用实际模块替换相应的下层桩模块；再用桩代替他们的直接下属模块，与已通过测试的模块或子系统组装成新的子系统。<br>③                      在每个模块被集成时，都必须已经通过了单元测试；<br>④                      进行回归测试（重新执行以前做过的全部或部分测试），以确定集成新模块后没有引入错误；<br>⑤                      从上述过程中的第二步开始重复执行，直到所有模块都已经集成到系统中为止。<br>优点：<br>①      在测试的过程中，可以较早地验证主要的控制和判断点。<br>② 选择深度优先组合方式，可以首先实现和验证一个完整的软件功能，可先对逻辑输入的分支进行组装和测试，检查和克服潜藏的错误和缺陷，<br>③      验证其功能的正确性，为此后主要分支的组装和测试提供保证；<br>④      能够较早的验证功能可行性，给开发者和用户带来成功的信心；<br>⑤      只有在个别情况下，才需要驱动程序（最多不超过一个），减少了测试驱动程序开发和维护的费用；<br>⑥      可以和开发设计工作一起并行执行集成测试，能够灵活的适应目标环境；<br>⑦      容易进行故障隔离和错误定位。<br> 缺点：<br>①      在测试时需要为每个模块的下层模块提供桩模块，桩模块的开发和维护费用大；<br>②      底层组件的需求变更可能会影响到全局组件，需要修改整个系统的多个上层模块。<br>③      要求控制模块具有比较高的可测试性；<br>④      可能会导致底层模块特别是被重用的模块测试不够充分。<br> 适用范围：<br>①      控制结构比较清晰和稳定的应用程序；<br>②      系统高层的模块接口变化的可能性比较小；<br>③      产品的低层模块接口还未定义或可能会经常因需求变更等原因被修改；<br>④      产品中的控制模块技术风险较大，需要尽可能提前验证；<br>⑤      需要尽早看到产品的系统功能行为；<br>⑥      在极限编程（Extreme Programming）中使用测试优先的开发方法。</p>\n<p>自底向上集成</p>\n<p>1) 目的：从依赖性最小的底层模块开始，按照层次结构图，逐层向上集成，验证系统的稳定性。<br>2) 定义：自底向上集成是从系统层次结构图的最底层模块开始进行组装和集成测试的方式。<br>3) 方法：<br>①      从最底层的模块开始组装，组合成一个能够完成制定的软件子功能的构件；<br>②      编制驱动程序，协调测试用例的输入与输出；<br>③      测试集成后的构件；<br>④      使用实际模块代替驱动程序，按程序结构向上组装测试后的构件；<br>⑤      重复上面的第二步，直到系统的最顶层模块被加入到系统中为止。<br>4) 优点：<br>①      即使数据流并未构成有向的非环状图，生成测试数据也没有困难。<br>②      可以尽早的验证底层模块的行为。<3>提高了测试效率；<br>③      对实际被测模块的可测试性要求要少；<br>④      减少了桩模块的工作量;<br>⑤      容易对错误进行定位。<br>5) 缺点<br>①      直到最后一个模块加进去之后才能看到整个系统的框架；<br>②      只有到测试过程的后期才能发现时序问题和资源竞争问题；<br>③      驱动模块的设计工作量大;<br>④      不能被及时发现高层模块设计上的错误。<br>6) 适用范围<br>① 底层模块接口比较稳定的产品；<br>② 高层模块接口变更比较频繁的产品；<br>③ 底层模块开发和单元测试工作完成较早的产品。</p>\n<p>自底向上的集成测试策略的优点 不需要编写桩程序，但是需要编写很多驱动模块</p>\n<p>35.mccabe 程序控制流程图中，节点是程序代码中最小的单元。边代表节点间的控制流，一个有e条边和n个节点的流程图f。其圈复杂度为e-f+2 ，边-点+2<br>10-8+2=4</p>\n<p>36.软件可维护性是衡量软件质量的一个重要特性，受到开发文档影响，可维护性也是软件开发阶段各个时期的关键目标，可以从可理解行，可靠性，可测试性，可行性，可移植性进行度量。</p>\n<p>37.对象是封闭数据和行为的整体</p>\n<p>38.面向对象程序设计选择合适的面向对象程序设计语言，将程序组织为相互协作的对象集合，每个对象表示某个类的实例，类通过继承等关系进行组织。<br>面向对象分析：主要任务是抽取和整理用户需求并建立问题域精确模型，<br>面向对象设计：采用协作的对象，对象的属性和方法说明软件解决方案的一种方式，强调的是定义软件对象和这些软件对象如何协作来满足要求，延续了面向对象分析。<br>面向对象实现：采用面向对象程序设计语言下hi线系统。<br>面向对象测试是根据规范来说明验证系统设计的正确性。</p>\n<p>39.一个类可以通过多个重名方法而参数类型列表示不通的方法，被称为重载方法</p>\n<p>40.41.UML关系<br>实现关系implementation：接口和类的实现，implements 带空心三角形的虚线来表示<br>组合关系composition：整体和部分关系，并且有统一的生存期。整体不存在，那么部分也不存在。比如头和嘴的关系。<br>组合关系用实心菱形。整体那边是实心菱形，部分那么是箭头。</p>\n<p>聚合关系aggregation整体和部分的关系，但是可以相互存在，就是部分可以脱离整体。比如电脑和显示器。整体那边是虚心菱形</p>\n<p>关联关系 association 一对一，多对多，自关联等，是一种结构关系，描述了一种链。链是对象之间的连接。<br>泛化 generation 就是继承关系，空心三角指向父类</p>\n<p>依赖关系dependence 大多情况，依赖关系体现在某个类的方法使用另一个类的对象作为参数<br>虚心箭头表示，开车和司机的关系</p>\n<p>42.43uml，统一建模语言<br>用例图：描述用户需求，从用户角度描述系统功能，椭圆为某个用户，人形为角色，帮助团队以一种可视化的方式理解系统功能需求<br>活动图：通过动作来组织，主要描述一种方法，机制或用例的内部行为，涉及状态 活动转移分支 并发 同步<br>静态结构图：【类图】，【对象图】，【包图】，【组合结构图】…<br>部署图：deployment diagram 描述系统所需的硬件构件的物理部署</p>\n<p><a href=\"http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html\">参考</a></p>\n<p>44.45.46 组合模式，属于结构型模式，表示对象的整体，结构层次</p>\n<p>47.某些设计模式会引入总是被用作参数的对象 visitor 访问者模式对象是一个多态accept的参数<br>命令模式：将请求封装为一个对象，可以将不通的请求对客户进行参数化<br>责任链模式：chain of responsibility 模式将多个对象的请求连成一条链，并沿着这条连传递该请求，直到有一个对象处理他为止，主要是避免请求的发送者和接受者之间的耦合关系。<br>观察者模式：定义对象之间的一种一对的依赖关系，当一个对象的状态发生改变时，所有依赖他的对象都得到通知并被自动更新。</p>\n<p>48.对高级语言源程序的编译或解释的过程可以分为多个阶段，解释方式不包括 目标代码生成。解释方式是没有目标代码生成的，与编译方式在词法，语法，语义方面大体相同，但在运行时直接执行源程序或源程序的内部形式，即解释程序不产生源程序的目标程序。这是与编译程序的主要区别。如php都是分析之后，解释成opcode码，然后解释执行，可以这么说，解释程序是参与程序的运行过程的。编译就是分开的。解释的控制器在解释程序。</p>\n<p><a href=\"http://www.cnblogs.com/riskyer/p/3347865.html\">参考</a></p>\n<p>49.</p>\n<p>50.递归下降分析法是一种自上而下的语法分析</p>\n<p>51.若关系R（h,l,m,p）的主键为全码，则关系的主键为为HLMP</p>\n<p>52.</p>\n<p>53.遗传算法的主要基因操作是选种、交配和突变，而在进化规则、进化策略中，进化机制源于选种和突变。就适应度的角度来说遗传算法用于选择优秀的父代(优秀的父代产生优秀的子代)，而进化规则和进化策略则用于选择子代(优秀的子代才能存在)。</p>\n<p>54.55.56 自然连接是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的 属性去掉。等值连接是不会去重重复属性列的。<br>自然连接一定是等值连接，自然连接会把重复的属性移除。</p>\n<p>67.一个vlan【虚拟局域网】就是一个广播域。</p>"},{"title":"transfer_hue","date":"2019-06-24T11:14:33.000Z","_content":"\n\n\n\n# 欢迎及介绍\n1. cdh全称是cloudera open source distribution including apache hadoop的全称。\n2. hue登录用户名：cloudera 密码：cloudera\n3. 怎么用cdh\n    - 如何进行简单的数据挖掘和分析\n    - 让你老板给你涨工资~\n    - 某些点会用到cloudera manager，可能）导致有些功能无法正常运行。有些部件也会用到商业版本的许可才能正常使用。\n4. 避免以上问题，\n    1. 可以用express 版本（最少需要8G内存和2核心cpu）\n    2. 用企业版的试用版，试用版有60天的体验期。（最少需要10G内存和2核心cpu）\n\n# 二 入门 提取查询关系数据\n\n之后的教程中，我们将通过呈现一个关于DataCo公司的案例。我们的任务就是帮助这公司深入了解并解决一些问题。\n\n```\n剧情1\n王老板：吐沫星子漫天飞的谈谈大数据。。\n小明：hadoop吧那就。\n```\n\n```\n剧情2\nDataCo公司现在难题是：哪种产品消费者最喜欢买。当然一般想到的是查看一下关系数据库中的交易数据表，排序一下就知道了，有这么简单?\n但是更有效，更深入分析，且适合更大规模的，就要用到cdh平台（hadoop技术栈了）\n\n下面这个例子，我们用cdh做，让你感觉常用的关系型数据库那种方法没啥两样。让你用同等的时间下，还能出更多的BI类分析和其他报表，\n```\n\n首先我们需要一个工具（sqoop）把常用的RDBMS关系型数据库中的结构字段扔到HDFS中（当然是肯定保持同样的数据结构。）这样就类似一个从库，在hdfs上查询不会占用其他的查询压力。\n\n我们用一个优化的文件格式化工具`avro`，或者用`empala`做到上面这些工作。\n\n    \n    sqoop import-all-tables \\\n        -m 1 \\\n        --connect jdbc:mysql://quickstart:3306/retail_db \\\n        --username=retail_dba \\\n        --password=cloudera \\\n        --compression-codec=snappy \\\n        --as-parquetfile \\\n        --warehouse-dir=/user/hive/warehouse \\\n        --hive-import\n    \n    \n注意默认都会到default库，如果需要到指定库，需要增加--hive-database=yourdbname \\\n\n上面的`sqoop`命令做了很多工作，通过`mapreduce`任务，拉取mysql数据写入到`hdfs`（应该是用apache 的parquet列存储格式存储，该列式存储支持`hive` `impala` `pig`等多种查询引擎，而且适配多个计算框架，如mapreduce，`spark`等）。最终以指定（默认）表的方式体现对应mysql中的schema。\n\n`parquet`是用来再hadoop平台相关的统一的数据格式。与传统的行模式不同，他是以列存储。主要是为了分析一些特殊指定的数据，可以通过变量来分析关系数据。parquet能更优的存储与检索。\n\n现在我们直观的看一下刚刚插入的hive的具体目录\n\n    [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse\n    Found 7 items\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n\n通过 hadoop fs -ls 可以到指定标识为d的目录内继续查看，比如\n\n    [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories\n    Found 3 items\n    drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata\n    drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories/.signals\n    -rw-r--r--   1 cloudera supergroup       1957 2018-04-15 23:36 /user/hive/warehouse/categories/3e30822b-f7e7-4a0c-bde3-e61f3e373a11.parquet\n\n注意：parquet的文件数量指的是sqoop运行时，mappe任务的数量。因为我的是单节点，所以就是一个。\n\n\n我们追进来看一下元数据\n\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata\n        Found 1 items\n        drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata/schemas\n        Found 1 items\n        -rw-r--r--   1 cloudera supergroup        594 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n        [cloudera@quickstart ~]$ hadoop fs -cat  /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n        {\n          \"type\" : \"record\",\n          \"name\" : \"categories\",\n          \"doc\" : \"Sqoop import of categories\",\n          \"fields\" : [ {\n            \"name\" : \"category_id\",\n            \"type\" : [ \"null\", \"int\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_id\",\n            \"sqlType\" : \"4\"\n          }, {\n            \"name\" : \"category_department_id\",\n            \"type\" : [ \"null\", \"int\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_department_id\",\n            \"sqlType\" : \"4\"\n          }, {\n            \"name\" : \"category_name\",\n            \"type\" : [ \"null\", \"string\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_name\",\n            \"sqlType\" : \"12\"\n          } ],\n          \"tableName\" : \"categories\"\n\n当然我们在`hue`中用 `show create table categories`来查看，会看到和上面对应的信息\n\n        Show CREATE TABLE categories\n        \n        1\tCREATE TABLE `categories`(\n        2\t  `category_id` int, \n        3\t  `category_department_id` int, \n        4\t  `category_name` string)\n        5\tROW FORMAT SERDE \n        6\t  'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' \n        7\tSTORED AS INPUTFORMAT \n        8\t  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' \n        9\tOUTPUTFORMAT \n        10\t  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'\n        11\tLOCATION\n        12\t  'hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories'\n        13\tTBLPROPERTIES (\n        14\t  'COLUMN_STATS_ACCURATE'='false', \n        15\t  'avro.schema.url'='hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories/.metadata/schemas/1.avsc', \n        16\t  'kite.compression.type'='snappy', \n        17\t  'numFiles'='0', \n        18\t  'numRows'='-1', \n        19\t  'rawDataSize'='-1', \n        20\t  'totalSize'='0', \n\n另外我们在hive命令行中可以看到其他关于表的formated信息\n\n    hive> describe formatted customers;\n    OK\n    # col_name            \tdata_type           \tcomment             \n    \t \t \n    customer_id         \tint                 \t                    \n    customer_fname      \tstring              \t                    \n    customer_lname      \tstring              \t                    \n    customer_email      \tstring              \t                    \n    customer_password   \tstring              \t                    \n    customer_street     \tstring              \t                    \n    customer_city       \tstring              \t                    \n    customer_state      \tstring              \t                    \n    customer_zipcode    \tstring              \t                    \n    \t \t \n    # Detailed Table Information\t \t \n    Database:           \tdefault             \t \n    Owner:              \tnull                \t \n    CreateTime:         \tSun Apr 15 23:36:57 PDT 2018\t \n    LastAccessTime:     \tUNKNOWN             \t \n    Protect Mode:       \tNone                \t \n    Retention:          \t0                   \t \n    Location:           \thdfs://quickstart.cloudera:8020/user/hive/warehouse/customers\t \n    Table Type:         \tMANAGED_TABLE       \t \n    Table Parameters:\t \t \n    \tCOLUMN_STATS_ACCURATE\tfalse               \n    \tavro.schema.url     \thdfs://quickstart.cloudera:8020/user/hive/warehouse/customers/.metadata/schemas/1.avsc\n    \tkite.compression.type\tsnappy              \n    \tnumFiles            \t0                   \n    \tnumRows             \t-1                  \n    \trawDataSize         \t-1                  \n    \ttotalSize           \t0                   \n    \ttransient_lastDdlTime\t1523860617          \n    \t \t \n    Storage Information\t \t \n    SerDe Library:      \torg.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\t \n    InputFormat:        \torg.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\t \n    OutputFormat:       \torg.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\t \n    Compressed:         \tNo                  \t \n    Num Buckets:        \t-1                  \t \n    Bucket Columns:     \t[]                  \t \n    Sort Columns:       \t[]                  \t \n    Time taken: 0.069 seconds, Fetched: 39 row(s)\n\n\n当然创建表也可以利用外部已经存在的文件导入（`CREATE EXTERNAL TABLE`）的方式。以外部表导入的方式不会在hive的仓库中查看到（用hive或者impala都能实现），\n\n比如下面的例子,我们在hive中执行以下操作\n\n    CREATE EXTERNAL TABLE tb_test01(id INT,category_id INT, name string,price INT)\n    ROW FORMAT DELIMITED\n    FIELDS TERMINATED BY ','\n    STORED AS TEXTFILE\n    location '/user/hive/external/tb_external_table01';\n\nLOCATION指的是warehouse的存放路径，不指定就到hive.metastore.warehouse.dir指定的路径下\n(一般演示我习惯用TERMINATED ,分割)\n\n\nload 数据到刚刚创建的tb_test01表中，准备数据如下\n    \n    [cloudera@quickstart tongbo]$ cat hadoop_external_test.txt \n    1,24551,Cleats,17\n    2,22246,Men's Footwear,18\n    3,21035,Women's Apparel,24\n    4,19298,Indoor/Outdoor Games,46\n    5,17325,Fishing,45\n    6,15540,Water Sports,48\n    7,13729,Camping & Hiking,43\n    8,12487,Cardio Equipment,9\n    9,10984,Shop By Sport,29\n    10,2029,Electronics\n\n\n`LOAD data local inpath '/home/tongbo/hadoop_external_test.txt' into table tb_test01;`\n\n这样就实现了数据的导入。内部表和外部表的区别，简单概况如下：\nHive 创建内部表时，会将数据移动到数据仓库指向的路径（配置文件中配置）；\n若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。\n在删除表的时候，内部表的元数据和数 据会被一起删除，而外部表只删除元数据，不删除数据。\n\n\n下面主要说明如何用cdh中的hive（impala） web页面来进行查询操作。默认为8888端口，用户名和密码都是cloudera，mysql用户名为root，密码为cloudera\n\n在hive创建及查询等更新过程中，impala不会自动拉取跟新的元数据（metadata）的改变\n，所以第一件事情是更新metadata的时效，这样我们可以看到所有目前的表\n\n    invalidate metadata;\n    show tables;\n\n\n当然可以通过内置的hdfs看到实际存储的文件记录。\n\n---\n\n\n现在关系型数据库中的数据已经到了hdfs里面，回过头来看dataco公司的问题。\n\n下面的mysql展示了每个商品的总利润，并且取前十条\n\n        SELECT\n        \tcount(order_item_quantity) AS count,\n        \tc.category_name,\n        \tc.category_id\n        FROM\n        \torder_items AS oi\n        INNER JOIN products AS p ON p.product_id = oi.order_item_product_id\n        INNER JOIN categories AS c ON p.product_category_id = c.category_id\n        GROUP BY\n        \tc.category_name\n        ORDER BY\n        \tcount DESC\n        LIMIT 10;\n        +-------+----------------------+-------------+\n        | count | category_name        | category_id |\n        +-------+----------------------+-------------+\n        | 24551 | Cleats               |          17 |\n        | 22246 | Men's Footwear       |          18 |\n        | 21035 | Women's Apparel      |          24 |\n        | 19298 | Indoor/Outdoor Games |          46 |\n        | 17325 | Fishing              |          45 |\n        | 15540 | Water Sports         |          48 |\n        | 13729 | Camping & Hiking     |          43 |\n        | 12487 | Cardio Equipment     |           9 |\n        | 10984 | Shop By Sport        |          29 |\n        |  3156 | Electronics          |          13 |\n        +-------+----------------------+-------------+\n        10 rows in set (0.28 sec)\n        \n        mysql> \n\n\n下面是hive语法\n\n        select count(order_item_quantity) as count ,c.category_name,c.category_id from order_items as oi inner join products as p on p.product_id=oi.order_item_product_id\n        inner join categories as c on p.product_category_id=c.category_id group by c.category_name,c.category_id\n         order by count desc limit 10\n\n\n注意，hive语法中select后面不能有非聚合列，如果必须要有，需要在group by 上加上你要聚合的字段。在上述hive语法中就是加上 group by c.category_name,c.category_id\n\n        \n        1\t24551\tCleats\t17\n        2\t22246\tMen's Footwear\t18\n        3\t21035\tWomen's Apparel\t24\n        4\t19298\tIndoor/Outdoor Games\t46\n        5\t17325\tFishing\t45\n        6\t15540\tWater Sports\t48\n        7\t13729\tCamping & Hiking\t43\n        8\t12487\tCardio Equipment\t9\n        9\t10984\tShop By Sport\t29\n        10\t2029\tElectronics\n\n\n再看下面一个复杂的sql\n\n        SELECT\n        \tp.product_id,\n        \tp.product_name,\n        \tr.revenue\n        FROM\n        \tproducts AS p\n        INNER JOIN (\n        \tSELECT\n        \t\toi.order_item_product_id,\n        \t\tsum(\n        \t\t\tcast(\n        \t\t\t\toi.order_item_subtotal AS FLOAT\n        \t\t\t)\n        \t\t) AS revenue\n        \tFROM\n        \t\torder_items oi\n        \tINNER JOIN orders AS o ON oi.order_item_order_id = o.order_id\n        \tWHERE\n        \t\to.order_status <> 'CANCELED'\n        \tAND o.order_status <> 'SUSPECTED_FARUD'\n        \tGROUP BY\n        \t\torder_item_product_id\n        ) AS r ON p.product_id = r.order_item_product_id\n        ORDER BY\n        \tr.revenue DESC\n        LIMIT 10\n\n备注：SUSPECTED_FARUD 涉嫌欺诈\n\n结果如下：（记住这个结果，下面会用到）\n        \n        \tp.product_id \tp.product_name \t\t\t\tr.revenue\n        1\t1004\tField & Stream Sportsman 16 Gun Fire Safe\t6795260.4066467285\n        2\t365\tPerfect Fitness Perfect Rip Deck\t4335357.441116333\n        3\t957\tDiamondback Women's Serene Classic Comfort Bi\t4038330.9078979492\n        4\t191\tNike Men's Free 5.0+ Running Shoe\t3586941.2666854858\n        5\t502\tNike Men's Dri-FIT Victory Golf Polo\t3082050\n        6\t1073\tPelican Sunstream 100 Kayak\t3033648.3933258057\n        7\t403\tNike Men's CJ Elite 2 TD Football Cleat\t2831052.3296356201\n        8\t1014\tO'Brien Men's Neoprene Life Vest\t2830867.1741104126\n        9\t627\tUnder Armour Girls' Toddler Spine Surge Runni\t1242929.2107200623\n        10\t565\tadidas Youth Germany Black/Red Away Match Soc\t65940\n\n\n我用`impala`和`hive`分别执行上述语句。发现impala比hive快15倍左右。同时证明了我们用sqoop导入的数据结构（这里指metadata），适用于`hive`和`impala`两种引擎。\nhive非常的灵活，是把sql的查询语法转换成mapreduce任务。而impala更适合交互接口分析，我们下面会再次hive在etl中的使用。\n\n\n总结一下，我们完成了用sqoop把数据导入到hdfs中，然后把他转换为格式化为avro行式存储。（可以在深入了解avro和parquet的区别）\n经过以上过程，已经可以用hive或者impala查询数据。我们要更多了了解的是hadoop与传统架构相比，有更多的扩展和灵活性。\n\n    ```\n    剧情三：\n    \n    领导：（无所谓）的说，你只是展示了你的数据，而且你这些数据我也知道。并没有什么卵用（额外的价值）\n    你：也是一脸淡定的无所谓，然后撸起袖子准备干一下。。\n    ```\n\n\n练习2\n把结构化数据和非结构化数据结合起来\n作为基础运营，你现在有一点疑问：网站内浏览最多的商品就是卖的最多的吗？如果不是，导致原因是什么?\n\nhadoop可以存储结构化和半结构化的数据，而不必向关系型数据库那样，增加一个字段将同步所有的数据列。尤其是适用于web log日志这样的文件形式。我们查看一下最原始的访问站点的日志\n\n为了演示方便，我们批量导入180000条数据的access log。\n\n先在目录下创建一个目录，然后通过hadoop mv命令复制到warehouse下\n\n先看一下当前目录\n\n        cloudera@quickstart ~]$ hadoop fs -ls  /user/hive/warehouse\n        Found 7 items\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n        [cloudera@quickstart ~]$ \n        \n        [cloudera@quickstart ~]$ sudo -u hdfs hadoop fs -mkdir /user/hive/warehouse/origin_access_logs\n\n看一下准备好的日志文件：\n        [cloudera@quickstart ~]$ cd /opt/examples/log_files/\n        [cloudera@quickstart log_files]$ ls\n        access.log.2\n        [cloudera@quickstart log_files]$ du -f access.log.2 \n        du: invalid option -- 'f'\n        Try `du --help' for more information.\n        [cloudera@quickstart log_files]$ du -h access.log.2 \n        38M\taccess.log.2\n        [cloudera@quickstart log_files]$ \n\n执行复制\n\n        [cloudera@quickstart log_files]$ sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive/warehouse/origin_access_logs\n        \n        由于两次拼写错误，把之前的删除。。\n        [cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/origin__access_logs\n        Deleted /user/hive/warehouse/origin__access_logs\n        [cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/original_access_logs\n        Deleted /user/hive/warehouse/original_access_logs\n        [cloudera@quickstart log_files]$ \n\n验证一下上面的操作\n\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/origin_access_logs\n        Found 1 items\n        -rw-r--r--   1 hdfs supergroup   39593868 2018-04-17 23:41 /user/hive/warehouse/origin_access_logs/access.log.2\n        [cloudera@quickstart ~]$ \n\n现在我们可以创建一个表，然后用hive或者更腻害的impala来查询。我们需要以下两步：\n1. 利用hive强大灵活的serdes ，解析日志，到自定义的hive表中的各个字段中。（通过（反）序列化到自定义的文件字段中）\n2. 转移数据到中间表，以便不需要再次（反）序列化\n\n数据放入到表中之后，就可以通过cli或者hue查询啦。\n\n下面用hue创建表，并且导入。\n先贴一下单一一行格式，参考regex的写法\n\n        144.72.77.159 - - [14/Jun/2014:17:16:22 -0400] \"GET /department/fan%20shop/category/fishing/product/Field%20&%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe HTTP/1.1\" 200 1206 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:30.0) Gecko/20100101 Firefox/30.0\"\n        \n        \n        CREATE external TABLE intermediate_access_logs (\n        \tip string,\n        \tdate string,\n        \tmethod string,\n        \turl string,\n        \thttp_version string,\n        \tcode1 string,\n        \tcode2 string,\n        \tdash string,\n        \tuser_agent string\n        ) ROW format serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' WITH serdeproperties (\n        \t'input.regex' = '([^ ]*) - - \\\\[([^\\\\]]*)\\\\] \"([^\\ ]*) ([^\\ ]*) ([^\\ ]*)\" (\\\\d*) (\\\\d*) \"([^\"]*)\" \"([^\"]*)\"',\n        \t'output.format.string' = \"%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s\"\n        ) LOCATION '/user/hive/warehouse/origin_access_logs'\n\n创建完之后可以用上面讲到的命令在hive命令行执行。\n `describe formatted intermediate_access_logs;`\n\n`serde`这个关键词（应该是序列化，或者格式化），一般这样使用：\n用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。\n如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。\n在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，\nHive 通过 SerDe 确定表的具体的列的数据\n\n再说`location`这个关键词\n`EXTERNAL` 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）\n上面那句是) LOCATION '/user/hive/warehouse/origin_access_logs'\n\n另外插一句，上面说的内部表和外部表问题。\n首先建立一个演示外部表的目录（新建一个）\n`hadoop fs -mkdir -p /user/hive_external_table/`\n\n然后把原始日志放入到这个目录\n\n`sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive_external_table/`\n验证以上的结果\n\n        [cloudera@quickstart ~]$ hadoop fs -ls  /user/hive_external_table/\n        Found 1 items\n        -rw-r--r--   1 hdfs supergroup   39593868 2018-04-18 04:14 /user/hive_external_table/access.log.2\n        [cloudera@quickstart ~]$ \n        \n        \n        drop table intermediate_access_logs\n        \n        CREATE external TABLE intermediate_access_logs (\n        \tip string,\n        \tdate string,\n        \tmethod string,\n        \turl string,\n        \thttp_version string,\n        \tcode1 string,\n        \tcode2 string,\n        \tdash string,\n        \tuser_agent string\n        ) ROW format serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' WITH serdeproperties (\n        \t'input.regex' = '([^ ]*) - - \\\\[([^\\\\]]*)\\\\] \"([^\\ ]*) ([^\\ ]*) ([^\\ ]*)\" (\\\\d*) (\\\\d*) \"([^\"]*)\" \"([^\"]*)\"',\n        \t'output.format.string' = \"%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s\"\n        ) LOCATION ' /user/hive_external_table/'\n\n\n如果删除外部表，目录和文件都不会被删除，即使是指定和默认目录一样（比如创建外部表的时候指定 location 为/user/hive/warehouse/products）\n如果是删除内部表，目录和文件都会被删除。即使是指定的为非默认目录，同样都会被删除（比如创建内部表时指定 location 为 /user/hive_external_table）\n\n指定了目录之后，如果目录下有文件，将会自动加载所有\n\n\nCREATE EXTERNAL TABLE tokenized_access_logs (\n    ip STRING,\n    date STRING,\n    method STRING,\n    url STRING,\n    http_version STRING,\n    code1 STRING,\n    code2 STRING,\n    dash STRING,\n    user_agent STRING)\nROW FORMAT DELIMITED FIELDS TERMINATED BY ','\nLOCATION '/user/hive/warehouse/tokenized_access_logs';\n\n跳出来，我们继续上面练习。\n\nADD JAR /usr/lib/hive/lib/hive-contrib.jar;\n\nINSERT OVERWRITE TABLE tokenized_access_logs SELECT * FROM intermediate_access_logs;\n\n最后的查询会调用mapreduce任务（和sqoop一样），可以并行的将数据转移到tokenized_access_logs表中。上面提到过，对于新加的表，我们如果用impala的话，必须重新获取。\ninvalidate metadata;\n\nshow  tables\n\n我们可以看到刚刚创建的两个外部表。\n\n1\tcategories\n2\tcustomers\n3\tdepartments\n4\tintermediate_access_logs\n5\torder_items\n6\torders\n7\tproducts\n8\ttb_test01\n9\ttokenized_access_logs\n\n\n还是为了验证一下：查询url中包括product的url的总量，按照倒序排\n\nselect count(*) as nums,url from tokenized_access_logs where url like '%\\/product\\/%' group by url order by nums desc\n摘抄结果如下：（这里面要是有商品id可能会与下面的对比更明显些，nginx可以用cookie实现）\n \tnums\turl\n1\t1926\t/department/apparel/category/cleats/product/Perfect%20Fitness%20Perfect%20Rip%20Deck\n2\t1793\t/department/apparel/category/featured%20shops/product/adidas%20Kids'%20RG%20III%20Mid%20Football%20Cleat\n3\t1780\t/department/golf/category/women's%20apparel/product/Nike%20Men's%20Dri-FIT%20Victory%20Golf%20Polo\n4\t1757\t/department/apparel/category/men's%20footwear/product/Nike%20Men's%20CJ%20Elite%202%20TD%20Football%20Cleat\n5\t1104\t/department/fan%20shop/category/water%20sports/product/Pelican%20Sunstream%20100%20Kayak\n6\t1084\t/department/fan%20shop/category/indoor/outdoor%20games/product/O'Brien%20Men's%20Neoprene%20Life%20Vest\n7\t1059\t/department/fan%20shop/category/camping%20&%20hiking/product/Diamondback%20Women's%20Serene%20Classic%20Comfort%20Bi\n8\t1028\t/department/fan%20shop/category/fishing/product/Field%20&%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe\n9\t1004\t/department/footwear/category/cardio%20equipment/product/Nike%20Men's%20Free%205.0+%20Running%20Shoe\n10\t939\t/department/footwear/category/fitness%20accessories/product/Under%20Armour%20Hustle%20Storm%20Medium%20Duffle%20Bag\n对数据很敏感的人会联想到上面我们的一个结果，是统计商品id，商品名字，和贡献收入的，再贴一下\n\n1\t1004\tField & Stream Sportsman 16 Gun Fire Safe\t6795260.4066467285\n2\t365\tPerfect Fitness Perfect Rip Deck\t4335357.441116333 \n3\t957\tDiamondback Women's Serene Classic Comfort Bi\t4038330.9078979492\n4\t191\tNike Men's Free 5.0+ Running Shoe\t3586941.2666854858\n5\t502\tNike Men's Dri-FIT Victory Golf Polo\t3082050\n6\t1073\tPelican Sunstream 100 Kayak\t3033648.3933258057\n7\t403\tNike Men's CJ Elite 2 TD Football Cleat\t2831052.3296356201\n8\t1014\tO'Brien Men's Neoprene Life Vest\t2830867.1741104126\n9\t627\tUnder Armour Girls' Toddler Spine Surge Runni\t1242929.2107200623\n10\t565\tadidas Youth Germany Black/Red Away Match Soc\t65940\n\n\n通过简单对比，发现/department/apparel/category/featured%20shops/product/adidas%20Kids'%20RG%20III%20Mid%20Football%20Cleat这个url访问的数量占据第二。\n\n这里就会发现一些问题。\n\n实践证明，如果米没有一个大数据的结构化的分析工具。统计出以上时间可能会花费很多时间。不排除自己搭建的平台的容错兼容分布式等维护问题带来的数据损失。\n\n\n你帮老板发现了这个问题，老板很高兴，要给你资金支持。你准备大干一把了！\n\n实践三：市场部门要优化市场策略，想通过一些数据的交叉分析（关联性）把单独浏览量少的商品卖出去更多，或者再次统计一下倒数10的商品。\n\n快速的大数据分析，那就是用到apache的spark了。我们可以构建一个spark任务，直观展示商品之间的关联。\n\n通过以下命令执行\n[cloudera@quickstart ~]$ spark-shell --master yarn-client\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel).\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/usr/lib/zookeeper/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/flume-ng/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/parquet/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/avro/avro-tools-1.7.6-cdh5.12.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  '_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 1.6.0\n      /_/\n\nUsing Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67)\nType in expressions to have them evaluated.\nType :help for more information.\n18/04/23 19:59:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n18/04/23 19:59:59 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.\nSpark context available as sc (master = yarn-client, app id = application_1524536469679_0001).\nSQL context available as sqlContext.\n\n下一步，我们首先引入我们需要的类\nimport org.apache.hadoop.mapreduce.Job\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat\nimport org.apache.avro.generic.GenericRecord\nimport parquet.hadoop.ParquetInputFormat\nimport parquet.avro.AvroReadSupport\nimport org.apache.spark.rdd.RDD\n\n\nrdd是spark的核心，一个rdd可以理解为一个可以被分区的只读数据集（当然是分布式的）。一个rdd内有很多分区，分区内又有大量的数据记录。\nrdd的操作最终还是落到内存或者硬盘上。\n\n下面我们创建一个rdd，提供给order_items和products表使用\n\ndef rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {\n    val job = new Job()\n    FileInputFormat.setInputPaths(job, path)\n    ParquetInputFormat.setReadSupportClass(job,\n        classOf[AvroReadSupport[GenericRecord]])\n    return sc.newAPIHadoopRDD(job.getConfiguration,\n        classOf[ParquetInputFormat[GenericRecord]],\n        classOf[Void],\n        classOf[GenericRecord]).map(x => x._2)\n}\n\nval warehouse = \"hdfs://quickstart/user/hive/warehouse/\"\nval order_items = rddFromParquetHdfsFile(warehouse + \"order_items\");\nval products = rddFromParquetHdfsFile(warehouse + \"products\");\n\n下一步，我们从order_items表和products表提取出我们想要的数据，以一个列表的形式存在，包含name和quantity，以order排序。\nval orders = order_items.map { x => (\n    x.get(\"order_item_product_id\"),\n    (x.get(\"order_item_order_id\"), x.get(\"order_item_quantity\")))\n}.join(\n  products.map { x => (\n    x.get(\"product_id\"),\n    (x.get(\"product_name\")))\n  }\n).map(x => (\n    scala.Int.unbox(x._2._1._1), // order_id\n    (\n        scala.Int.unbox(x._2._1._2), // quantity\n        x._2._2.toString // product_name\n    )\n)).groupByKey()\n\n\n最后，我们衡量（tally）计算出订单中所有商品的组合次数，比如发现啤酒和纸尿裤这两个关联性特别高。\n按顺序排列拿到前10\n\nval cooccurrences = orders.map(order =>\n  (\n    order._1,\n    order._2.toList.combinations(2).map(order_pair =>\n        (\n            if (order_pair(0)._2 < order_pair(1)._2)\n                (order_pair(0)._2, order_pair(1)._2)\n            else\n                (order_pair(1)._2, order_pair(0)._2),\n            order_pair(0)._1 * order_pair(1)._1\n        )\n    )\n  )\n)\nval combos = cooccurrences.flatMap(x => x._2).reduceByKey((a, b) => a + b)\nval mostCommon = combos.map(x => (x._2, x._1)).sortByKey(false).take(10)\n\n最后打印结果\n\nprintln(mostCommon.deep.mkString(\"\\n\"))\n\nexit\n\n\n完整的代码如下：\n// First we're going to import the classes we need\n\nimport org.apache.hadoop.mapreduce.Job\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat\nimport org.apache.avro.generic.GenericRecord\nimport parquet.hadoop.ParquetInputFormat\nimport parquet.avro.AvroReadSupport\nimport org.apache.spark.rdd.RDD\n\n// Then we create RDD's for 2 of the files we imported from MySQL with Sqoop\n// RDD's are Spark's data structures for working with distributed datasets\n\ndef rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {\n    val job = new Job()\n    FileInputFormat.setInputPaths(job, path)\n    ParquetInputFormat.setReadSupportClass(job,\n        classOf[AvroReadSupport[GenericRecord]])\n    return sc.newAPIHadoopRDD(job.getConfiguration,\n        classOf[ParquetInputFormat[GenericRecord]],\n        classOf[Void],\n        classOf[GenericRecord]).map(x => x._2)\n}\n\nval warehouse = \"hdfs://quickstart/user/hive/warehouse/\"\nval order_items = rddFromParquetHdfsFile(warehouse + \"order_items\");\nval products = rddFromParquetHdfsFile(warehouse + \"products\");\n\n// Next, we extract the fields from order_items and products that we care about\n// and get a list of every product, its name and quantity, grouped by order\n\nval orders = order_items.map { x => (\n    x.get(\"order_item_product_id\"),\n    (x.get(\"order_item_order_id\"), x.get(\"order_item_quantity\")))\n}.join(\n  products.map { x => (\n    x.get(\"product_id\"),\n    (x.get(\"product_name\")))\n  }\n).map(x => (\n    scala.Int.unbox(x._2._1._1), // order_id\n    (\n        scala.Int.unbox(x._2._1._2), // quantity\n        x._2._2.toString // product_name\n    )\n)).groupByKey()\n\n// Finally, we tally how many times each combination of products appears\n// together in an order, then we sort them and take the 10 most common\n\nval cooccurrences = orders.map(order =>\n  (\n    order._1,\n    order._2.toList.combinations(2).map(order_pair =>\n        (\n            if (order_pair(0)._2 < order_pair(1)._2)\n                (order_pair(0)._2, order_pair(1)._2)\n            else\n                (order_pair(1)._2, order_pair(0)._2),\n            order_pair(0)._1 * order_pair(1)._1\n        )\n    )\n  )\n)\nval combos = cooccurrences.flatMap(x => x._2).reduceByKey((a, b) => a + b)\nval mostCommon = combos.map(x => (x._2, x._1)).sortByKey(false).take(10)\n\n// We print our results, 1 per line, and exit the Spark shell\n\nprintln(mostCommon.deep.mkString(\"\\n\"))\n\nexit\n\n\n结果如下：\n\nscala> println(mostCommon.deep.mkString(\"\\n\"))\n(67876,(Nike Men's Dri-FIT Victory Golf Polo,Perfect Fitness Perfect Rip Deck))\n(62924,(O'Brien Men's Neoprene Life Vest,Perfect Fitness Perfect Rip Deck))\n(54399,(Nike Men's Dri-FIT Victory Golf Polo,O'Brien Men's Neoprene Life Vest))\n(39656,(Nike Men's Free 5.0+ Running Shoe,Perfect Fitness Perfect Rip Deck))\n(39314,(Perfect Fitness Perfect Rip Deck,Perfect Fitness Perfect Rip Deck))\n(35092,(Perfect Fitness Perfect Rip Deck,Under Armour Girls' Toddler Spine Surge Runni))\n(33750,(Nike Men's Dri-FIT Victory Golf Polo,Nike Men's Free 5.0+ Running Shoe))\n(33406,(Nike Men's Free 5.0+ Running Shoe,O'Brien Men's Neoprene Life Vest))\n(29835,(Nike Men's Dri-FIT Victory Golf Polo,Nike Men's Dri-FIT Victory Golf Polo))\n(29342,(Nike Men's Dri-FIT Victory Golf Polo,Under Armour Girls' Toddler Spine Surge Run\n\n\n\n简单的说，map就是通过提取过滤指定的字段，进行方法的invoke map。reduce是join && group by。\n\n如果没有spark这种分析工具，统计这些数据是很话费时间并且很困难。然后用scala几行代码。你就会分析出来订单中n多商品的相互关联性。\n并且花费很少时间。\n\n翻篇儿：\n\n领导找你：数据有问题，赶紧过来看，怎么干的事情！\n\n你:刚得瑟几天，怎么出大事了，赶紧去看看what happened\n\n\n现在我们讲一讲实时的日志同步，并且以多维度去筛选。用到的是apache的flume 和apache的solr。钻取（drill down）和探取（exploration）\n\n\nsolr以类sql形式组织数据。每条数据也是叫document（文档或者集合），每个文档包含字段（类似于mysql的schema），\nsolr的数据很灵活，而且可以全文索引中某个字段。solr也是把数据分布式放在各个分片上。并且在查询的时候可以自动均衡，提高响应速度。\n\nsolr就不说了，现在都是elk了。。\n\n完\n\n\n\n","source":"_posts/transfer-hue.md","raw":"---\ntitle: transfer_hue\ndate: 2019-06-24 19:14:33\ntags:\n---\n\n\n\n\n# 欢迎及介绍\n1. cdh全称是cloudera open source distribution including apache hadoop的全称。\n2. hue登录用户名：cloudera 密码：cloudera\n3. 怎么用cdh\n    - 如何进行简单的数据挖掘和分析\n    - 让你老板给你涨工资~\n    - 某些点会用到cloudera manager，可能）导致有些功能无法正常运行。有些部件也会用到商业版本的许可才能正常使用。\n4. 避免以上问题，\n    1. 可以用express 版本（最少需要8G内存和2核心cpu）\n    2. 用企业版的试用版，试用版有60天的体验期。（最少需要10G内存和2核心cpu）\n\n# 二 入门 提取查询关系数据\n\n之后的教程中，我们将通过呈现一个关于DataCo公司的案例。我们的任务就是帮助这公司深入了解并解决一些问题。\n\n```\n剧情1\n王老板：吐沫星子漫天飞的谈谈大数据。。\n小明：hadoop吧那就。\n```\n\n```\n剧情2\nDataCo公司现在难题是：哪种产品消费者最喜欢买。当然一般想到的是查看一下关系数据库中的交易数据表，排序一下就知道了，有这么简单?\n但是更有效，更深入分析，且适合更大规模的，就要用到cdh平台（hadoop技术栈了）\n\n下面这个例子，我们用cdh做，让你感觉常用的关系型数据库那种方法没啥两样。让你用同等的时间下，还能出更多的BI类分析和其他报表，\n```\n\n首先我们需要一个工具（sqoop）把常用的RDBMS关系型数据库中的结构字段扔到HDFS中（当然是肯定保持同样的数据结构。）这样就类似一个从库，在hdfs上查询不会占用其他的查询压力。\n\n我们用一个优化的文件格式化工具`avro`，或者用`empala`做到上面这些工作。\n\n    \n    sqoop import-all-tables \\\n        -m 1 \\\n        --connect jdbc:mysql://quickstart:3306/retail_db \\\n        --username=retail_dba \\\n        --password=cloudera \\\n        --compression-codec=snappy \\\n        --as-parquetfile \\\n        --warehouse-dir=/user/hive/warehouse \\\n        --hive-import\n    \n    \n注意默认都会到default库，如果需要到指定库，需要增加--hive-database=yourdbname \\\n\n上面的`sqoop`命令做了很多工作，通过`mapreduce`任务，拉取mysql数据写入到`hdfs`（应该是用apache 的parquet列存储格式存储，该列式存储支持`hive` `impala` `pig`等多种查询引擎，而且适配多个计算框架，如mapreduce，`spark`等）。最终以指定（默认）表的方式体现对应mysql中的schema。\n\n`parquet`是用来再hadoop平台相关的统一的数据格式。与传统的行模式不同，他是以列存储。主要是为了分析一些特殊指定的数据，可以通过变量来分析关系数据。parquet能更优的存储与检索。\n\n现在我们直观的看一下刚刚插入的hive的具体目录\n\n    [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse\n    Found 7 items\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\n    drwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n\n通过 hadoop fs -ls 可以到指定标识为d的目录内继续查看，比如\n\n    [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories\n    Found 3 items\n    drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata\n    drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories/.signals\n    -rw-r--r--   1 cloudera supergroup       1957 2018-04-15 23:36 /user/hive/warehouse/categories/3e30822b-f7e7-4a0c-bde3-e61f3e373a11.parquet\n\n注意：parquet的文件数量指的是sqoop运行时，mappe任务的数量。因为我的是单节点，所以就是一个。\n\n\n我们追进来看一下元数据\n\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata\n        Found 1 items\n        drwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata/schemas\n        Found 1 items\n        -rw-r--r--   1 cloudera supergroup        594 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n        [cloudera@quickstart ~]$ hadoop fs -cat  /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n        {\n          \"type\" : \"record\",\n          \"name\" : \"categories\",\n          \"doc\" : \"Sqoop import of categories\",\n          \"fields\" : [ {\n            \"name\" : \"category_id\",\n            \"type\" : [ \"null\", \"int\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_id\",\n            \"sqlType\" : \"4\"\n          }, {\n            \"name\" : \"category_department_id\",\n            \"type\" : [ \"null\", \"int\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_department_id\",\n            \"sqlType\" : \"4\"\n          }, {\n            \"name\" : \"category_name\",\n            \"type\" : [ \"null\", \"string\" ],\n            \"default\" : null,\n            \"columnName\" : \"category_name\",\n            \"sqlType\" : \"12\"\n          } ],\n          \"tableName\" : \"categories\"\n\n当然我们在`hue`中用 `show create table categories`来查看，会看到和上面对应的信息\n\n        Show CREATE TABLE categories\n        \n        1\tCREATE TABLE `categories`(\n        2\t  `category_id` int, \n        3\t  `category_department_id` int, \n        4\t  `category_name` string)\n        5\tROW FORMAT SERDE \n        6\t  'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' \n        7\tSTORED AS INPUTFORMAT \n        8\t  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' \n        9\tOUTPUTFORMAT \n        10\t  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'\n        11\tLOCATION\n        12\t  'hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories'\n        13\tTBLPROPERTIES (\n        14\t  'COLUMN_STATS_ACCURATE'='false', \n        15\t  'avro.schema.url'='hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories/.metadata/schemas/1.avsc', \n        16\t  'kite.compression.type'='snappy', \n        17\t  'numFiles'='0', \n        18\t  'numRows'='-1', \n        19\t  'rawDataSize'='-1', \n        20\t  'totalSize'='0', \n\n另外我们在hive命令行中可以看到其他关于表的formated信息\n\n    hive> describe formatted customers;\n    OK\n    # col_name            \tdata_type           \tcomment             \n    \t \t \n    customer_id         \tint                 \t                    \n    customer_fname      \tstring              \t                    \n    customer_lname      \tstring              \t                    \n    customer_email      \tstring              \t                    \n    customer_password   \tstring              \t                    \n    customer_street     \tstring              \t                    \n    customer_city       \tstring              \t                    \n    customer_state      \tstring              \t                    \n    customer_zipcode    \tstring              \t                    \n    \t \t \n    # Detailed Table Information\t \t \n    Database:           \tdefault             \t \n    Owner:              \tnull                \t \n    CreateTime:         \tSun Apr 15 23:36:57 PDT 2018\t \n    LastAccessTime:     \tUNKNOWN             \t \n    Protect Mode:       \tNone                \t \n    Retention:          \t0                   \t \n    Location:           \thdfs://quickstart.cloudera:8020/user/hive/warehouse/customers\t \n    Table Type:         \tMANAGED_TABLE       \t \n    Table Parameters:\t \t \n    \tCOLUMN_STATS_ACCURATE\tfalse               \n    \tavro.schema.url     \thdfs://quickstart.cloudera:8020/user/hive/warehouse/customers/.metadata/schemas/1.avsc\n    \tkite.compression.type\tsnappy              \n    \tnumFiles            \t0                   \n    \tnumRows             \t-1                  \n    \trawDataSize         \t-1                  \n    \ttotalSize           \t0                   \n    \ttransient_lastDdlTime\t1523860617          \n    \t \t \n    Storage Information\t \t \n    SerDe Library:      \torg.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\t \n    InputFormat:        \torg.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\t \n    OutputFormat:       \torg.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\t \n    Compressed:         \tNo                  \t \n    Num Buckets:        \t-1                  \t \n    Bucket Columns:     \t[]                  \t \n    Sort Columns:       \t[]                  \t \n    Time taken: 0.069 seconds, Fetched: 39 row(s)\n\n\n当然创建表也可以利用外部已经存在的文件导入（`CREATE EXTERNAL TABLE`）的方式。以外部表导入的方式不会在hive的仓库中查看到（用hive或者impala都能实现），\n\n比如下面的例子,我们在hive中执行以下操作\n\n    CREATE EXTERNAL TABLE tb_test01(id INT,category_id INT, name string,price INT)\n    ROW FORMAT DELIMITED\n    FIELDS TERMINATED BY ','\n    STORED AS TEXTFILE\n    location '/user/hive/external/tb_external_table01';\n\nLOCATION指的是warehouse的存放路径，不指定就到hive.metastore.warehouse.dir指定的路径下\n(一般演示我习惯用TERMINATED ,分割)\n\n\nload 数据到刚刚创建的tb_test01表中，准备数据如下\n    \n    [cloudera@quickstart tongbo]$ cat hadoop_external_test.txt \n    1,24551,Cleats,17\n    2,22246,Men's Footwear,18\n    3,21035,Women's Apparel,24\n    4,19298,Indoor/Outdoor Games,46\n    5,17325,Fishing,45\n    6,15540,Water Sports,48\n    7,13729,Camping & Hiking,43\n    8,12487,Cardio Equipment,9\n    9,10984,Shop By Sport,29\n    10,2029,Electronics\n\n\n`LOAD data local inpath '/home/tongbo/hadoop_external_test.txt' into table tb_test01;`\n\n这样就实现了数据的导入。内部表和外部表的区别，简单概况如下：\nHive 创建内部表时，会将数据移动到数据仓库指向的路径（配置文件中配置）；\n若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。\n在删除表的时候，内部表的元数据和数 据会被一起删除，而外部表只删除元数据，不删除数据。\n\n\n下面主要说明如何用cdh中的hive（impala） web页面来进行查询操作。默认为8888端口，用户名和密码都是cloudera，mysql用户名为root，密码为cloudera\n\n在hive创建及查询等更新过程中，impala不会自动拉取跟新的元数据（metadata）的改变\n，所以第一件事情是更新metadata的时效，这样我们可以看到所有目前的表\n\n    invalidate metadata;\n    show tables;\n\n\n当然可以通过内置的hdfs看到实际存储的文件记录。\n\n---\n\n\n现在关系型数据库中的数据已经到了hdfs里面，回过头来看dataco公司的问题。\n\n下面的mysql展示了每个商品的总利润，并且取前十条\n\n        SELECT\n        \tcount(order_item_quantity) AS count,\n        \tc.category_name,\n        \tc.category_id\n        FROM\n        \torder_items AS oi\n        INNER JOIN products AS p ON p.product_id = oi.order_item_product_id\n        INNER JOIN categories AS c ON p.product_category_id = c.category_id\n        GROUP BY\n        \tc.category_name\n        ORDER BY\n        \tcount DESC\n        LIMIT 10;\n        +-------+----------------------+-------------+\n        | count | category_name        | category_id |\n        +-------+----------------------+-------------+\n        | 24551 | Cleats               |          17 |\n        | 22246 | Men's Footwear       |          18 |\n        | 21035 | Women's Apparel      |          24 |\n        | 19298 | Indoor/Outdoor Games |          46 |\n        | 17325 | Fishing              |          45 |\n        | 15540 | Water Sports         |          48 |\n        | 13729 | Camping & Hiking     |          43 |\n        | 12487 | Cardio Equipment     |           9 |\n        | 10984 | Shop By Sport        |          29 |\n        |  3156 | Electronics          |          13 |\n        +-------+----------------------+-------------+\n        10 rows in set (0.28 sec)\n        \n        mysql> \n\n\n下面是hive语法\n\n        select count(order_item_quantity) as count ,c.category_name,c.category_id from order_items as oi inner join products as p on p.product_id=oi.order_item_product_id\n        inner join categories as c on p.product_category_id=c.category_id group by c.category_name,c.category_id\n         order by count desc limit 10\n\n\n注意，hive语法中select后面不能有非聚合列，如果必须要有，需要在group by 上加上你要聚合的字段。在上述hive语法中就是加上 group by c.category_name,c.category_id\n\n        \n        1\t24551\tCleats\t17\n        2\t22246\tMen's Footwear\t18\n        3\t21035\tWomen's Apparel\t24\n        4\t19298\tIndoor/Outdoor Games\t46\n        5\t17325\tFishing\t45\n        6\t15540\tWater Sports\t48\n        7\t13729\tCamping & Hiking\t43\n        8\t12487\tCardio Equipment\t9\n        9\t10984\tShop By Sport\t29\n        10\t2029\tElectronics\n\n\n再看下面一个复杂的sql\n\n        SELECT\n        \tp.product_id,\n        \tp.product_name,\n        \tr.revenue\n        FROM\n        \tproducts AS p\n        INNER JOIN (\n        \tSELECT\n        \t\toi.order_item_product_id,\n        \t\tsum(\n        \t\t\tcast(\n        \t\t\t\toi.order_item_subtotal AS FLOAT\n        \t\t\t)\n        \t\t) AS revenue\n        \tFROM\n        \t\torder_items oi\n        \tINNER JOIN orders AS o ON oi.order_item_order_id = o.order_id\n        \tWHERE\n        \t\to.order_status <> 'CANCELED'\n        \tAND o.order_status <> 'SUSPECTED_FARUD'\n        \tGROUP BY\n        \t\torder_item_product_id\n        ) AS r ON p.product_id = r.order_item_product_id\n        ORDER BY\n        \tr.revenue DESC\n        LIMIT 10\n\n备注：SUSPECTED_FARUD 涉嫌欺诈\n\n结果如下：（记住这个结果，下面会用到）\n        \n        \tp.product_id \tp.product_name \t\t\t\tr.revenue\n        1\t1004\tField & Stream Sportsman 16 Gun Fire Safe\t6795260.4066467285\n        2\t365\tPerfect Fitness Perfect Rip Deck\t4335357.441116333\n        3\t957\tDiamondback Women's Serene Classic Comfort Bi\t4038330.9078979492\n        4\t191\tNike Men's Free 5.0+ Running Shoe\t3586941.2666854858\n        5\t502\tNike Men's Dri-FIT Victory Golf Polo\t3082050\n        6\t1073\tPelican Sunstream 100 Kayak\t3033648.3933258057\n        7\t403\tNike Men's CJ Elite 2 TD Football Cleat\t2831052.3296356201\n        8\t1014\tO'Brien Men's Neoprene Life Vest\t2830867.1741104126\n        9\t627\tUnder Armour Girls' Toddler Spine Surge Runni\t1242929.2107200623\n        10\t565\tadidas Youth Germany Black/Red Away Match Soc\t65940\n\n\n我用`impala`和`hive`分别执行上述语句。发现impala比hive快15倍左右。同时证明了我们用sqoop导入的数据结构（这里指metadata），适用于`hive`和`impala`两种引擎。\nhive非常的灵活，是把sql的查询语法转换成mapreduce任务。而impala更适合交互接口分析，我们下面会再次hive在etl中的使用。\n\n\n总结一下，我们完成了用sqoop把数据导入到hdfs中，然后把他转换为格式化为avro行式存储。（可以在深入了解avro和parquet的区别）\n经过以上过程，已经可以用hive或者impala查询数据。我们要更多了了解的是hadoop与传统架构相比，有更多的扩展和灵活性。\n\n    ```\n    剧情三：\n    \n    领导：（无所谓）的说，你只是展示了你的数据，而且你这些数据我也知道。并没有什么卵用（额外的价值）\n    你：也是一脸淡定的无所谓，然后撸起袖子准备干一下。。\n    ```\n\n\n练习2\n把结构化数据和非结构化数据结合起来\n作为基础运营，你现在有一点疑问：网站内浏览最多的商品就是卖的最多的吗？如果不是，导致原因是什么?\n\nhadoop可以存储结构化和半结构化的数据，而不必向关系型数据库那样，增加一个字段将同步所有的数据列。尤其是适用于web log日志这样的文件形式。我们查看一下最原始的访问站点的日志\n\n为了演示方便，我们批量导入180000条数据的access log。\n\n先在目录下创建一个目录，然后通过hadoop mv命令复制到warehouse下\n\n先看一下当前目录\n\n        cloudera@quickstart ~]$ hadoop fs -ls  /user/hive/warehouse\n        Found 7 items\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\n        drwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n        [cloudera@quickstart ~]$ \n        \n        [cloudera@quickstart ~]$ sudo -u hdfs hadoop fs -mkdir /user/hive/warehouse/origin_access_logs\n\n看一下准备好的日志文件：\n        [cloudera@quickstart ~]$ cd /opt/examples/log_files/\n        [cloudera@quickstart log_files]$ ls\n        access.log.2\n        [cloudera@quickstart log_files]$ du -f access.log.2 \n        du: invalid option -- 'f'\n        Try `du --help' for more information.\n        [cloudera@quickstart log_files]$ du -h access.log.2 \n        38M\taccess.log.2\n        [cloudera@quickstart log_files]$ \n\n执行复制\n\n        [cloudera@quickstart log_files]$ sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive/warehouse/origin_access_logs\n        \n        由于两次拼写错误，把之前的删除。。\n        [cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/origin__access_logs\n        Deleted /user/hive/warehouse/origin__access_logs\n        [cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/original_access_logs\n        Deleted /user/hive/warehouse/original_access_logs\n        [cloudera@quickstart log_files]$ \n\n验证一下上面的操作\n\n        [cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/origin_access_logs\n        Found 1 items\n        -rw-r--r--   1 hdfs supergroup   39593868 2018-04-17 23:41 /user/hive/warehouse/origin_access_logs/access.log.2\n        [cloudera@quickstart ~]$ \n\n现在我们可以创建一个表，然后用hive或者更腻害的impala来查询。我们需要以下两步：\n1. 利用hive强大灵活的serdes ，解析日志，到自定义的hive表中的各个字段中。（通过（反）序列化到自定义的文件字段中）\n2. 转移数据到中间表，以便不需要再次（反）序列化\n\n数据放入到表中之后，就可以通过cli或者hue查询啦。\n\n下面用hue创建表，并且导入。\n先贴一下单一一行格式，参考regex的写法\n\n        144.72.77.159 - - [14/Jun/2014:17:16:22 -0400] \"GET /department/fan%20shop/category/fishing/product/Field%20&%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe HTTP/1.1\" 200 1206 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:30.0) Gecko/20100101 Firefox/30.0\"\n        \n        \n        CREATE external TABLE intermediate_access_logs (\n        \tip string,\n        \tdate string,\n        \tmethod string,\n        \turl string,\n        \thttp_version string,\n        \tcode1 string,\n        \tcode2 string,\n        \tdash string,\n        \tuser_agent string\n        ) ROW format serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' WITH serdeproperties (\n        \t'input.regex' = '([^ ]*) - - \\\\[([^\\\\]]*)\\\\] \"([^\\ ]*) ([^\\ ]*) ([^\\ ]*)\" (\\\\d*) (\\\\d*) \"([^\"]*)\" \"([^\"]*)\"',\n        \t'output.format.string' = \"%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s\"\n        ) LOCATION '/user/hive/warehouse/origin_access_logs'\n\n创建完之后可以用上面讲到的命令在hive命令行执行。\n `describe formatted intermediate_access_logs;`\n\n`serde`这个关键词（应该是序列化，或者格式化），一般这样使用：\n用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。\n如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。\n在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，\nHive 通过 SerDe 确定表的具体的列的数据\n\n再说`location`这个关键词\n`EXTERNAL` 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）\n上面那句是) LOCATION '/user/hive/warehouse/origin_access_logs'\n\n另外插一句，上面说的内部表和外部表问题。\n首先建立一个演示外部表的目录（新建一个）\n`hadoop fs -mkdir -p /user/hive_external_table/`\n\n然后把原始日志放入到这个目录\n\n`sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive_external_table/`\n验证以上的结果\n\n        [cloudera@quickstart ~]$ hadoop fs -ls  /user/hive_external_table/\n        Found 1 items\n        -rw-r--r--   1 hdfs supergroup   39593868 2018-04-18 04:14 /user/hive_external_table/access.log.2\n        [cloudera@quickstart ~]$ \n        \n        \n        drop table intermediate_access_logs\n        \n        CREATE external TABLE intermediate_access_logs (\n        \tip string,\n        \tdate string,\n        \tmethod string,\n        \turl string,\n        \thttp_version string,\n        \tcode1 string,\n        \tcode2 string,\n        \tdash string,\n        \tuser_agent string\n        ) ROW format serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' WITH serdeproperties (\n        \t'input.regex' = '([^ ]*) - - \\\\[([^\\\\]]*)\\\\] \"([^\\ ]*) ([^\\ ]*) ([^\\ ]*)\" (\\\\d*) (\\\\d*) \"([^\"]*)\" \"([^\"]*)\"',\n        \t'output.format.string' = \"%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s\"\n        ) LOCATION ' /user/hive_external_table/'\n\n\n如果删除外部表，目录和文件都不会被删除，即使是指定和默认目录一样（比如创建外部表的时候指定 location 为/user/hive/warehouse/products）\n如果是删除内部表，目录和文件都会被删除。即使是指定的为非默认目录，同样都会被删除（比如创建内部表时指定 location 为 /user/hive_external_table）\n\n指定了目录之后，如果目录下有文件，将会自动加载所有\n\n\nCREATE EXTERNAL TABLE tokenized_access_logs (\n    ip STRING,\n    date STRING,\n    method STRING,\n    url STRING,\n    http_version STRING,\n    code1 STRING,\n    code2 STRING,\n    dash STRING,\n    user_agent STRING)\nROW FORMAT DELIMITED FIELDS TERMINATED BY ','\nLOCATION '/user/hive/warehouse/tokenized_access_logs';\n\n跳出来，我们继续上面练习。\n\nADD JAR /usr/lib/hive/lib/hive-contrib.jar;\n\nINSERT OVERWRITE TABLE tokenized_access_logs SELECT * FROM intermediate_access_logs;\n\n最后的查询会调用mapreduce任务（和sqoop一样），可以并行的将数据转移到tokenized_access_logs表中。上面提到过，对于新加的表，我们如果用impala的话，必须重新获取。\ninvalidate metadata;\n\nshow  tables\n\n我们可以看到刚刚创建的两个外部表。\n\n1\tcategories\n2\tcustomers\n3\tdepartments\n4\tintermediate_access_logs\n5\torder_items\n6\torders\n7\tproducts\n8\ttb_test01\n9\ttokenized_access_logs\n\n\n还是为了验证一下：查询url中包括product的url的总量，按照倒序排\n\nselect count(*) as nums,url from tokenized_access_logs where url like '%\\/product\\/%' group by url order by nums desc\n摘抄结果如下：（这里面要是有商品id可能会与下面的对比更明显些，nginx可以用cookie实现）\n \tnums\turl\n1\t1926\t/department/apparel/category/cleats/product/Perfect%20Fitness%20Perfect%20Rip%20Deck\n2\t1793\t/department/apparel/category/featured%20shops/product/adidas%20Kids'%20RG%20III%20Mid%20Football%20Cleat\n3\t1780\t/department/golf/category/women's%20apparel/product/Nike%20Men's%20Dri-FIT%20Victory%20Golf%20Polo\n4\t1757\t/department/apparel/category/men's%20footwear/product/Nike%20Men's%20CJ%20Elite%202%20TD%20Football%20Cleat\n5\t1104\t/department/fan%20shop/category/water%20sports/product/Pelican%20Sunstream%20100%20Kayak\n6\t1084\t/department/fan%20shop/category/indoor/outdoor%20games/product/O'Brien%20Men's%20Neoprene%20Life%20Vest\n7\t1059\t/department/fan%20shop/category/camping%20&%20hiking/product/Diamondback%20Women's%20Serene%20Classic%20Comfort%20Bi\n8\t1028\t/department/fan%20shop/category/fishing/product/Field%20&%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe\n9\t1004\t/department/footwear/category/cardio%20equipment/product/Nike%20Men's%20Free%205.0+%20Running%20Shoe\n10\t939\t/department/footwear/category/fitness%20accessories/product/Under%20Armour%20Hustle%20Storm%20Medium%20Duffle%20Bag\n对数据很敏感的人会联想到上面我们的一个结果，是统计商品id，商品名字，和贡献收入的，再贴一下\n\n1\t1004\tField & Stream Sportsman 16 Gun Fire Safe\t6795260.4066467285\n2\t365\tPerfect Fitness Perfect Rip Deck\t4335357.441116333 \n3\t957\tDiamondback Women's Serene Classic Comfort Bi\t4038330.9078979492\n4\t191\tNike Men's Free 5.0+ Running Shoe\t3586941.2666854858\n5\t502\tNike Men's Dri-FIT Victory Golf Polo\t3082050\n6\t1073\tPelican Sunstream 100 Kayak\t3033648.3933258057\n7\t403\tNike Men's CJ Elite 2 TD Football Cleat\t2831052.3296356201\n8\t1014\tO'Brien Men's Neoprene Life Vest\t2830867.1741104126\n9\t627\tUnder Armour Girls' Toddler Spine Surge Runni\t1242929.2107200623\n10\t565\tadidas Youth Germany Black/Red Away Match Soc\t65940\n\n\n通过简单对比，发现/department/apparel/category/featured%20shops/product/adidas%20Kids'%20RG%20III%20Mid%20Football%20Cleat这个url访问的数量占据第二。\n\n这里就会发现一些问题。\n\n实践证明，如果米没有一个大数据的结构化的分析工具。统计出以上时间可能会花费很多时间。不排除自己搭建的平台的容错兼容分布式等维护问题带来的数据损失。\n\n\n你帮老板发现了这个问题，老板很高兴，要给你资金支持。你准备大干一把了！\n\n实践三：市场部门要优化市场策略，想通过一些数据的交叉分析（关联性）把单独浏览量少的商品卖出去更多，或者再次统计一下倒数10的商品。\n\n快速的大数据分析，那就是用到apache的spark了。我们可以构建一个spark任务，直观展示商品之间的关联。\n\n通过以下命令执行\n[cloudera@quickstart ~]$ spark-shell --master yarn-client\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel).\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/usr/lib/zookeeper/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/flume-ng/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/parquet/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/usr/lib/avro/avro-tools-1.7.6-cdh5.12.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  '_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 1.6.0\n      /_/\n\nUsing Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67)\nType in expressions to have them evaluated.\nType :help for more information.\n18/04/23 19:59:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n18/04/23 19:59:59 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.\nSpark context available as sc (master = yarn-client, app id = application_1524536469679_0001).\nSQL context available as sqlContext.\n\n下一步，我们首先引入我们需要的类\nimport org.apache.hadoop.mapreduce.Job\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat\nimport org.apache.avro.generic.GenericRecord\nimport parquet.hadoop.ParquetInputFormat\nimport parquet.avro.AvroReadSupport\nimport org.apache.spark.rdd.RDD\n\n\nrdd是spark的核心，一个rdd可以理解为一个可以被分区的只读数据集（当然是分布式的）。一个rdd内有很多分区，分区内又有大量的数据记录。\nrdd的操作最终还是落到内存或者硬盘上。\n\n下面我们创建一个rdd，提供给order_items和products表使用\n\ndef rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {\n    val job = new Job()\n    FileInputFormat.setInputPaths(job, path)\n    ParquetInputFormat.setReadSupportClass(job,\n        classOf[AvroReadSupport[GenericRecord]])\n    return sc.newAPIHadoopRDD(job.getConfiguration,\n        classOf[ParquetInputFormat[GenericRecord]],\n        classOf[Void],\n        classOf[GenericRecord]).map(x => x._2)\n}\n\nval warehouse = \"hdfs://quickstart/user/hive/warehouse/\"\nval order_items = rddFromParquetHdfsFile(warehouse + \"order_items\");\nval products = rddFromParquetHdfsFile(warehouse + \"products\");\n\n下一步，我们从order_items表和products表提取出我们想要的数据，以一个列表的形式存在，包含name和quantity，以order排序。\nval orders = order_items.map { x => (\n    x.get(\"order_item_product_id\"),\n    (x.get(\"order_item_order_id\"), x.get(\"order_item_quantity\")))\n}.join(\n  products.map { x => (\n    x.get(\"product_id\"),\n    (x.get(\"product_name\")))\n  }\n).map(x => (\n    scala.Int.unbox(x._2._1._1), // order_id\n    (\n        scala.Int.unbox(x._2._1._2), // quantity\n        x._2._2.toString // product_name\n    )\n)).groupByKey()\n\n\n最后，我们衡量（tally）计算出订单中所有商品的组合次数，比如发现啤酒和纸尿裤这两个关联性特别高。\n按顺序排列拿到前10\n\nval cooccurrences = orders.map(order =>\n  (\n    order._1,\n    order._2.toList.combinations(2).map(order_pair =>\n        (\n            if (order_pair(0)._2 < order_pair(1)._2)\n                (order_pair(0)._2, order_pair(1)._2)\n            else\n                (order_pair(1)._2, order_pair(0)._2),\n            order_pair(0)._1 * order_pair(1)._1\n        )\n    )\n  )\n)\nval combos = cooccurrences.flatMap(x => x._2).reduceByKey((a, b) => a + b)\nval mostCommon = combos.map(x => (x._2, x._1)).sortByKey(false).take(10)\n\n最后打印结果\n\nprintln(mostCommon.deep.mkString(\"\\n\"))\n\nexit\n\n\n完整的代码如下：\n// First we're going to import the classes we need\n\nimport org.apache.hadoop.mapreduce.Job\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat\nimport org.apache.avro.generic.GenericRecord\nimport parquet.hadoop.ParquetInputFormat\nimport parquet.avro.AvroReadSupport\nimport org.apache.spark.rdd.RDD\n\n// Then we create RDD's for 2 of the files we imported from MySQL with Sqoop\n// RDD's are Spark's data structures for working with distributed datasets\n\ndef rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {\n    val job = new Job()\n    FileInputFormat.setInputPaths(job, path)\n    ParquetInputFormat.setReadSupportClass(job,\n        classOf[AvroReadSupport[GenericRecord]])\n    return sc.newAPIHadoopRDD(job.getConfiguration,\n        classOf[ParquetInputFormat[GenericRecord]],\n        classOf[Void],\n        classOf[GenericRecord]).map(x => x._2)\n}\n\nval warehouse = \"hdfs://quickstart/user/hive/warehouse/\"\nval order_items = rddFromParquetHdfsFile(warehouse + \"order_items\");\nval products = rddFromParquetHdfsFile(warehouse + \"products\");\n\n// Next, we extract the fields from order_items and products that we care about\n// and get a list of every product, its name and quantity, grouped by order\n\nval orders = order_items.map { x => (\n    x.get(\"order_item_product_id\"),\n    (x.get(\"order_item_order_id\"), x.get(\"order_item_quantity\")))\n}.join(\n  products.map { x => (\n    x.get(\"product_id\"),\n    (x.get(\"product_name\")))\n  }\n).map(x => (\n    scala.Int.unbox(x._2._1._1), // order_id\n    (\n        scala.Int.unbox(x._2._1._2), // quantity\n        x._2._2.toString // product_name\n    )\n)).groupByKey()\n\n// Finally, we tally how many times each combination of products appears\n// together in an order, then we sort them and take the 10 most common\n\nval cooccurrences = orders.map(order =>\n  (\n    order._1,\n    order._2.toList.combinations(2).map(order_pair =>\n        (\n            if (order_pair(0)._2 < order_pair(1)._2)\n                (order_pair(0)._2, order_pair(1)._2)\n            else\n                (order_pair(1)._2, order_pair(0)._2),\n            order_pair(0)._1 * order_pair(1)._1\n        )\n    )\n  )\n)\nval combos = cooccurrences.flatMap(x => x._2).reduceByKey((a, b) => a + b)\nval mostCommon = combos.map(x => (x._2, x._1)).sortByKey(false).take(10)\n\n// We print our results, 1 per line, and exit the Spark shell\n\nprintln(mostCommon.deep.mkString(\"\\n\"))\n\nexit\n\n\n结果如下：\n\nscala> println(mostCommon.deep.mkString(\"\\n\"))\n(67876,(Nike Men's Dri-FIT Victory Golf Polo,Perfect Fitness Perfect Rip Deck))\n(62924,(O'Brien Men's Neoprene Life Vest,Perfect Fitness Perfect Rip Deck))\n(54399,(Nike Men's Dri-FIT Victory Golf Polo,O'Brien Men's Neoprene Life Vest))\n(39656,(Nike Men's Free 5.0+ Running Shoe,Perfect Fitness Perfect Rip Deck))\n(39314,(Perfect Fitness Perfect Rip Deck,Perfect Fitness Perfect Rip Deck))\n(35092,(Perfect Fitness Perfect Rip Deck,Under Armour Girls' Toddler Spine Surge Runni))\n(33750,(Nike Men's Dri-FIT Victory Golf Polo,Nike Men's Free 5.0+ Running Shoe))\n(33406,(Nike Men's Free 5.0+ Running Shoe,O'Brien Men's Neoprene Life Vest))\n(29835,(Nike Men's Dri-FIT Victory Golf Polo,Nike Men's Dri-FIT Victory Golf Polo))\n(29342,(Nike Men's Dri-FIT Victory Golf Polo,Under Armour Girls' Toddler Spine Surge Run\n\n\n\n简单的说，map就是通过提取过滤指定的字段，进行方法的invoke map。reduce是join && group by。\n\n如果没有spark这种分析工具，统计这些数据是很话费时间并且很困难。然后用scala几行代码。你就会分析出来订单中n多商品的相互关联性。\n并且花费很少时间。\n\n翻篇儿：\n\n领导找你：数据有问题，赶紧过来看，怎么干的事情！\n\n你:刚得瑟几天，怎么出大事了，赶紧去看看what happened\n\n\n现在我们讲一讲实时的日志同步，并且以多维度去筛选。用到的是apache的flume 和apache的solr。钻取（drill down）和探取（exploration）\n\n\nsolr以类sql形式组织数据。每条数据也是叫document（文档或者集合），每个文档包含字段（类似于mysql的schema），\nsolr的数据很灵活，而且可以全文索引中某个字段。solr也是把数据分布式放在各个分片上。并且在查询的时候可以自动均衡，提高响应速度。\n\nsolr就不说了，现在都是elk了。。\n\n完\n\n\n\n","slug":"transfer-hue","published":1,"updated":"2019-06-24T13:56:13.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxag35z5005dnsgv20o4z4u9","content":"<h1 id=\"欢迎及介绍\"><a href=\"#欢迎及介绍\" class=\"headerlink\" title=\"欢迎及介绍\"></a>欢迎及介绍</h1><ol>\n<li>cdh全称是cloudera open source distribution including apache hadoop的全称。</li>\n<li>hue登录用户名：cloudera 密码：cloudera</li>\n<li>怎么用cdh<ul>\n<li>如何进行简单的数据挖掘和分析</li>\n<li>让你老板给你涨工资~</li>\n<li>某些点会用到cloudera manager，可能）导致有些功能无法正常运行。有些部件也会用到商业版本的许可才能正常使用。</li>\n</ul>\n</li>\n<li>避免以上问题，<ol>\n<li>可以用express 版本（最少需要8G内存和2核心cpu）</li>\n<li>用企业版的试用版，试用版有60天的体验期。（最少需要10G内存和2核心cpu）</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"二-入门-提取查询关系数据\"><a href=\"#二-入门-提取查询关系数据\" class=\"headerlink\" title=\"二 入门 提取查询关系数据\"></a>二 入门 提取查询关系数据</h1><p>之后的教程中，我们将通过呈现一个关于DataCo公司的案例。我们的任务就是帮助这公司深入了解并解决一些问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情1</div><div class=\"line\">王老板：吐沫星子漫天飞的谈谈大数据。。</div><div class=\"line\">小明：hadoop吧那就。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情2</div><div class=\"line\">DataCo公司现在难题是：哪种产品消费者最喜欢买。当然一般想到的是查看一下关系数据库中的交易数据表，排序一下就知道了，有这么简单?</div><div class=\"line\">但是更有效，更深入分析，且适合更大规模的，就要用到cdh平台（hadoop技术栈了）</div><div class=\"line\"></div><div class=\"line\">下面这个例子，我们用cdh做，让你感觉常用的关系型数据库那种方法没啥两样。让你用同等的时间下，还能出更多的BI类分析和其他报表，</div></pre></td></tr></table></figure>\n<p>首先我们需要一个工具（sqoop）把常用的RDBMS关系型数据库中的结构字段扔到HDFS中（当然是肯定保持同样的数据结构。）这样就类似一个从库，在hdfs上查询不会占用其他的查询压力。</p>\n<p>我们用一个优化的文件格式化工具<code>avro</code>，或者用<code>empala</code>做到上面这些工作。</p>\n<pre><code>sqoop import-all-tables \\\n    -m 1 \\\n    --connect jdbc:mysql://quickstart:3306/retail_db \\\n    --username=retail_dba \\\n    --password=cloudera \\\n    --compression-codec=snappy \\\n    --as-parquetfile \\\n    --warehouse-dir=/user/hive/warehouse \\\n    --hive-import\n</code></pre><p>注意默认都会到default库，如果需要到指定库，需要增加–hive-database=yourdbname \\</p>\n<p>上面的<code>sqoop</code>命令做了很多工作，通过<code>mapreduce</code>任务，拉取mysql数据写入到<code>hdfs</code>（应该是用apache 的parquet列存储格式存储，该列式存储支持<code>hive</code> <code>impala</code> <code>pig</code>等多种查询引擎，而且适配多个计算框架，如mapreduce，<code>spark</code>等）。最终以指定（默认）表的方式体现对应mysql中的schema。</p>\n<p><code>parquet</code>是用来再hadoop平台相关的统一的数据格式。与传统的行模式不同，他是以列存储。主要是为了分析一些特殊指定的数据，可以通过变量来分析关系数据。parquet能更优的存储与检索。</p>\n<p>现在我们直观的看一下刚刚插入的hive的具体目录</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse\nFound 7 items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n</code></pre><p>通过 hadoop fs -ls 可以到指定标识为d的目录内继续查看，比如</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories\nFound 3 items\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories/.signals\n-rw-r--r--   1 cloudera supergroup       1957 2018-04-15 23:36 /user/hive/warehouse/categories/3e30822b-f7e7-4a0c-bde3-e61f3e373a11.parquet\n</code></pre><p>注意：parquet的文件数量指的是sqoop运行时，mappe任务的数量。因为我的是单节点，所以就是一个。</p>\n<p>我们追进来看一下元数据</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata\nFound 1 items\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas\n[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata/schemas\nFound 1 items\n-rw-r--r--   1 cloudera supergroup        594 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n[cloudera@quickstart ~]$ hadoop fs -cat  /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;categories&quot;,\n  &quot;doc&quot; : &quot;Sqoop import of categories&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;category_id&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;int&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_id&quot;,\n    &quot;sqlType&quot; : &quot;4&quot;\n  }, {\n    &quot;name&quot; : &quot;category_department_id&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;int&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_department_id&quot;,\n    &quot;sqlType&quot; : &quot;4&quot;\n  }, {\n    &quot;name&quot; : &quot;category_name&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;string&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_name&quot;,\n    &quot;sqlType&quot; : &quot;12&quot;\n  } ],\n  &quot;tableName&quot; : &quot;categories&quot;\n</code></pre><p>当然我们在<code>hue</code>中用 <code>show create table categories</code>来查看，会看到和上面对应的信息</p>\n<pre><code>Show CREATE TABLE categories\n\n1    CREATE TABLE `categories`(\n2      `category_id` int, \n3      `category_department_id` int, \n4      `category_name` string)\n5    ROW FORMAT SERDE \n6      &apos;org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe&apos; \n7    STORED AS INPUTFORMAT \n8      &apos;org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat&apos; \n9    OUTPUTFORMAT \n10      &apos;org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat&apos;\n11    LOCATION\n12      &apos;hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories&apos;\n13    TBLPROPERTIES (\n14      &apos;COLUMN_STATS_ACCURATE&apos;=&apos;false&apos;, \n15      &apos;avro.schema.url&apos;=&apos;hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories/.metadata/schemas/1.avsc&apos;, \n16      &apos;kite.compression.type&apos;=&apos;snappy&apos;, \n17      &apos;numFiles&apos;=&apos;0&apos;, \n18      &apos;numRows&apos;=&apos;-1&apos;, \n19      &apos;rawDataSize&apos;=&apos;-1&apos;, \n20      &apos;totalSize&apos;=&apos;0&apos;, \n</code></pre><p>另外我们在hive命令行中可以看到其他关于表的formated信息</p>\n<pre><code>hive&gt; describe formatted customers;\nOK\n# col_name                data_type               comment             \n\ncustomer_id             int                                         \ncustomer_fname          string                                      \ncustomer_lname          string                                      \ncustomer_email          string                                      \ncustomer_password       string                                      \ncustomer_street         string                                      \ncustomer_city           string                                      \ncustomer_state          string                                      \ncustomer_zipcode        string                                      \n\n# Detailed Table Information          \nDatabase:               default                  \nOwner:                  null                     \nCreateTime:             Sun Apr 15 23:36:57 PDT 2018     \nLastAccessTime:         UNKNOWN                  \nProtect Mode:           None                     \nRetention:              0                        \nLocation:               hdfs://quickstart.cloudera:8020/user/hive/warehouse/customers     \nTable Type:             MANAGED_TABLE            \nTable Parameters:          \n    COLUMN_STATS_ACCURATE    false               \n    avro.schema.url         hdfs://quickstart.cloudera:8020/user/hive/warehouse/customers/.metadata/schemas/1.avsc\n    kite.compression.type    snappy              \n    numFiles                0                   \n    numRows                 -1                  \n    rawDataSize             -1                  \n    totalSize               0                   \n    transient_lastDdlTime    1523860617          \n\nStorage Information          \nSerDe Library:          org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe     \nInputFormat:            org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat     \nOutputFormat:           org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat     \nCompressed:             No                       \nNum Buckets:            -1                       \nBucket Columns:         []                       \nSort Columns:           []                       \nTime taken: 0.069 seconds, Fetched: 39 row(s)\n</code></pre><p>当然创建表也可以利用外部已经存在的文件导入（<code>CREATE EXTERNAL TABLE</code>）的方式。以外部表导入的方式不会在hive的仓库中查看到（用hive或者impala都能实现），</p>\n<p>比如下面的例子,我们在hive中执行以下操作</p>\n<pre><code>CREATE EXTERNAL TABLE tb_test01(id INT,category_id INT, name string,price INT)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY &apos;,&apos;\nSTORED AS TEXTFILE\nlocation &apos;/user/hive/external/tb_external_table01&apos;;\n</code></pre><p>LOCATION指的是warehouse的存放路径，不指定就到hive.metastore.warehouse.dir指定的路径下<br>(一般演示我习惯用TERMINATED ,分割)</p>\n<p>load 数据到刚刚创建的tb_test01表中，准备数据如下</p>\n<pre><code>[cloudera@quickstart tongbo]$ cat hadoop_external_test.txt \n1,24551,Cleats,17\n2,22246,Men&apos;s Footwear,18\n3,21035,Women&apos;s Apparel,24\n4,19298,Indoor/Outdoor Games,46\n5,17325,Fishing,45\n6,15540,Water Sports,48\n7,13729,Camping &amp; Hiking,43\n8,12487,Cardio Equipment,9\n9,10984,Shop By Sport,29\n10,2029,Electronics\n</code></pre><p><code>LOAD data local inpath &#39;/home/tongbo/hadoop_external_test.txt&#39; into table tb_test01;</code></p>\n<p>这样就实现了数据的导入。内部表和外部表的区别，简单概况如下：<br>Hive 创建内部表时，会将数据移动到数据仓库指向的路径（配置文件中配置）；<br>若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。<br>在删除表的时候，内部表的元数据和数 据会被一起删除，而外部表只删除元数据，不删除数据。</p>\n<p>下面主要说明如何用cdh中的hive（impala） web页面来进行查询操作。默认为8888端口，用户名和密码都是cloudera，mysql用户名为root，密码为cloudera</p>\n<p>在hive创建及查询等更新过程中，impala不会自动拉取跟新的元数据（metadata）的改变<br>，所以第一件事情是更新metadata的时效，这样我们可以看到所有目前的表</p>\n<pre><code>invalidate metadata;\nshow tables;\n</code></pre><p>当然可以通过内置的hdfs看到实际存储的文件记录。</p>\n<hr>\n<p>现在关系型数据库中的数据已经到了hdfs里面，回过头来看dataco公司的问题。</p>\n<p>下面的mysql展示了每个商品的总利润，并且取前十条</p>\n<pre><code>SELECT\n    count(order_item_quantity) AS count,\n    c.category_name,\n    c.category_id\nFROM\n    order_items AS oi\nINNER JOIN products AS p ON p.product_id = oi.order_item_product_id\nINNER JOIN categories AS c ON p.product_category_id = c.category_id\nGROUP BY\n    c.category_name\nORDER BY\n    count DESC\nLIMIT 10;\n+-------+----------------------+-------------+\n| count | category_name        | category_id |\n+-------+----------------------+-------------+\n| 24551 | Cleats               |          17 |\n| 22246 | Men&apos;s Footwear       |          18 |\n| 21035 | Women&apos;s Apparel      |          24 |\n| 19298 | Indoor/Outdoor Games |          46 |\n| 17325 | Fishing              |          45 |\n| 15540 | Water Sports         |          48 |\n| 13729 | Camping &amp; Hiking     |          43 |\n| 12487 | Cardio Equipment     |           9 |\n| 10984 | Shop By Sport        |          29 |\n|  3156 | Electronics          |          13 |\n+-------+----------------------+-------------+\n10 rows in set (0.28 sec)\n\nmysql&gt; \n</code></pre><p>下面是hive语法</p>\n<pre><code>select count(order_item_quantity) as count ,c.category_name,c.category_id from order_items as oi inner join products as p on p.product_id=oi.order_item_product_id\ninner join categories as c on p.product_category_id=c.category_id group by c.category_name,c.category_id\n order by count desc limit 10\n</code></pre><p>注意，hive语法中select后面不能有非聚合列，如果必须要有，需要在group by 上加上你要聚合的字段。在上述hive语法中就是加上 group by c.category_name,c.category_id</p>\n<pre><code>1    24551    Cleats    17\n2    22246    Men&apos;s Footwear    18\n3    21035    Women&apos;s Apparel    24\n4    19298    Indoor/Outdoor Games    46\n5    17325    Fishing    45\n6    15540    Water Sports    48\n7    13729    Camping &amp; Hiking    43\n8    12487    Cardio Equipment    9\n9    10984    Shop By Sport    29\n10    2029    Electronics\n</code></pre><p>再看下面一个复杂的sql</p>\n<pre><code>SELECT\n    p.product_id,\n    p.product_name,\n    r.revenue\nFROM\n    products AS p\nINNER JOIN (\n    SELECT\n        oi.order_item_product_id,\n        sum(\n            cast(\n                oi.order_item_subtotal AS FLOAT\n            )\n        ) AS revenue\n    FROM\n        order_items oi\n    INNER JOIN orders AS o ON oi.order_item_order_id = o.order_id\n    WHERE\n        o.order_status &lt;&gt; &apos;CANCELED&apos;\n    AND o.order_status &lt;&gt; &apos;SUSPECTED_FARUD&apos;\n    GROUP BY\n        order_item_product_id\n) AS r ON p.product_id = r.order_item_product_id\nORDER BY\n    r.revenue DESC\nLIMIT 10\n</code></pre><p>备注：SUSPECTED_FARUD 涉嫌欺诈</p>\n<p>结果如下：（记住这个结果，下面会用到）</p>\n<pre><code>    p.product_id     p.product_name                 r.revenue\n1    1004    Field &amp; Stream Sportsman 16 Gun Fire Safe    6795260.4066467285\n2    365    Perfect Fitness Perfect Rip Deck    4335357.441116333\n3    957    Diamondback Women&apos;s Serene Classic Comfort Bi    4038330.9078979492\n4    191    Nike Men&apos;s Free 5.0+ Running Shoe    3586941.2666854858\n5    502    Nike Men&apos;s Dri-FIT Victory Golf Polo    3082050\n6    1073    Pelican Sunstream 100 Kayak    3033648.3933258057\n7    403    Nike Men&apos;s CJ Elite 2 TD Football Cleat    2831052.3296356201\n8    1014    O&apos;Brien Men&apos;s Neoprene Life Vest    2830867.1741104126\n9    627    Under Armour Girls&apos; Toddler Spine Surge Runni    1242929.2107200623\n10    565    adidas Youth Germany Black/Red Away Match Soc    65940\n</code></pre><p>我用<code>impala</code>和<code>hive</code>分别执行上述语句。发现impala比hive快15倍左右。同时证明了我们用sqoop导入的数据结构（这里指metadata），适用于<code>hive</code>和<code>impala</code>两种引擎。<br>hive非常的灵活，是把sql的查询语法转换成mapreduce任务。而impala更适合交互接口分析，我们下面会再次hive在etl中的使用。</p>\n<p>总结一下，我们完成了用sqoop把数据导入到hdfs中，然后把他转换为格式化为avro行式存储。（可以在深入了解avro和parquet的区别）<br>经过以上过程，已经可以用hive或者impala查询数据。我们要更多了了解的是hadoop与传统架构相比，有更多的扩展和灵活性。</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情三：</div><div class=\"line\"></div><div class=\"line\">领导：（无所谓）的说，你只是展示了你的数据，而且你这些数据我也知道。并没有什么卵用（额外的价值）</div><div class=\"line\">你：也是一脸淡定的无所谓，然后撸起袖子准备干一下。。</div></pre></td></tr></table></figure>\n</code></pre><p>练习2<br>把结构化数据和非结构化数据结合起来<br>作为基础运营，你现在有一点疑问：网站内浏览最多的商品就是卖的最多的吗？如果不是，导致原因是什么?</p>\n<p>hadoop可以存储结构化和半结构化的数据，而不必向关系型数据库那样，增加一个字段将同步所有的数据列。尤其是适用于web log日志这样的文件形式。我们查看一下最原始的访问站点的日志</p>\n<p>为了演示方便，我们批量导入180000条数据的access log。</p>\n<p>先在目录下创建一个目录，然后通过hadoop mv命令复制到warehouse下</p>\n<p>先看一下当前目录</p>\n<pre><code>cloudera@quickstart ~]$ hadoop fs -ls  /user/hive/warehouse\nFound 7 items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n[cloudera@quickstart ~]$ \n\n[cloudera@quickstart ~]$ sudo -u hdfs hadoop fs -mkdir /user/hive/warehouse/origin_access_logs\n</code></pre><p>看一下准备好的日志文件：<br>        [cloudera@quickstart ~]$ cd /opt/examples/log_files/<br>        [cloudera@quickstart log_files]$ ls<br>        access.log.2<br>        [cloudera@quickstart log_files]$ du -f access.log.2<br>        du: invalid option – ‘f’<br>        Try `du –help’ for more information.<br>        [cloudera@quickstart log_files]$ du -h access.log.2<br>        38M    access.log.2<br>        [cloudera@quickstart log_files]$ </p>\n<p>执行复制</p>\n<pre><code>[cloudera@quickstart log_files]$ sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive/warehouse/origin_access_logs\n\n由于两次拼写错误，把之前的删除。。\n[cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/origin__access_logs\nDeleted /user/hive/warehouse/origin__access_logs\n[cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/original_access_logs\nDeleted /user/hive/warehouse/original_access_logs\n[cloudera@quickstart log_files]$ \n</code></pre><p>验证一下上面的操作</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/origin_access_logs\nFound 1 items\n-rw-r--r--   1 hdfs supergroup   39593868 2018-04-17 23:41 /user/hive/warehouse/origin_access_logs/access.log.2\n[cloudera@quickstart ~]$ \n</code></pre><p>现在我们可以创建一个表，然后用hive或者更腻害的impala来查询。我们需要以下两步：</p>\n<ol>\n<li>利用hive强大灵活的serdes ，解析日志，到自定义的hive表中的各个字段中。（通过（反）序列化到自定义的文件字段中）</li>\n<li>转移数据到中间表，以便不需要再次（反）序列化</li>\n</ol>\n<p>数据放入到表中之后，就可以通过cli或者hue查询啦。</p>\n<p>下面用hue创建表，并且导入。<br>先贴一下单一一行格式，参考regex的写法</p>\n<pre><code>144.72.77.159 - - [14/Jun/2014:17:16:22 -0400] &quot;GET /department/fan%20shop/category/fishing/product/Field%20&amp;%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe HTTP/1.1&quot; 200 1206 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:30.0) Gecko/20100101 Firefox/30.0&quot;\n\n\nCREATE external TABLE intermediate_access_logs (\n    ip string,\n    date string,\n    method string,\n    url string,\n    http_version string,\n    code1 string,\n    code2 string,\n    dash string,\n    user_agent string\n) ROW format serde &apos;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&apos; WITH serdeproperties (\n    &apos;input.regex&apos; = &apos;([^ ]*) - - \\\\[([^\\\\]]*)\\\\] &quot;([^\\ ]*) ([^\\ ]*) ([^\\ ]*)&quot; (\\\\d*) (\\\\d*) &quot;([^&quot;]*)&quot; &quot;([^&quot;]*)&quot;&apos;,\n    &apos;output.format.string&apos; = &quot;%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s&quot;\n) LOCATION &apos;/user/hive/warehouse/origin_access_logs&apos;\n</code></pre><p>创建完之后可以用上面讲到的命令在hive命令行执行。<br> <code>describe formatted intermediate_access_logs;</code></p>\n<p><code>serde</code>这个关键词（应该是序列化，或者格式化），一般这样使用：<br>用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。<br>如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。<br>在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，<br>Hive 通过 SerDe 确定表的具体的列的数据</p>\n<p>再说<code>location</code>这个关键词<br><code>EXTERNAL</code> 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）<br>上面那句是) LOCATION ‘/user/hive/warehouse/origin_access_logs’</p>\n<p>另外插一句，上面说的内部表和外部表问题。<br>首先建立一个演示外部表的目录（新建一个）<br><code>hadoop fs -mkdir -p /user/hive_external_table/</code></p>\n<p>然后把原始日志放入到这个目录</p>\n<p><code>sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive_external_table/</code><br>验证以上的结果</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls  /user/hive_external_table/\nFound 1 items\n-rw-r--r--   1 hdfs supergroup   39593868 2018-04-18 04:14 /user/hive_external_table/access.log.2\n[cloudera@quickstart ~]$ \n\n\ndrop table intermediate_access_logs\n\nCREATE external TABLE intermediate_access_logs (\n    ip string,\n    date string,\n    method string,\n    url string,\n    http_version string,\n    code1 string,\n    code2 string,\n    dash string,\n    user_agent string\n) ROW format serde &apos;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&apos; WITH serdeproperties (\n    &apos;input.regex&apos; = &apos;([^ ]*) - - \\\\[([^\\\\]]*)\\\\] &quot;([^\\ ]*) ([^\\ ]*) ([^\\ ]*)&quot; (\\\\d*) (\\\\d*) &quot;([^&quot;]*)&quot; &quot;([^&quot;]*)&quot;&apos;,\n    &apos;output.format.string&apos; = &quot;%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s&quot;\n) LOCATION &apos; /user/hive_external_table/&apos;\n</code></pre><p>如果删除外部表，目录和文件都不会被删除，即使是指定和默认目录一样（比如创建外部表的时候指定 location 为/user/hive/warehouse/products）<br>如果是删除内部表，目录和文件都会被删除。即使是指定的为非默认目录，同样都会被删除（比如创建内部表时指定 location 为 /user/hive_external_table）</p>\n<p>指定了目录之后，如果目录下有文件，将会自动加载所有</p>\n<p>CREATE EXTERNAL TABLE tokenized_access_logs (<br>    ip STRING,<br>    date STRING,<br>    method STRING,<br>    url STRING,<br>    http_version STRING,<br>    code1 STRING,<br>    code2 STRING,<br>    dash STRING,<br>    user_agent STRING)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’<br>LOCATION ‘/user/hive/warehouse/tokenized_access_logs’;</p>\n<p>跳出来，我们继续上面练习。</p>\n<p>ADD JAR /usr/lib/hive/lib/hive-contrib.jar;</p>\n<p>INSERT OVERWRITE TABLE tokenized_access_logs SELECT * FROM intermediate_access_logs;</p>\n<p>最后的查询会调用mapreduce任务（和sqoop一样），可以并行的将数据转移到tokenized_access_logs表中。上面提到过，对于新加的表，我们如果用impala的话，必须重新获取。<br>invalidate metadata;</p>\n<p>show  tables</p>\n<p>我们可以看到刚刚创建的两个外部表。</p>\n<p>1    categories<br>2    customers<br>3    departments<br>4    intermediate_access_logs<br>5    order_items<br>6    orders<br>7    products<br>8    tb_test01<br>9    tokenized_access_logs</p>\n<p>还是为了验证一下：查询url中包括product的url的总量，按照倒序排</p>\n<p>select count(*) as nums,url from tokenized_access_logs where url like ‘%\\/product\\/%’ group by url order by nums desc<br>摘抄结果如下：（这里面要是有商品id可能会与下面的对比更明显些，nginx可以用cookie实现）<br>     nums    url<br>1    1926    /department/apparel/category/cleats/product/Perfect%20Fitness%20Perfect%20Rip%20Deck<br>2    1793    /department/apparel/category/featured%20shops/product/adidas%20Kids’%20RG%20III%20Mid%20Football%20Cleat<br>3    1780    /department/golf/category/women’s%20apparel/product/Nike%20Men’s%20Dri-FIT%20Victory%20Golf%20Polo<br>4    1757    /department/apparel/category/men’s%20footwear/product/Nike%20Men’s%20CJ%20Elite%202%20TD%20Football%20Cleat<br>5    1104    /department/fan%20shop/category/water%20sports/product/Pelican%20Sunstream%20100%20Kayak<br>6    1084    /department/fan%20shop/category/indoor/outdoor%20games/product/O’Brien%20Men’s%20Neoprene%20Life%20Vest<br>7    1059    /department/fan%20shop/category/camping%20&amp;%20hiking/product/Diamondback%20Women’s%20Serene%20Classic%20Comfort%20Bi<br>8    1028    /department/fan%20shop/category/fishing/product/Field%20&amp;%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe<br>9    1004    /department/footwear/category/cardio%20equipment/product/Nike%20Men’s%20Free%205.0+%20Running%20Shoe<br>10    939    /department/footwear/category/fitness%20accessories/product/Under%20Armour%20Hustle%20Storm%20Medium%20Duffle%20Bag<br>对数据很敏感的人会联想到上面我们的一个结果，是统计商品id，商品名字，和贡献收入的，再贴一下</p>\n<p>1    1004    Field &amp; Stream Sportsman 16 Gun Fire Safe    6795260.4066467285<br>2    365    Perfect Fitness Perfect Rip Deck    4335357.441116333<br>3    957    Diamondback Women’s Serene Classic Comfort Bi    4038330.9078979492<br>4    191    Nike Men’s Free 5.0+ Running Shoe    3586941.2666854858<br>5    502    Nike Men’s Dri-FIT Victory Golf Polo    3082050<br>6    1073    Pelican Sunstream 100 Kayak    3033648.3933258057<br>7    403    Nike Men’s CJ Elite 2 TD Football Cleat    2831052.3296356201<br>8    1014    O’Brien Men’s Neoprene Life Vest    2830867.1741104126<br>9    627    Under Armour Girls’ Toddler Spine Surge Runni    1242929.2107200623<br>10    565    adidas Youth Germany Black/Red Away Match Soc    65940</p>\n<p>通过简单对比，发现/department/apparel/category/featured%20shops/product/adidas%20Kids’%20RG%20III%20Mid%20Football%20Cleat这个url访问的数量占据第二。</p>\n<p>这里就会发现一些问题。</p>\n<p>实践证明，如果米没有一个大数据的结构化的分析工具。统计出以上时间可能会花费很多时间。不排除自己搭建的平台的容错兼容分布式等维护问题带来的数据损失。</p>\n<p>你帮老板发现了这个问题，老板很高兴，要给你资金支持。你准备大干一把了！</p>\n<p>实践三：市场部门要优化市场策略，想通过一些数据的交叉分析（关联性）把单独浏览量少的商品卖出去更多，或者再次统计一下倒数10的商品。</p>\n<p>快速的大数据分析，那就是用到apache的spark了。我们可以构建一个spark任务，直观展示商品之间的关联。</p>\n<p>通过以下命令执行<br>[cloudera@quickstart ~]$ spark-shell –master yarn-client<br>Setting default log level to “WARN”.<br>To adjust logging level use sc.setLogLevel(newLevel).<br>SLF4J: Class path contains multiple SLF4J bindings.<br>SLF4J: Found binding in [jar:file:/usr/lib/zookeeper/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/flume-ng/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/parquet/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/avro/avro-tools-1.7.6-cdh5.12.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: See <a href=\"http://www.slf4j.org/codes.html#multiple_bindings\" target=\"_blank\" rel=\"external\">http://www.slf4j.org/codes.html#multiple_bindings</a> for an explanation.<br>SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]<br>Welcome to</p>\n<pre><code>  ____              __\n / __/__  ___ _____/ /__\n_\\ \\/ _ \\/ _ `/ __/  &apos;_/\n</code></pre><p>   /<strong>_/ .</strong>/_,<em>/</em>/ /<em>/\\</em>\\   version 1.6.0<br>      /_/</p>\n<p>Using Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67)<br>Type in expressions to have them evaluated.<br>Type :help for more information.<br>18/04/23 19:59:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>18/04/23 19:59:59 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.<br>Spark context available as sc (master = yarn-client, app id = application_1524536469679_0001).<br>SQL context available as sqlContext.</p>\n<p>下一步，我们首先引入我们需要的类<br>import org.apache.hadoop.mapreduce.Job<br>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat<br>import org.apache.avro.generic.GenericRecord<br>import parquet.hadoop.ParquetInputFormat<br>import parquet.avro.AvroReadSupport<br>import org.apache.spark.rdd.RDD</p>\n<p>rdd是spark的核心，一个rdd可以理解为一个可以被分区的只读数据集（当然是分布式的）。一个rdd内有很多分区，分区内又有大量的数据记录。<br>rdd的操作最终还是落到内存或者硬盘上。</p>\n<p>下面我们创建一个rdd，提供给order_items和products表使用</p>\n<p>def rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {<br>    val job = new Job()<br>    FileInputFormat.setInputPaths(job, path)<br>    ParquetInputFormat.setReadSupportClass(job,<br>        classOf[AvroReadSupport[GenericRecord]])<br>    return sc.newAPIHadoopRDD(job.getConfiguration,<br>        classOf[ParquetInputFormat[GenericRecord]],<br>        classOf[Void],<br>        classOf[GenericRecord]).map(x =&gt; x._2)<br>}</p>\n<p>val warehouse = “hdfs://quickstart/user/hive/warehouse/“<br>val order_items = rddFromParquetHdfsFile(warehouse + “order_items”);<br>val products = rddFromParquetHdfsFile(warehouse + “products”);</p>\n<p>下一步，我们从order_items表和products表提取出我们想要的数据，以一个列表的形式存在，包含name和quantity，以order排序。<br>val orders = order_items.map { x =&gt; (<br>    x.get(“order_item_product_id”),<br>    (x.get(“order_item_order_id”), x.get(“order_item_quantity”)))<br>}.join(<br>  products.map { x =&gt; (<br>    x.get(“product_id”),<br>    (x.get(“product_name”)))<br>  }<br>).map(x =&gt; (<br>    scala.Int.unbox(x._2._1._1), // order_id<br>    (<br>        scala.Int.unbox(x._2._1._2), // quantity<br>        x._2._2.toString // product_name<br>    )<br>)).groupByKey()</p>\n<p>最后，我们衡量（tally）计算出订单中所有商品的组合次数，比如发现啤酒和纸尿裤这两个关联性特别高。<br>按顺序排列拿到前10</p>\n<p>val cooccurrences = orders.map(order =&gt;<br>  (<br>    order._1,<br>    order._2.toList.combinations(2).map(order_pair =&gt;<br>        (<br>            if (order_pair(0)._2 &lt; order_pair(1)._2)<br>                (order_pair(0)._2, order_pair(1)._2)<br>            else<br>                (order_pair(1)._2, order_pair(0)._2),<br>            order_pair(0)._1 * order_pair(1)._1<br>        )<br>    )<br>  )<br>)<br>val combos = cooccurrences.flatMap(x =&gt; x._2).reduceByKey((a, b) =&gt; a + b)<br>val mostCommon = combos.map(x =&gt; (x._2, x._1)).sortByKey(false).take(10)</p>\n<p>最后打印结果</p>\n<p>println(mostCommon.deep.mkString(“\\n”))</p>\n<p>exit</p>\n<p>完整的代码如下：<br>// First we’re going to import the classes we need</p>\n<p>import org.apache.hadoop.mapreduce.Job<br>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat<br>import org.apache.avro.generic.GenericRecord<br>import parquet.hadoop.ParquetInputFormat<br>import parquet.avro.AvroReadSupport<br>import org.apache.spark.rdd.RDD</p>\n<p>// Then we create RDD’s for 2 of the files we imported from MySQL with Sqoop<br>// RDD’s are Spark’s data structures for working with distributed datasets</p>\n<p>def rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {<br>    val job = new Job()<br>    FileInputFormat.setInputPaths(job, path)<br>    ParquetInputFormat.setReadSupportClass(job,<br>        classOf[AvroReadSupport[GenericRecord]])<br>    return sc.newAPIHadoopRDD(job.getConfiguration,<br>        classOf[ParquetInputFormat[GenericRecord]],<br>        classOf[Void],<br>        classOf[GenericRecord]).map(x =&gt; x._2)<br>}</p>\n<p>val warehouse = “hdfs://quickstart/user/hive/warehouse/“<br>val order_items = rddFromParquetHdfsFile(warehouse + “order_items”);<br>val products = rddFromParquetHdfsFile(warehouse + “products”);</p>\n<p>// Next, we extract the fields from order_items and products that we care about<br>// and get a list of every product, its name and quantity, grouped by order</p>\n<p>val orders = order_items.map { x =&gt; (<br>    x.get(“order_item_product_id”),<br>    (x.get(“order_item_order_id”), x.get(“order_item_quantity”)))<br>}.join(<br>  products.map { x =&gt; (<br>    x.get(“product_id”),<br>    (x.get(“product_name”)))<br>  }<br>).map(x =&gt; (<br>    scala.Int.unbox(x._2._1._1), // order_id<br>    (<br>        scala.Int.unbox(x._2._1._2), // quantity<br>        x._2._2.toString // product_name<br>    )<br>)).groupByKey()</p>\n<p>// Finally, we tally how many times each combination of products appears<br>// together in an order, then we sort them and take the 10 most common</p>\n<p>val cooccurrences = orders.map(order =&gt;<br>  (<br>    order._1,<br>    order._2.toList.combinations(2).map(order_pair =&gt;<br>        (<br>            if (order_pair(0)._2 &lt; order_pair(1)._2)<br>                (order_pair(0)._2, order_pair(1)._2)<br>            else<br>                (order_pair(1)._2, order_pair(0)._2),<br>            order_pair(0)._1 * order_pair(1)._1<br>        )<br>    )<br>  )<br>)<br>val combos = cooccurrences.flatMap(x =&gt; x._2).reduceByKey((a, b) =&gt; a + b)<br>val mostCommon = combos.map(x =&gt; (x._2, x._1)).sortByKey(false).take(10)</p>\n<p>// We print our results, 1 per line, and exit the Spark shell</p>\n<p>println(mostCommon.deep.mkString(“\\n”))</p>\n<p>exit</p>\n<p>结果如下：</p>\n<p>scala&gt; println(mostCommon.deep.mkString(“\\n”))<br>(67876,(Nike Men’s Dri-FIT Victory Golf Polo,Perfect Fitness Perfect Rip Deck))<br>(62924,(O’Brien Men’s Neoprene Life Vest,Perfect Fitness Perfect Rip Deck))<br>(54399,(Nike Men’s Dri-FIT Victory Golf Polo,O’Brien Men’s Neoprene Life Vest))<br>(39656,(Nike Men’s Free 5.0+ Running Shoe,Perfect Fitness Perfect Rip Deck))<br>(39314,(Perfect Fitness Perfect Rip Deck,Perfect Fitness Perfect Rip Deck))<br>(35092,(Perfect Fitness Perfect Rip Deck,Under Armour Girls’ Toddler Spine Surge Runni))<br>(33750,(Nike Men’s Dri-FIT Victory Golf Polo,Nike Men’s Free 5.0+ Running Shoe))<br>(33406,(Nike Men’s Free 5.0+ Running Shoe,O’Brien Men’s Neoprene Life Vest))<br>(29835,(Nike Men’s Dri-FIT Victory Golf Polo,Nike Men’s Dri-FIT Victory Golf Polo))<br>(29342,(Nike Men’s Dri-FIT Victory Golf Polo,Under Armour Girls’ Toddler Spine Surge Run</p>\n<p>简单的说，map就是通过提取过滤指定的字段，进行方法的invoke map。reduce是join &amp;&amp; group by。</p>\n<p>如果没有spark这种分析工具，统计这些数据是很话费时间并且很困难。然后用scala几行代码。你就会分析出来订单中n多商品的相互关联性。<br>并且花费很少时间。</p>\n<p>翻篇儿：</p>\n<p>领导找你：数据有问题，赶紧过来看，怎么干的事情！</p>\n<p>你:刚得瑟几天，怎么出大事了，赶紧去看看what happened</p>\n<p>现在我们讲一讲实时的日志同步，并且以多维度去筛选。用到的是apache的flume 和apache的solr。钻取（drill down）和探取（exploration）</p>\n<p>solr以类sql形式组织数据。每条数据也是叫document（文档或者集合），每个文档包含字段（类似于mysql的schema），<br>solr的数据很灵活，而且可以全文索引中某个字段。solr也是把数据分布式放在各个分片上。并且在查询的时候可以自动均衡，提高响应速度。</p>\n<p>solr就不说了，现在都是elk了。。</p>\n<p>完</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"欢迎及介绍\"><a href=\"#欢迎及介绍\" class=\"headerlink\" title=\"欢迎及介绍\"></a>欢迎及介绍</h1><ol>\n<li>cdh全称是cloudera open source distribution including apache hadoop的全称。</li>\n<li>hue登录用户名：cloudera 密码：cloudera</li>\n<li>怎么用cdh<ul>\n<li>如何进行简单的数据挖掘和分析</li>\n<li>让你老板给你涨工资~</li>\n<li>某些点会用到cloudera manager，可能）导致有些功能无法正常运行。有些部件也会用到商业版本的许可才能正常使用。</li>\n</ul>\n</li>\n<li>避免以上问题，<ol>\n<li>可以用express 版本（最少需要8G内存和2核心cpu）</li>\n<li>用企业版的试用版，试用版有60天的体验期。（最少需要10G内存和2核心cpu）</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"二-入门-提取查询关系数据\"><a href=\"#二-入门-提取查询关系数据\" class=\"headerlink\" title=\"二 入门 提取查询关系数据\"></a>二 入门 提取查询关系数据</h1><p>之后的教程中，我们将通过呈现一个关于DataCo公司的案例。我们的任务就是帮助这公司深入了解并解决一些问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情1</div><div class=\"line\">王老板：吐沫星子漫天飞的谈谈大数据。。</div><div class=\"line\">小明：hadoop吧那就。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情2</div><div class=\"line\">DataCo公司现在难题是：哪种产品消费者最喜欢买。当然一般想到的是查看一下关系数据库中的交易数据表，排序一下就知道了，有这么简单?</div><div class=\"line\">但是更有效，更深入分析，且适合更大规模的，就要用到cdh平台（hadoop技术栈了）</div><div class=\"line\"></div><div class=\"line\">下面这个例子，我们用cdh做，让你感觉常用的关系型数据库那种方法没啥两样。让你用同等的时间下，还能出更多的BI类分析和其他报表，</div></pre></td></tr></table></figure>\n<p>首先我们需要一个工具（sqoop）把常用的RDBMS关系型数据库中的结构字段扔到HDFS中（当然是肯定保持同样的数据结构。）这样就类似一个从库，在hdfs上查询不会占用其他的查询压力。</p>\n<p>我们用一个优化的文件格式化工具<code>avro</code>，或者用<code>empala</code>做到上面这些工作。</p>\n<pre><code>sqoop import-all-tables \\\n    -m 1 \\\n    --connect jdbc:mysql://quickstart:3306/retail_db \\\n    --username=retail_dba \\\n    --password=cloudera \\\n    --compression-codec=snappy \\\n    --as-parquetfile \\\n    --warehouse-dir=/user/hive/warehouse \\\n    --hive-import\n</code></pre><p>注意默认都会到default库，如果需要到指定库，需要增加–hive-database=yourdbname \\</p>\n<p>上面的<code>sqoop</code>命令做了很多工作，通过<code>mapreduce</code>任务，拉取mysql数据写入到<code>hdfs</code>（应该是用apache 的parquet列存储格式存储，该列式存储支持<code>hive</code> <code>impala</code> <code>pig</code>等多种查询引擎，而且适配多个计算框架，如mapreduce，<code>spark</code>等）。最终以指定（默认）表的方式体现对应mysql中的schema。</p>\n<p><code>parquet</code>是用来再hadoop平台相关的统一的数据格式。与传统的行模式不同，他是以列存储。主要是为了分析一些特殊指定的数据，可以通过变量来分析关系数据。parquet能更优的存储与检索。</p>\n<p>现在我们直观的看一下刚刚插入的hive的具体目录</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse\nFound 7 items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n</code></pre><p>通过 hadoop fs -ls 可以到指定标识为d的目录内继续查看，比如</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories\nFound 3 items\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories/.signals\n-rw-r--r--   1 cloudera supergroup       1957 2018-04-15 23:36 /user/hive/warehouse/categories/3e30822b-f7e7-4a0c-bde3-e61f3e373a11.parquet\n</code></pre><p>注意：parquet的文件数量指的是sqoop运行时，mappe任务的数量。因为我的是单节点，所以就是一个。</p>\n<p>我们追进来看一下元数据</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata\nFound 1 items\ndrwxr-xr-x   - cloudera supergroup          0 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas\n[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/categories/.metadata/schemas\nFound 1 items\n-rw-r--r--   1 cloudera supergroup        594 2018-04-15 23:28 /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n[cloudera@quickstart ~]$ hadoop fs -cat  /user/hive/warehouse/categories/.metadata/schemas/1.avsc\n{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;categories&quot;,\n  &quot;doc&quot; : &quot;Sqoop import of categories&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;category_id&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;int&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_id&quot;,\n    &quot;sqlType&quot; : &quot;4&quot;\n  }, {\n    &quot;name&quot; : &quot;category_department_id&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;int&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_department_id&quot;,\n    &quot;sqlType&quot; : &quot;4&quot;\n  }, {\n    &quot;name&quot; : &quot;category_name&quot;,\n    &quot;type&quot; : [ &quot;null&quot;, &quot;string&quot; ],\n    &quot;default&quot; : null,\n    &quot;columnName&quot; : &quot;category_name&quot;,\n    &quot;sqlType&quot; : &quot;12&quot;\n  } ],\n  &quot;tableName&quot; : &quot;categories&quot;\n</code></pre><p>当然我们在<code>hue</code>中用 <code>show create table categories</code>来查看，会看到和上面对应的信息</p>\n<pre><code>Show CREATE TABLE categories\n\n1    CREATE TABLE `categories`(\n2      `category_id` int, \n3      `category_department_id` int, \n4      `category_name` string)\n5    ROW FORMAT SERDE \n6      &apos;org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe&apos; \n7    STORED AS INPUTFORMAT \n8      &apos;org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat&apos; \n9    OUTPUTFORMAT \n10      &apos;org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat&apos;\n11    LOCATION\n12      &apos;hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories&apos;\n13    TBLPROPERTIES (\n14      &apos;COLUMN_STATS_ACCURATE&apos;=&apos;false&apos;, \n15      &apos;avro.schema.url&apos;=&apos;hdfs://quickstart.cloudera:8020/user/hive/warehouse/categories/.metadata/schemas/1.avsc&apos;, \n16      &apos;kite.compression.type&apos;=&apos;snappy&apos;, \n17      &apos;numFiles&apos;=&apos;0&apos;, \n18      &apos;numRows&apos;=&apos;-1&apos;, \n19      &apos;rawDataSize&apos;=&apos;-1&apos;, \n20      &apos;totalSize&apos;=&apos;0&apos;, \n</code></pre><p>另外我们在hive命令行中可以看到其他关于表的formated信息</p>\n<pre><code>hive&gt; describe formatted customers;\nOK\n# col_name                data_type               comment             \n\ncustomer_id             int                                         \ncustomer_fname          string                                      \ncustomer_lname          string                                      \ncustomer_email          string                                      \ncustomer_password       string                                      \ncustomer_street         string                                      \ncustomer_city           string                                      \ncustomer_state          string                                      \ncustomer_zipcode        string                                      \n\n# Detailed Table Information          \nDatabase:               default                  \nOwner:                  null                     \nCreateTime:             Sun Apr 15 23:36:57 PDT 2018     \nLastAccessTime:         UNKNOWN                  \nProtect Mode:           None                     \nRetention:              0                        \nLocation:               hdfs://quickstart.cloudera:8020/user/hive/warehouse/customers     \nTable Type:             MANAGED_TABLE            \nTable Parameters:          \n    COLUMN_STATS_ACCURATE    false               \n    avro.schema.url         hdfs://quickstart.cloudera:8020/user/hive/warehouse/customers/.metadata/schemas/1.avsc\n    kite.compression.type    snappy              \n    numFiles                0                   \n    numRows                 -1                  \n    rawDataSize             -1                  \n    totalSize               0                   \n    transient_lastDdlTime    1523860617          \n\nStorage Information          \nSerDe Library:          org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe     \nInputFormat:            org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat     \nOutputFormat:           org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat     \nCompressed:             No                       \nNum Buckets:            -1                       \nBucket Columns:         []                       \nSort Columns:           []                       \nTime taken: 0.069 seconds, Fetched: 39 row(s)\n</code></pre><p>当然创建表也可以利用外部已经存在的文件导入（<code>CREATE EXTERNAL TABLE</code>）的方式。以外部表导入的方式不会在hive的仓库中查看到（用hive或者impala都能实现），</p>\n<p>比如下面的例子,我们在hive中执行以下操作</p>\n<pre><code>CREATE EXTERNAL TABLE tb_test01(id INT,category_id INT, name string,price INT)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY &apos;,&apos;\nSTORED AS TEXTFILE\nlocation &apos;/user/hive/external/tb_external_table01&apos;;\n</code></pre><p>LOCATION指的是warehouse的存放路径，不指定就到hive.metastore.warehouse.dir指定的路径下<br>(一般演示我习惯用TERMINATED ,分割)</p>\n<p>load 数据到刚刚创建的tb_test01表中，准备数据如下</p>\n<pre><code>[cloudera@quickstart tongbo]$ cat hadoop_external_test.txt \n1,24551,Cleats,17\n2,22246,Men&apos;s Footwear,18\n3,21035,Women&apos;s Apparel,24\n4,19298,Indoor/Outdoor Games,46\n5,17325,Fishing,45\n6,15540,Water Sports,48\n7,13729,Camping &amp; Hiking,43\n8,12487,Cardio Equipment,9\n9,10984,Shop By Sport,29\n10,2029,Electronics\n</code></pre><p><code>LOAD data local inpath &#39;/home/tongbo/hadoop_external_test.txt&#39; into table tb_test01;</code></p>\n<p>这样就实现了数据的导入。内部表和外部表的区别，简单概况如下：<br>Hive 创建内部表时，会将数据移动到数据仓库指向的路径（配置文件中配置）；<br>若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。<br>在删除表的时候，内部表的元数据和数 据会被一起删除，而外部表只删除元数据，不删除数据。</p>\n<p>下面主要说明如何用cdh中的hive（impala） web页面来进行查询操作。默认为8888端口，用户名和密码都是cloudera，mysql用户名为root，密码为cloudera</p>\n<p>在hive创建及查询等更新过程中，impala不会自动拉取跟新的元数据（metadata）的改变<br>，所以第一件事情是更新metadata的时效，这样我们可以看到所有目前的表</p>\n<pre><code>invalidate metadata;\nshow tables;\n</code></pre><p>当然可以通过内置的hdfs看到实际存储的文件记录。</p>\n<hr>\n<p>现在关系型数据库中的数据已经到了hdfs里面，回过头来看dataco公司的问题。</p>\n<p>下面的mysql展示了每个商品的总利润，并且取前十条</p>\n<pre><code>SELECT\n    count(order_item_quantity) AS count,\n    c.category_name,\n    c.category_id\nFROM\n    order_items AS oi\nINNER JOIN products AS p ON p.product_id = oi.order_item_product_id\nINNER JOIN categories AS c ON p.product_category_id = c.category_id\nGROUP BY\n    c.category_name\nORDER BY\n    count DESC\nLIMIT 10;\n+-------+----------------------+-------------+\n| count | category_name        | category_id |\n+-------+----------------------+-------------+\n| 24551 | Cleats               |          17 |\n| 22246 | Men&apos;s Footwear       |          18 |\n| 21035 | Women&apos;s Apparel      |          24 |\n| 19298 | Indoor/Outdoor Games |          46 |\n| 17325 | Fishing              |          45 |\n| 15540 | Water Sports         |          48 |\n| 13729 | Camping &amp; Hiking     |          43 |\n| 12487 | Cardio Equipment     |           9 |\n| 10984 | Shop By Sport        |          29 |\n|  3156 | Electronics          |          13 |\n+-------+----------------------+-------------+\n10 rows in set (0.28 sec)\n\nmysql&gt; \n</code></pre><p>下面是hive语法</p>\n<pre><code>select count(order_item_quantity) as count ,c.category_name,c.category_id from order_items as oi inner join products as p on p.product_id=oi.order_item_product_id\ninner join categories as c on p.product_category_id=c.category_id group by c.category_name,c.category_id\n order by count desc limit 10\n</code></pre><p>注意，hive语法中select后面不能有非聚合列，如果必须要有，需要在group by 上加上你要聚合的字段。在上述hive语法中就是加上 group by c.category_name,c.category_id</p>\n<pre><code>1    24551    Cleats    17\n2    22246    Men&apos;s Footwear    18\n3    21035    Women&apos;s Apparel    24\n4    19298    Indoor/Outdoor Games    46\n5    17325    Fishing    45\n6    15540    Water Sports    48\n7    13729    Camping &amp; Hiking    43\n8    12487    Cardio Equipment    9\n9    10984    Shop By Sport    29\n10    2029    Electronics\n</code></pre><p>再看下面一个复杂的sql</p>\n<pre><code>SELECT\n    p.product_id,\n    p.product_name,\n    r.revenue\nFROM\n    products AS p\nINNER JOIN (\n    SELECT\n        oi.order_item_product_id,\n        sum(\n            cast(\n                oi.order_item_subtotal AS FLOAT\n            )\n        ) AS revenue\n    FROM\n        order_items oi\n    INNER JOIN orders AS o ON oi.order_item_order_id = o.order_id\n    WHERE\n        o.order_status &lt;&gt; &apos;CANCELED&apos;\n    AND o.order_status &lt;&gt; &apos;SUSPECTED_FARUD&apos;\n    GROUP BY\n        order_item_product_id\n) AS r ON p.product_id = r.order_item_product_id\nORDER BY\n    r.revenue DESC\nLIMIT 10\n</code></pre><p>备注：SUSPECTED_FARUD 涉嫌欺诈</p>\n<p>结果如下：（记住这个结果，下面会用到）</p>\n<pre><code>    p.product_id     p.product_name                 r.revenue\n1    1004    Field &amp; Stream Sportsman 16 Gun Fire Safe    6795260.4066467285\n2    365    Perfect Fitness Perfect Rip Deck    4335357.441116333\n3    957    Diamondback Women&apos;s Serene Classic Comfort Bi    4038330.9078979492\n4    191    Nike Men&apos;s Free 5.0+ Running Shoe    3586941.2666854858\n5    502    Nike Men&apos;s Dri-FIT Victory Golf Polo    3082050\n6    1073    Pelican Sunstream 100 Kayak    3033648.3933258057\n7    403    Nike Men&apos;s CJ Elite 2 TD Football Cleat    2831052.3296356201\n8    1014    O&apos;Brien Men&apos;s Neoprene Life Vest    2830867.1741104126\n9    627    Under Armour Girls&apos; Toddler Spine Surge Runni    1242929.2107200623\n10    565    adidas Youth Germany Black/Red Away Match Soc    65940\n</code></pre><p>我用<code>impala</code>和<code>hive</code>分别执行上述语句。发现impala比hive快15倍左右。同时证明了我们用sqoop导入的数据结构（这里指metadata），适用于<code>hive</code>和<code>impala</code>两种引擎。<br>hive非常的灵活，是把sql的查询语法转换成mapreduce任务。而impala更适合交互接口分析，我们下面会再次hive在etl中的使用。</p>\n<p>总结一下，我们完成了用sqoop把数据导入到hdfs中，然后把他转换为格式化为avro行式存储。（可以在深入了解avro和parquet的区别）<br>经过以上过程，已经可以用hive或者impala查询数据。我们要更多了了解的是hadoop与传统架构相比，有更多的扩展和灵活性。</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">剧情三：</div><div class=\"line\"></div><div class=\"line\">领导：（无所谓）的说，你只是展示了你的数据，而且你这些数据我也知道。并没有什么卵用（额外的价值）</div><div class=\"line\">你：也是一脸淡定的无所谓，然后撸起袖子准备干一下。。</div></pre></td></tr></table></figure>\n</code></pre><p>练习2<br>把结构化数据和非结构化数据结合起来<br>作为基础运营，你现在有一点疑问：网站内浏览最多的商品就是卖的最多的吗？如果不是，导致原因是什么?</p>\n<p>hadoop可以存储结构化和半结构化的数据，而不必向关系型数据库那样，增加一个字段将同步所有的数据列。尤其是适用于web log日志这样的文件形式。我们查看一下最原始的访问站点的日志</p>\n<p>为了演示方便，我们批量导入180000条数据的access log。</p>\n<p>先在目录下创建一个目录，然后通过hadoop mv命令复制到warehouse下</p>\n<p>先看一下当前目录</p>\n<pre><code>cloudera@quickstart ~]$ hadoop fs -ls  /user/hive/warehouse\nFound 7 items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:36 /user/hive/warehouse/categories\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:38 /user/hive/warehouse/customers\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:39 /user/hive/warehouse/departments\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:40 /user/hive/warehouse/order_items\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:41 /user/hive/warehouse/orders\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-15 23:42 /user/hive/warehouse/products\ndrwxrwxrwx   - cloudera supergroup          0 2018-04-13 01:41 /user/hive/warehouse/xin.db\n[cloudera@quickstart ~]$ \n\n[cloudera@quickstart ~]$ sudo -u hdfs hadoop fs -mkdir /user/hive/warehouse/origin_access_logs\n</code></pre><p>看一下准备好的日志文件：<br>        [cloudera@quickstart ~]$ cd /opt/examples/log_files/<br>        [cloudera@quickstart log_files]$ ls<br>        access.log.2<br>        [cloudera@quickstart log_files]$ du -f access.log.2<br>        du: invalid option – ‘f’<br>        Try `du –help’ for more information.<br>        [cloudera@quickstart log_files]$ du -h access.log.2<br>        38M    access.log.2<br>        [cloudera@quickstart log_files]$ </p>\n<p>执行复制</p>\n<pre><code>[cloudera@quickstart log_files]$ sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive/warehouse/origin_access_logs\n\n由于两次拼写错误，把之前的删除。。\n[cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/origin__access_logs\nDeleted /user/hive/warehouse/origin__access_logs\n[cloudera@quickstart log_files]$ hadoop fs -rm -f /user/hive/warehouse/original_access_logs\nDeleted /user/hive/warehouse/original_access_logs\n[cloudera@quickstart log_files]$ \n</code></pre><p>验证一下上面的操作</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls /user/hive/warehouse/origin_access_logs\nFound 1 items\n-rw-r--r--   1 hdfs supergroup   39593868 2018-04-17 23:41 /user/hive/warehouse/origin_access_logs/access.log.2\n[cloudera@quickstart ~]$ \n</code></pre><p>现在我们可以创建一个表，然后用hive或者更腻害的impala来查询。我们需要以下两步：</p>\n<ol>\n<li>利用hive强大灵活的serdes ，解析日志，到自定义的hive表中的各个字段中。（通过（反）序列化到自定义的文件字段中）</li>\n<li>转移数据到中间表，以便不需要再次（反）序列化</li>\n</ol>\n<p>数据放入到表中之后，就可以通过cli或者hue查询啦。</p>\n<p>下面用hue创建表，并且导入。<br>先贴一下单一一行格式，参考regex的写法</p>\n<pre><code>144.72.77.159 - - [14/Jun/2014:17:16:22 -0400] &quot;GET /department/fan%20shop/category/fishing/product/Field%20&amp;%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe HTTP/1.1&quot; 200 1206 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:30.0) Gecko/20100101 Firefox/30.0&quot;\n\n\nCREATE external TABLE intermediate_access_logs (\n    ip string,\n    date string,\n    method string,\n    url string,\n    http_version string,\n    code1 string,\n    code2 string,\n    dash string,\n    user_agent string\n) ROW format serde &apos;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&apos; WITH serdeproperties (\n    &apos;input.regex&apos; = &apos;([^ ]*) - - \\\\[([^\\\\]]*)\\\\] &quot;([^\\ ]*) ([^\\ ]*) ([^\\ ]*)&quot; (\\\\d*) (\\\\d*) &quot;([^&quot;]*)&quot; &quot;([^&quot;]*)&quot;&apos;,\n    &apos;output.format.string&apos; = &quot;%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s&quot;\n) LOCATION &apos;/user/hive/warehouse/origin_access_logs&apos;\n</code></pre><p>创建完之后可以用上面讲到的命令在hive命令行执行。<br> <code>describe formatted intermediate_access_logs;</code></p>\n<p><code>serde</code>这个关键词（应该是序列化，或者格式化），一般这样使用：<br>用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。<br>如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。<br>在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，<br>Hive 通过 SerDe 确定表的具体的列的数据</p>\n<p>再说<code>location</code>这个关键词<br><code>EXTERNAL</code> 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）<br>上面那句是) LOCATION ‘/user/hive/warehouse/origin_access_logs’</p>\n<p>另外插一句，上面说的内部表和外部表问题。<br>首先建立一个演示外部表的目录（新建一个）<br><code>hadoop fs -mkdir -p /user/hive_external_table/</code></p>\n<p>然后把原始日志放入到这个目录</p>\n<p><code>sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2  /user/hive_external_table/</code><br>验证以上的结果</p>\n<pre><code>[cloudera@quickstart ~]$ hadoop fs -ls  /user/hive_external_table/\nFound 1 items\n-rw-r--r--   1 hdfs supergroup   39593868 2018-04-18 04:14 /user/hive_external_table/access.log.2\n[cloudera@quickstart ~]$ \n\n\ndrop table intermediate_access_logs\n\nCREATE external TABLE intermediate_access_logs (\n    ip string,\n    date string,\n    method string,\n    url string,\n    http_version string,\n    code1 string,\n    code2 string,\n    dash string,\n    user_agent string\n) ROW format serde &apos;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&apos; WITH serdeproperties (\n    &apos;input.regex&apos; = &apos;([^ ]*) - - \\\\[([^\\\\]]*)\\\\] &quot;([^\\ ]*) ([^\\ ]*) ([^\\ ]*)&quot; (\\\\d*) (\\\\d*) &quot;([^&quot;]*)&quot; &quot;([^&quot;]*)&quot;&apos;,\n    &apos;output.format.string&apos; = &quot;%1$$s %2$$s %3$$s %4$$s %5$$s %6$$s %7$$s %8$$s %9$$s&quot;\n) LOCATION &apos; /user/hive_external_table/&apos;\n</code></pre><p>如果删除外部表，目录和文件都不会被删除，即使是指定和默认目录一样（比如创建外部表的时候指定 location 为/user/hive/warehouse/products）<br>如果是删除内部表，目录和文件都会被删除。即使是指定的为非默认目录，同样都会被删除（比如创建内部表时指定 location 为 /user/hive_external_table）</p>\n<p>指定了目录之后，如果目录下有文件，将会自动加载所有</p>\n<p>CREATE EXTERNAL TABLE tokenized_access_logs (<br>    ip STRING,<br>    date STRING,<br>    method STRING,<br>    url STRING,<br>    http_version STRING,<br>    code1 STRING,<br>    code2 STRING,<br>    dash STRING,<br>    user_agent STRING)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’<br>LOCATION ‘/user/hive/warehouse/tokenized_access_logs’;</p>\n<p>跳出来，我们继续上面练习。</p>\n<p>ADD JAR /usr/lib/hive/lib/hive-contrib.jar;</p>\n<p>INSERT OVERWRITE TABLE tokenized_access_logs SELECT * FROM intermediate_access_logs;</p>\n<p>最后的查询会调用mapreduce任务（和sqoop一样），可以并行的将数据转移到tokenized_access_logs表中。上面提到过，对于新加的表，我们如果用impala的话，必须重新获取。<br>invalidate metadata;</p>\n<p>show  tables</p>\n<p>我们可以看到刚刚创建的两个外部表。</p>\n<p>1    categories<br>2    customers<br>3    departments<br>4    intermediate_access_logs<br>5    order_items<br>6    orders<br>7    products<br>8    tb_test01<br>9    tokenized_access_logs</p>\n<p>还是为了验证一下：查询url中包括product的url的总量，按照倒序排</p>\n<p>select count(*) as nums,url from tokenized_access_logs where url like ‘%\\/product\\/%’ group by url order by nums desc<br>摘抄结果如下：（这里面要是有商品id可能会与下面的对比更明显些，nginx可以用cookie实现）<br>     nums    url<br>1    1926    /department/apparel/category/cleats/product/Perfect%20Fitness%20Perfect%20Rip%20Deck<br>2    1793    /department/apparel/category/featured%20shops/product/adidas%20Kids’%20RG%20III%20Mid%20Football%20Cleat<br>3    1780    /department/golf/category/women’s%20apparel/product/Nike%20Men’s%20Dri-FIT%20Victory%20Golf%20Polo<br>4    1757    /department/apparel/category/men’s%20footwear/product/Nike%20Men’s%20CJ%20Elite%202%20TD%20Football%20Cleat<br>5    1104    /department/fan%20shop/category/water%20sports/product/Pelican%20Sunstream%20100%20Kayak<br>6    1084    /department/fan%20shop/category/indoor/outdoor%20games/product/O’Brien%20Men’s%20Neoprene%20Life%20Vest<br>7    1059    /department/fan%20shop/category/camping%20&amp;%20hiking/product/Diamondback%20Women’s%20Serene%20Classic%20Comfort%20Bi<br>8    1028    /department/fan%20shop/category/fishing/product/Field%20&amp;%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe<br>9    1004    /department/footwear/category/cardio%20equipment/product/Nike%20Men’s%20Free%205.0+%20Running%20Shoe<br>10    939    /department/footwear/category/fitness%20accessories/product/Under%20Armour%20Hustle%20Storm%20Medium%20Duffle%20Bag<br>对数据很敏感的人会联想到上面我们的一个结果，是统计商品id，商品名字，和贡献收入的，再贴一下</p>\n<p>1    1004    Field &amp; Stream Sportsman 16 Gun Fire Safe    6795260.4066467285<br>2    365    Perfect Fitness Perfect Rip Deck    4335357.441116333<br>3    957    Diamondback Women’s Serene Classic Comfort Bi    4038330.9078979492<br>4    191    Nike Men’s Free 5.0+ Running Shoe    3586941.2666854858<br>5    502    Nike Men’s Dri-FIT Victory Golf Polo    3082050<br>6    1073    Pelican Sunstream 100 Kayak    3033648.3933258057<br>7    403    Nike Men’s CJ Elite 2 TD Football Cleat    2831052.3296356201<br>8    1014    O’Brien Men’s Neoprene Life Vest    2830867.1741104126<br>9    627    Under Armour Girls’ Toddler Spine Surge Runni    1242929.2107200623<br>10    565    adidas Youth Germany Black/Red Away Match Soc    65940</p>\n<p>通过简单对比，发现/department/apparel/category/featured%20shops/product/adidas%20Kids’%20RG%20III%20Mid%20Football%20Cleat这个url访问的数量占据第二。</p>\n<p>这里就会发现一些问题。</p>\n<p>实践证明，如果米没有一个大数据的结构化的分析工具。统计出以上时间可能会花费很多时间。不排除自己搭建的平台的容错兼容分布式等维护问题带来的数据损失。</p>\n<p>你帮老板发现了这个问题，老板很高兴，要给你资金支持。你准备大干一把了！</p>\n<p>实践三：市场部门要优化市场策略，想通过一些数据的交叉分析（关联性）把单独浏览量少的商品卖出去更多，或者再次统计一下倒数10的商品。</p>\n<p>快速的大数据分析，那就是用到apache的spark了。我们可以构建一个spark任务，直观展示商品之间的关联。</p>\n<p>通过以下命令执行<br>[cloudera@quickstart ~]$ spark-shell –master yarn-client<br>Setting default log level to “WARN”.<br>To adjust logging level use sc.setLogLevel(newLevel).<br>SLF4J: Class path contains multiple SLF4J bindings.<br>SLF4J: Found binding in [jar:file:/usr/lib/zookeeper/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/flume-ng/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/parquet/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/usr/lib/avro/avro-tools-1.7.6-cdh5.12.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: See <a href=\"http://www.slf4j.org/codes.html#multiple_bindings\">http://www.slf4j.org/codes.html#multiple_bindings</a> for an explanation.<br>SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]<br>Welcome to</p>\n<pre><code>  ____              __\n / __/__  ___ _____/ /__\n_\\ \\/ _ \\/ _ `/ __/  &apos;_/\n</code></pre><p>   /<strong>_/ .</strong>/_,<em>/</em>/ /<em>/\\</em>\\   version 1.6.0<br>      /_/</p>\n<p>Using Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67)<br>Type in expressions to have them evaluated.<br>Type :help for more information.<br>18/04/23 19:59:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>18/04/23 19:59:59 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.<br>Spark context available as sc (master = yarn-client, app id = application_1524536469679_0001).<br>SQL context available as sqlContext.</p>\n<p>下一步，我们首先引入我们需要的类<br>import org.apache.hadoop.mapreduce.Job<br>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat<br>import org.apache.avro.generic.GenericRecord<br>import parquet.hadoop.ParquetInputFormat<br>import parquet.avro.AvroReadSupport<br>import org.apache.spark.rdd.RDD</p>\n<p>rdd是spark的核心，一个rdd可以理解为一个可以被分区的只读数据集（当然是分布式的）。一个rdd内有很多分区，分区内又有大量的数据记录。<br>rdd的操作最终还是落到内存或者硬盘上。</p>\n<p>下面我们创建一个rdd，提供给order_items和products表使用</p>\n<p>def rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {<br>    val job = new Job()<br>    FileInputFormat.setInputPaths(job, path)<br>    ParquetInputFormat.setReadSupportClass(job,<br>        classOf[AvroReadSupport[GenericRecord]])<br>    return sc.newAPIHadoopRDD(job.getConfiguration,<br>        classOf[ParquetInputFormat[GenericRecord]],<br>        classOf[Void],<br>        classOf[GenericRecord]).map(x =&gt; x._2)<br>}</p>\n<p>val warehouse = “hdfs://quickstart/user/hive/warehouse/“<br>val order_items = rddFromParquetHdfsFile(warehouse + “order_items”);<br>val products = rddFromParquetHdfsFile(warehouse + “products”);</p>\n<p>下一步，我们从order_items表和products表提取出我们想要的数据，以一个列表的形式存在，包含name和quantity，以order排序。<br>val orders = order_items.map { x =&gt; (<br>    x.get(“order_item_product_id”),<br>    (x.get(“order_item_order_id”), x.get(“order_item_quantity”)))<br>}.join(<br>  products.map { x =&gt; (<br>    x.get(“product_id”),<br>    (x.get(“product_name”)))<br>  }<br>).map(x =&gt; (<br>    scala.Int.unbox(x._2._1._1), // order_id<br>    (<br>        scala.Int.unbox(x._2._1._2), // quantity<br>        x._2._2.toString // product_name<br>    )<br>)).groupByKey()</p>\n<p>最后，我们衡量（tally）计算出订单中所有商品的组合次数，比如发现啤酒和纸尿裤这两个关联性特别高。<br>按顺序排列拿到前10</p>\n<p>val cooccurrences = orders.map(order =&gt;<br>  (<br>    order._1,<br>    order._2.toList.combinations(2).map(order_pair =&gt;<br>        (<br>            if (order_pair(0)._2 &lt; order_pair(1)._2)<br>                (order_pair(0)._2, order_pair(1)._2)<br>            else<br>                (order_pair(1)._2, order_pair(0)._2),<br>            order_pair(0)._1 * order_pair(1)._1<br>        )<br>    )<br>  )<br>)<br>val combos = cooccurrences.flatMap(x =&gt; x._2).reduceByKey((a, b) =&gt; a + b)<br>val mostCommon = combos.map(x =&gt; (x._2, x._1)).sortByKey(false).take(10)</p>\n<p>最后打印结果</p>\n<p>println(mostCommon.deep.mkString(“\\n”))</p>\n<p>exit</p>\n<p>完整的代码如下：<br>// First we’re going to import the classes we need</p>\n<p>import org.apache.hadoop.mapreduce.Job<br>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat<br>import org.apache.avro.generic.GenericRecord<br>import parquet.hadoop.ParquetInputFormat<br>import parquet.avro.AvroReadSupport<br>import org.apache.spark.rdd.RDD</p>\n<p>// Then we create RDD’s for 2 of the files we imported from MySQL with Sqoop<br>// RDD’s are Spark’s data structures for working with distributed datasets</p>\n<p>def rddFromParquetHdfsFile(path: String): RDD[GenericRecord] = {<br>    val job = new Job()<br>    FileInputFormat.setInputPaths(job, path)<br>    ParquetInputFormat.setReadSupportClass(job,<br>        classOf[AvroReadSupport[GenericRecord]])<br>    return sc.newAPIHadoopRDD(job.getConfiguration,<br>        classOf[ParquetInputFormat[GenericRecord]],<br>        classOf[Void],<br>        classOf[GenericRecord]).map(x =&gt; x._2)<br>}</p>\n<p>val warehouse = “hdfs://quickstart/user/hive/warehouse/“<br>val order_items = rddFromParquetHdfsFile(warehouse + “order_items”);<br>val products = rddFromParquetHdfsFile(warehouse + “products”);</p>\n<p>// Next, we extract the fields from order_items and products that we care about<br>// and get a list of every product, its name and quantity, grouped by order</p>\n<p>val orders = order_items.map { x =&gt; (<br>    x.get(“order_item_product_id”),<br>    (x.get(“order_item_order_id”), x.get(“order_item_quantity”)))<br>}.join(<br>  products.map { x =&gt; (<br>    x.get(“product_id”),<br>    (x.get(“product_name”)))<br>  }<br>).map(x =&gt; (<br>    scala.Int.unbox(x._2._1._1), // order_id<br>    (<br>        scala.Int.unbox(x._2._1._2), // quantity<br>        x._2._2.toString // product_name<br>    )<br>)).groupByKey()</p>\n<p>// Finally, we tally how many times each combination of products appears<br>// together in an order, then we sort them and take the 10 most common</p>\n<p>val cooccurrences = orders.map(order =&gt;<br>  (<br>    order._1,<br>    order._2.toList.combinations(2).map(order_pair =&gt;<br>        (<br>            if (order_pair(0)._2 &lt; order_pair(1)._2)<br>                (order_pair(0)._2, order_pair(1)._2)<br>            else<br>                (order_pair(1)._2, order_pair(0)._2),<br>            order_pair(0)._1 * order_pair(1)._1<br>        )<br>    )<br>  )<br>)<br>val combos = cooccurrences.flatMap(x =&gt; x._2).reduceByKey((a, b) =&gt; a + b)<br>val mostCommon = combos.map(x =&gt; (x._2, x._1)).sortByKey(false).take(10)</p>\n<p>// We print our results, 1 per line, and exit the Spark shell</p>\n<p>println(mostCommon.deep.mkString(“\\n”))</p>\n<p>exit</p>\n<p>结果如下：</p>\n<p>scala&gt; println(mostCommon.deep.mkString(“\\n”))<br>(67876,(Nike Men’s Dri-FIT Victory Golf Polo,Perfect Fitness Perfect Rip Deck))<br>(62924,(O’Brien Men’s Neoprene Life Vest,Perfect Fitness Perfect Rip Deck))<br>(54399,(Nike Men’s Dri-FIT Victory Golf Polo,O’Brien Men’s Neoprene Life Vest))<br>(39656,(Nike Men’s Free 5.0+ Running Shoe,Perfect Fitness Perfect Rip Deck))<br>(39314,(Perfect Fitness Perfect Rip Deck,Perfect Fitness Perfect Rip Deck))<br>(35092,(Perfect Fitness Perfect Rip Deck,Under Armour Girls’ Toddler Spine Surge Runni))<br>(33750,(Nike Men’s Dri-FIT Victory Golf Polo,Nike Men’s Free 5.0+ Running Shoe))<br>(33406,(Nike Men’s Free 5.0+ Running Shoe,O’Brien Men’s Neoprene Life Vest))<br>(29835,(Nike Men’s Dri-FIT Victory Golf Polo,Nike Men’s Dri-FIT Victory Golf Polo))<br>(29342,(Nike Men’s Dri-FIT Victory Golf Polo,Under Armour Girls’ Toddler Spine Surge Run</p>\n<p>简单的说，map就是通过提取过滤指定的字段，进行方法的invoke map。reduce是join &amp;&amp; group by。</p>\n<p>如果没有spark这种分析工具，统计这些数据是很话费时间并且很困难。然后用scala几行代码。你就会分析出来订单中n多商品的相互关联性。<br>并且花费很少时间。</p>\n<p>翻篇儿：</p>\n<p>领导找你：数据有问题，赶紧过来看，怎么干的事情！</p>\n<p>你:刚得瑟几天，怎么出大事了，赶紧去看看what happened</p>\n<p>现在我们讲一讲实时的日志同步，并且以多维度去筛选。用到的是apache的flume 和apache的solr。钻取（drill down）和探取（exploration）</p>\n<p>solr以类sql形式组织数据。每条数据也是叫document（文档或者集合），每个文档包含字段（类似于mysql的schema），<br>solr的数据很灵活，而且可以全文索引中某个字段。solr也是把数据分布式放在各个分片上。并且在查询的时候可以自动均衡，提高响应速度。</p>\n<p>solr就不说了，现在都是elk了。。</p>\n<p>完</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxag35m40000nsgvq7brdxdi","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35mq000cnsgvs7o8f95x"},{"post_id":"cjxag35mb0002nsgvgyv82eag","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35mw000insgvzfjm3exm"},{"post_id":"cjxag35mq000dnsgvq9obzu5j","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35my000mnsgv7y930kzr"},{"post_id":"cjxag35mu000gnsgv8enlolr9","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35n0000pnsgv0xb096ps"},{"post_id":"cjxag35mi0006nsgvya0sx6o8","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35n3000unsgv8ev7u1ku"},{"post_id":"cjxag35mv000hnsgvjlnbmwja","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35n5000xnsgv4bi5anx0"},{"post_id":"cjxag35my000lnsgvl45cjpvu","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35n70011nsgvk6drw1jw"},{"post_id":"cjxag35mj0007nsgvf2n8w626","category_id":"cjxag35mw000jnsgvv3zf1rwr","_id":"cjxag35n90014nsgv864wm03g"},{"post_id":"cjxag35mz000onsgvb8ka7ida","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35nb0017nsgvw648c6ni"},{"post_id":"cjxag35ml0008nsgvymye6xvs","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35nd001ansgvomyfp3cn"},{"post_id":"cjxag35n4000wnsgv9ggebd1q","category_id":"cjxag35mm0009nsgv3bkfgv0e","_id":"cjxag35nf001dnsgvrbnzl32r"},{"post_id":"cjxag35mo000bnsgvcgsqzruj","category_id":"cjxag35mw000jnsgvv3zf1rwr","_id":"cjxag35nh001gnsgvw23m8ply"},{"post_id":"cjxag35nc0019nsgvzeinvf3e","category_id":"cjxag35na0015nsgv50r1btow","_id":"cjxag35nj001jnsgvbemqithd"},{"post_id":"cjxag35n70010nsgvy8c150su","category_id":"cjxag35na0015nsgv50r1btow","_id":"cjxag35nm001onsgv7hl319x0"},{"post_id":"cjxag35ne001bnsgvo3ox43m6","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35nn001rnsgvllzj1z2d"},{"post_id":"cjxag35ng001fnsgvpgu5dyls","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35np001unsgvcylaqnbu"},{"post_id":"cjxag35n80013nsgvalhgazh4","category_id":"cjxag35nf001cnsgv982kpjes","_id":"cjxag35nt001ynsgvyhctbp3j"},{"post_id":"cjxag35ni001insgvx588fi5t","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35nv0020nsgvpj4as1jr"},{"post_id":"cjxag35nl001nnsgv6yfvlbd7","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35nx0024nsgv4epeq3z4"},{"post_id":"cjxag35na0016nsgvxrcrlb2y","category_id":"cjxag35na0015nsgv50r1btow","_id":"cjxag35ny0025nsgvjv3g6arz"},{"post_id":"cjxag35nn001qnsgvjb1fofcs","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35nz0028nsgv0867jlk1"},{"post_id":"cjxag35no001tnsgvkkgner0i","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35o00029nsgv9rs13xc0"},{"post_id":"cjxag35nw0023nsgv58tjcjib","category_id":"cjxag35mf0004nsgvno6v31tu","_id":"cjxag35o1002bnsgve4x7rdzu"},{"post_id":"cjxag35nr001xnsgvi1ug90vx","category_id":"cjxag35nw0022nsgvd2gr9r89","_id":"cjxag35o2002dnsgvzz5eiq3i"},{"post_id":"cjxag35nu001znsgvlkv5u073","category_id":"cjxag35nz0027nsgvmrhde5l8","_id":"cjxag35o3002fnsgvjyhxjcz5"},{"post_id":"cjxag35u1004ynsgv88dp2jrk","category_id":"cjxag35u30050nsgvhcxfy4xe","_id":"cjxag35u50053nsgvv2o2it81"},{"post_id":"cjxag35ve0058nsgvjrv9jxuy","category_id":"cjxag35mw000jnsgvv3zf1rwr","_id":"cjxag35vi005ansgv5t9v1u8w"}],"PostTag":[{"post_id":"cjxag35m40000nsgvq7brdxdi","tag_id":"cjxag35mh0005nsgv9fes4dao","_id":"cjxag35mz000nnsgvgjytnvjb"},{"post_id":"cjxag35m40000nsgvq7brdxdi","tag_id":"cjxag35mn000ansgvhlx1giy6","_id":"cjxag35n1000qnsgvjkbjly0w"},{"post_id":"cjxag35m40000nsgvq7brdxdi","tag_id":"cjxag35mr000fnsgvttentw85","_id":"cjxag35n4000vnsgviofod2u3"},{"post_id":"cjxag35mb0002nsgvgyv82eag","tag_id":"cjxag35mx000knsgvkgsx7n1c","_id":"cjxag35n5000ynsgvl4a9s7pu"},{"post_id":"cjxag35mi0006nsgvya0sx6o8","tag_id":"cjxag35n2000snsgvirwz6doi","_id":"cjxag35nh001hnsgvichzy2bt"},{"post_id":"cjxag35mi0006nsgvya0sx6o8","tag_id":"cjxag35n80012nsgvdec2wgeh","_id":"cjxag35nk001lnsgv9zil4u7t"},{"post_id":"cjxag35mi0006nsgvya0sx6o8","tag_id":"cjxag35nc0018nsgvwj4h5k7n","_id":"cjxag35nm001pnsgv32t1v88l"},{"post_id":"cjxag35mj0007nsgvf2n8w626","tag_id":"cjxag35nf001ensgvfrah121u","_id":"cjxag35no001snsgvb7slzs7e"},{"post_id":"cjxag35ml0008nsgvymye6xvs","tag_id":"cjxag35nk001mnsgvsi8kpchm","_id":"cjxag35nq001wnsgvoz1yi4g1"},{"post_id":"cjxag35mo000bnsgvcgsqzruj","tag_id":"cjxag35nq001vnsgvhiyn4tyn","_id":"cjxag35o2002cnsgv2maqiiai"},{"post_id":"cjxag35mo000bnsgvcgsqzruj","tag_id":"cjxag35nv0021nsgvvf6us1ly","_id":"cjxag35o2002ensgvjhn0kqif"},{"post_id":"cjxag35mo000bnsgvcgsqzruj","tag_id":"cjxag35ny0026nsgvj2wn3u4o","_id":"cjxag35o4002hnsgv2kzkt2zj"},{"post_id":"cjxag35mq000dnsgvq9obzu5j","tag_id":"cjxag35o1002ansgvx8vose3c","_id":"cjxag35o4002insgv8es2f5ph"},{"post_id":"cjxag35mu000gnsgv8enlolr9","tag_id":"cjxag35o1002ansgvx8vose3c","_id":"cjxag35o5002knsgv2jz8n98y"},{"post_id":"cjxag35mv000hnsgvjlnbmwja","tag_id":"cjxag35o1002ansgvx8vose3c","_id":"cjxag35o7002mnsgv8zhtaad3"},{"post_id":"cjxag35my000lnsgvl45cjpvu","tag_id":"cjxag35o6002lnsgv502r1ao7","_id":"cjxag35o9002qnsgvtdpitzo3"},{"post_id":"cjxag35my000lnsgvl45cjpvu","tag_id":"cjxag35o7002nnsgv695kp3xd","_id":"cjxag35oa002rnsgvpyga27wx"},{"post_id":"cjxag35my000lnsgvl45cjpvu","tag_id":"cjxag35o8002onsgv6zzrnkqh","_id":"cjxag35oa002tnsgvna07qyiv"},{"post_id":"cjxag35mz000onsgvb8ka7ida","tag_id":"cjxag35o9002pnsgv2rkr9bet","_id":"cjxag35oc002xnsgvpwz8n09y"},{"post_id":"cjxag35mz000onsgvb8ka7ida","tag_id":"cjxag35oa002snsgv6jnb7ifa","_id":"cjxag35oc002ynsgvwyaowdi7"},{"post_id":"cjxag35mz000onsgvb8ka7ida","tag_id":"cjxag35ob002unsgvivcpdjos","_id":"cjxag35od0030nsgvcnmxs7g9"},{"post_id":"cjxag35mz000onsgvb8ka7ida","tag_id":"cjxag35ob002vnsgvqbdto0g8","_id":"cjxag35od0031nsgvius2u801"},{"post_id":"cjxag35n2000tnsgvezwqjrx4","tag_id":"cjxag35oc002wnsgvfespljuq","_id":"cjxag35of0034nsgv98a1ljjt"},{"post_id":"cjxag35n2000tnsgvezwqjrx4","tag_id":"cjxag35od002znsgvt3ydw861","_id":"cjxag35of0035nsgvuzbjv5k9"},{"post_id":"cjxag35n2000tnsgvezwqjrx4","tag_id":"cjxag35oe0032nsgv6vr4dm7a","_id":"cjxag35og0037nsgvfkced0q3"},{"post_id":"cjxag35n4000wnsgv9ggebd1q","tag_id":"cjxag35o1002ansgvx8vose3c","_id":"cjxag35oh0038nsgv5l5d82zo"},{"post_id":"cjxag35n70010nsgvy8c150su","tag_id":"cjxag35og0036nsgvisxcl7x2","_id":"cjxag35oj003cnsgvbcx5tduk"},{"post_id":"cjxag35n70010nsgvy8c150su","tag_id":"cjxag35od002znsgvt3ydw861","_id":"cjxag35oj003dnsgvpt61h5h9"},{"post_id":"cjxag35n70010nsgvy8c150su","tag_id":"cjxag35oe0032nsgv6vr4dm7a","_id":"cjxag35oj003fnsgv35gewdt0"},{"post_id":"cjxag35n80013nsgvalhgazh4","tag_id":"cjxag35oi003bnsgvalmdeaou","_id":"cjxag35ok003insgvtjpdtoas"},{"post_id":"cjxag35n80013nsgvalhgazh4","tag_id":"cjxag35oj003ensgvwqsncpf4","_id":"cjxag35ol003jnsgvvr02l8iv"},{"post_id":"cjxag35n80013nsgvalhgazh4","tag_id":"cjxag35ok003gnsgv7q7j6jrd","_id":"cjxag35ol003lnsgvpj45lv4r"},{"post_id":"cjxag35na0016nsgvxrcrlb2y","tag_id":"cjxag35ok003hnsgv5edxpzwy","_id":"cjxag35on003onsgvi9hubjgb"},{"post_id":"cjxag35na0016nsgvxrcrlb2y","tag_id":"cjxag35od002znsgvt3ydw861","_id":"cjxag35on003pnsgv23sbbejt"},{"post_id":"cjxag35na0016nsgvxrcrlb2y","tag_id":"cjxag35oe0032nsgv6vr4dm7a","_id":"cjxag35oo003rnsgvzriy7lmp"},{"post_id":"cjxag35nc0019nsgvzeinvf3e","tag_id":"cjxag35on003nnsgvxrbbku0s","_id":"cjxag35op003unsgvyjc8ijnc"},{"post_id":"cjxag35nc0019nsgvzeinvf3e","tag_id":"cjxag35od002znsgvt3ydw861","_id":"cjxag35oq003vnsgvslwwvmay"},{"post_id":"cjxag35nc0019nsgvzeinvf3e","tag_id":"cjxag35oe0032nsgv6vr4dm7a","_id":"cjxag35oq003xnsgval4qdseh"},{"post_id":"cjxag35ne001bnsgvo3ox43m6","tag_id":"cjxag35op003tnsgvmy8aduzu","_id":"cjxag35or003znsgvgp6qujuh"},{"post_id":"cjxag35ne001bnsgvo3ox43m6","tag_id":"cjxag35oq003wnsgvqatzj0z7","_id":"cjxag35or0040nsgvkbtgojr9"},{"post_id":"cjxag35ng001fnsgvpgu5dyls","tag_id":"cjxag35or003ynsgvgwd0ip9t","_id":"cjxag35os0042nsgvvl1u0yht"},{"post_id":"cjxag35ni001insgvx588fi5t","tag_id":"cjxag35os0041nsgv45etis8u","_id":"cjxag35ot0044nsgv4is35g7s"},{"post_id":"cjxag35nl001nnsgv6yfvlbd7","tag_id":"cjxag35ob002unsgvivcpdjos","_id":"cjxag35ov0048nsgv4nz4gft1"},{"post_id":"cjxag35nl001nnsgv6yfvlbd7","tag_id":"cjxag35ou0045nsgvi6021oq3","_id":"cjxag35ov0049nsgvxyt2sssh"},{"post_id":"cjxag35nl001nnsgv6yfvlbd7","tag_id":"cjxag35ou0046nsgvxsao9afs","_id":"cjxag35ow004bnsgv6zcszv8j"},{"post_id":"cjxag35nn001qnsgvjb1fofcs","tag_id":"cjxag35ov0047nsgv84v27jvv","_id":"cjxag35ox004ensgvz7ud288k"},{"post_id":"cjxag35nn001qnsgvjb1fofcs","tag_id":"cjxag35ow004ansgvcmcqktql","_id":"cjxag35ox004fnsgvr7tznbxm"},{"post_id":"cjxag35nn001qnsgvjb1fofcs","tag_id":"cjxag35ow004cnsgvdzxglg2e","_id":"cjxag35oy004hnsgvpd0ep6we"},{"post_id":"cjxag35no001tnsgvkkgner0i","tag_id":"cjxag35ox004dnsgvt4q4z71l","_id":"cjxag35oz004knsgvco9vc62h"},{"post_id":"cjxag35no001tnsgvkkgner0i","tag_id":"cjxag35ob002unsgvivcpdjos","_id":"cjxag35oz004lnsgvkse7k6zl"},{"post_id":"cjxag35no001tnsgvkkgner0i","tag_id":"cjxag35oy004insgvnbdck2u8","_id":"cjxag35p0004nnsgvjml4vxhy"},{"post_id":"cjxag35nr001xnsgvi1ug90vx","tag_id":"cjxag35oz004jnsgvwbzjd1zh","_id":"cjxag35p0004onsgv5438ol9j"},{"post_id":"cjxag35nu001znsgvlkv5u073","tag_id":"cjxag35p0004mnsgvq8thjpqh","_id":"cjxag35p2004tnsgvn073gn76"},{"post_id":"cjxag35nu001znsgvlkv5u073","tag_id":"cjxag35p0004pnsgvjcd0s3wz","_id":"cjxag35p2004unsgv3z11wu9c"},{"post_id":"cjxag35nu001znsgvlkv5u073","tag_id":"cjxag35p1004qnsgvigrmqk3h","_id":"cjxag35p3004vnsgvtv10qoba"},{"post_id":"cjxag35nu001znsgvlkv5u073","tag_id":"cjxag35p1004rnsgviz7pkt6m","_id":"cjxag35p3004wnsgvndyy5k85"},{"post_id":"cjxag35nw0023nsgv58tjcjib","tag_id":"cjxag35p2004snsgv2x2km8w6","_id":"cjxag35p3004xnsgv39a4af57"},{"post_id":"cjxag35u1004ynsgv88dp2jrk","tag_id":"cjxag35u30051nsgv7zz0fgi0","_id":"cjxag35u60055nsgvktxtj1it"},{"post_id":"cjxag35u1004ynsgv88dp2jrk","tag_id":"cjxag35u40052nsgva2e9l44r","_id":"cjxag35u70056nsgvplmjx6vo"},{"post_id":"cjxag35u1004ynsgv88dp2jrk","tag_id":"cjxag35u50054nsgvfs8ds81j","_id":"cjxag35u70057nsgvti020z3d"},{"post_id":"cjxag35ve0058nsgvjrv9jxuy","tag_id":"cjxag35vf0059nsgvj1odhnul","_id":"cjxag35vj005bnsgv7nxom3vz"},{"post_id":"cjxag35ve0058nsgvjrv9jxuy","tag_id":"cjxag35od002znsgvt3ydw861","_id":"cjxag35vk005cnsgv4cndhllt"}],"Tag":[{"name":"RSA","_id":"cjxag35mh0005nsgv9fes4dao"},{"name":"AES","_id":"cjxag35mn000ansgvhlx1giy6"},{"name":"双向加密解密","_id":"cjxag35mr000fnsgvttentw85"},{"name":"大端字节序","_id":"cjxag35mx000knsgvkgsx7n1c"},{"name":"PHP框架","_id":"cjxag35n2000snsgvirwz6doi"},{"name":"CI框架","_id":"cjxag35n80012nsgvdec2wgeh"},{"name":"接口文档","_id":"cjxag35nc0018nsgvwj4h5k7n"},{"name":"计算机科学","_id":"cjxag35nf001ensgvfrah121u"},{"name":"数组与指针","_id":"cjxag35nk001mnsgvsi8kpchm"},{"name":"硬盘","_id":"cjxag35nq001vnsgvhiyn4tyn"},{"name":"扇区","_id":"cjxag35nv0021nsgvvf6us1ly"},{"name":"磁道","_id":"cjxag35ny0026nsgvj2wn3u4o"},{"name":"HEAD_FIRST_C","_id":"cjxag35o1002ansgvx8vose3c"},{"name":"接口调用","_id":"cjxag35o6002lnsgv502r1ao7"},{"name":"安全性","_id":"cjxag35o7002nnsgv695kp3xd"},{"name":"sign&token","_id":"cjxag35o8002onsgv6zzrnkqh"},{"name":"HTTP","_id":"cjxag35o9002pnsgv2rkr9bet"},{"name":"CACHE","_id":"cjxag35oa002snsgv6jnb7ifa"},{"name":"PHP","_id":"cjxag35ob002unsgvivcpdjos"},{"name":"NGINX","_id":"cjxag35ob002vnsgvqbdto0g8"},{"name":"装饰模式","_id":"cjxag35oc002wnsgvfespljuq"},{"name":"软件设计师","_id":"cjxag35od002znsgvt3ydw861"},{"name":"JAVA","_id":"cjxag35oe0032nsgv6vr4dm7a"},{"name":"桥接模式","_id":"cjxag35og0036nsgvisxcl7x2"},{"name":"jp2a","_id":"cjxag35oi003bnsgvalmdeaou"},{"name":"ascii","_id":"cjxag35oj003ensgvwqsncpf4"},{"name":"meituan","_id":"cjxag35ok003gnsgv7q7j6jrd"},{"name":"适配器模式","_id":"cjxag35ok003hnsgv5edxpzwy"},{"name":"策略模式","_id":"cjxag35on003nnsgvxrbbku0s"},{"name":"linux","_id":"cjxag35op003tnsgvmy8aduzu"},{"name":"cpu","_id":"cjxag35oq003wnsgvqatzj0z7"},{"name":"mycnart","_id":"cjxag35or003ynsgvgwd0ip9t"},{"name":"异常","_id":"cjxag35os0041nsgv45etis8u"},{"name":"插入排序","_id":"cjxag35ou0045nsgvi6021oq3"},{"name":"算法","_id":"cjxag35ou0046nsgvxsao9afs"},{"name":"PHP7","_id":"cjxag35ov0047nsgv84v27jvv"},{"name":"FPM","_id":"cjxag35ow004ansgvcmcqktql"},{"name":"Ubuntu","_id":"cjxag35ow004cnsgvdzxglg2e"},{"name":"PHPSTORM","_id":"cjxag35ox004dnsgvt4q4z71l"},{"name":"编辑器","_id":"cjxag35oy004insgvnbdck2u8"},{"name":"REDIS应用","_id":"cjxag35oz004jnsgvwbzjd1zh"},{"name":"github.page","_id":"cjxag35p0004mnsgvq8thjpqh"},{"name":"hexo","_id":"cjxag35p0004pnsgvjcd0s3wz"},{"name":"git","_id":"cjxag35p1004qnsgvigrmqk3h"},{"name":"node","_id":"cjxag35p1004rnsgviz7pkt6m"},{"name":"工作日计算","_id":"cjxag35p2004snsgv2x2km8w6"},{"name":"kafka","_id":"cjxag35u30051nsgv7zz0fgi0"},{"name":"消息队列","_id":"cjxag35u40052nsgva2e9l44r"},{"name":"流处理","_id":"cjxag35u50054nsgvfs8ds81j"},{"name":"软考","_id":"cjxag35vf0059nsgvj1odhnul"}]}}